<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[CodeBlocQ]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://klugjo.github.io/"/>
  <updated>2016-02-22T11:29:30.000Z</updated>
  <id>http://klugjo.github.io/</id>
  
  <author>
    <name><![CDATA[Klughertz Jonathan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[How to use a custom domain with your github pages site]]></title>
    <link href="http://klugjo.github.io/2016/02/How-to-use-a-custom-domain-with-your-github-pages-site/"/>
    <id>http://klugjo.github.io/2016/02/How-to-use-a-custom-domain-with-your-github-pages-site/</id>
    <published>2016-02-22T10:39:16.000Z</published>
    <updated>2016-02-22T11:29:30.000Z</updated>
    <content type="html"><![CDATA[<p>This article goes through the process of setting up a custom domain for a github pages website.</p>
<a id="more"></a>
<h2 id="Pre_requisites">Pre requisites</h2><p>This article assumes that you already have a github pages website up and running. Mine is <a href="https://github.com/klugjo/klugjo.github.io" target="_blank" rel="external">klugjo.github.io</a>.</p>
<h2 id="Create_the_github_CNAME_file">Create the github CNAME file</h2><p>In order to use a custom domain, you need to let Github know about it with the help of a CNAME file:</p>
<ul>
<li>Create a file names <code>CNAME</code> at the root of your website. The file name has to be all Caps.</li>
<li>Inside that file, input your custom domain name <u>without</u> <code>http(s)://</code>.<br><a href="https://github.com/klugjo/klugjo.github.io/blob/master/CNAME" target="_blank" rel="external">My CNAME file</a> contains: </li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www<span class="class">.codeblocq</span><span class="class">.com</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Commit and push your changes</li>
</ul>
<p>That is it for the configuration on the github side.</p>
<h2 id="Setup_the_DNS_provider">Setup the DNS provider</h2><p>You can contact your DNS provider for help on how to configure an A record but this is how I configured mine:</p>
<p><img src="https://s3.amazonaws.com/klugjo.github.io/github-pages-custom-domain.png" alt="DNS provider configuration github pages custom domain"></p>
<p>The <code>CNAME</code> record for www is set to <strong>klugjo.github.io</strong>. The role of a CNAME record is to map a name to another name. Useful when the IP address of the host is not know or not stable.</p>
<p>The URL record is set to <a href="http://www.codeblocq.com" target="_blank" rel="external">http://www.codeblocq.com</a> in order to redirect all traffic to the www site.</p>
<h2 id="Notes">Notes</h2><ul>
<li>You can only setup one custom domain in the CNAME file on github. <a href="https://help.github.com/articles/about-supported-custom-domains/" target="_blank" rel="external">See what are the supported custom domains</a>.</li>
<li>Read <a href="https://help.github.com/articles/setting-up-an-apex-domain/" target="_blank" rel="external">this article</a> if you need to configure an A record with your DNS provider.</li>
<li>If you still canâ€™t get it right, check out <a href="https://help.github.com/articles/troubleshooting-custom-domains/" target="_blank" rel="external">this troubleshooting guide</a>.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>This article goes through the process of setting up a custom domain for a github pages website.</p>]]>
    
    </summary>
    
      <category term="Custom Domain" scheme="http://klugjo.github.io/tags/Custom-Domain/"/>
    
      <category term="DNS Provider" scheme="http://klugjo.github.io/tags/DNS-Provider/"/>
    
      <category term="Github" scheme="http://klugjo.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Babel and Node Module Loader]]></title>
    <link href="http://klugjo.github.io/2016/02/Babel-and-Node-Module-Loader/"/>
    <id>http://klugjo.github.io/2016/02/Babel-and-Node-Module-Loader/</id>
    <published>2016-02-20T01:26:03.000Z</published>
    <updated>2016-02-20T03:02:45.000Z</updated>
    <content type="html"><![CDATA[<p>This article will show you how to get started with ES6 modules in node with Babel.<br><a id="more"></a><br>If you need to setup your environment, check out <a href="/2016/02/How-to-setup-Babel6-for-NodeJs/">this article</a>.</p>
<h2 id="Exports">Exports</h2><p>In your library, export functions and classes this way:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ----------</span></span><br><span class="line"><span class="comment">// module1.js</span></span><br><span class="line"><span class="comment">// ----------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> life = <span class="string">"42"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    constructor(color) &#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getCarColor() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Imports">Imports</h2><h3 id="Import_specific">Import specific</h3><p>You can specify which value you wish to import using the following syntax:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;life, add <span class="keyword">as</span> addition&#125; <span class="keyword">from</span> <span class="string">'./module1'</span></span><br><span class="line"></span><br><span class="line">console.log(life); <span class="comment">// 42</span></span><br><span class="line"><span class="built_in">console</span>.log(addition(<span class="number">1</span>,<span class="number">1</span>)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>Note how you can use <code>as</code> to change the name of some of the values.</p>
<h3 id="Import_all">Import all</h3><p>You can use <code>*</code> to import all the values</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> myModule <span class="keyword">from</span> <span class="string">'./module1'</span></span><br><span class="line"></span><br><span class="line">var car = new myModule.Car(<span class="string">"blue"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(car.getCarColor()); <span class="comment">// blue</span></span><br></pre></td></tr></table></figure>
<h2 id="Default_export">Default export</h2><p>If your module only has one value to export, use <code>default</code> when exporting that value.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Export - myModule.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Import</span></span><br><span class="line"><span class="keyword">import</span> myFunc <span class="keyword">from</span> <span class="string">'./myModule'</span>;</span><br><span class="line">myFunc();</span><br></pre></td></tr></table></figure>
<p>This information should be enough for you to get started with ES6/ES2015 modules. If you need to know more, I would recommend <a href="http://exploringjs.com/es6/ch_modules.html" target="_blank" rel="external">this article</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This article will show you how to get started with ES6 modules in node with Babel.<br>]]>
    
    </summary>
    
      <category term="Babel" scheme="http://klugjo.github.io/tags/Babel/"/>
    
      <category term="ES2015" scheme="http://klugjo.github.io/tags/ES2015/"/>
    
      <category term="ES6" scheme="http://klugjo.github.io/tags/ES6/"/>
    
      <category term="Node" scheme="http://klugjo.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How to setup Babel6 for NodeJs]]></title>
    <link href="http://klugjo.github.io/2016/02/How-to-setup-Babel6-for-NodeJs/"/>
    <id>http://klugjo.github.io/2016/02/How-to-setup-Babel6-for-NodeJs/</id>
    <published>2016-02-16T11:58:08.000Z</published>
    <updated>2016-02-20T03:06:48.000Z</updated>
    <content type="html"><![CDATA[<p>This article gives you a basic way of setting up your environment if you want to use ES2015 with Node (using v4.3.0 in this tutorial).<br><a id="more"></a> </p>
<h2 id="Babel_libraries">Babel libraries</h2><p>You will first need:</p>
<ul>
<li><a href="https://babeljs.io/docs/usage/cli/" target="_blank" rel="external">babel-cli</a>: Used to compile files from the command line</li>
<li><a href="http://babeljs.io/docs/usage/api/" target="_blank" rel="external">babel-core</a>: Core API</li>
<li><a href="https://babeljs.io/docs/plugins/preset-es2015/" target="_blank" rel="external">babel-preset-es2015</a>: Collection of all the plugins needed to write ES2015 JavaScript.</li>
</ul>
<p>(Babel in itself does not do anything and it is the plugins that will define what it does.)</p>
<h3 id="Installation">Installation</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev babel-cli babel-core babel-preset-es2015</span><br></pre></td></tr></table></figure>
<h2 id="Babel_configuration">Babel configuration</h2><p>The standard way of configuring Babel is to use a <a href="https://babeljs.io/docs/usage/babelrc/" target="_blank" rel="external">.babelrc</a> file:</p>
<p>Put a <code>.babelrc</code> configuration file at the root of your project. I donâ€™t like to have too much stuff in there and <a href="http://babeljs.io/docs/usage/babelrc/" target="_blank" rel="external">thankfully you can also put your config in <code>package.json</code></a>.</p>
<p>Whichever way you choose, inside your configuration put:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [<span class="string">"es2015"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Testing">Testing</h2><p>Create an <code>index.js</code> file with the following ES2015 code:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> doubles = numbers.map(num =&gt; num * <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(doubles); <span class="comment">//  [2, 8, 18 ]</span></span><br></pre></td></tr></table></figure>
<p>Run it with <code>node index.js</code> and check that everything is working.</p>
<h2 id="Create_a_launcher">Create a launcher</h2><p>When using certain features of ES6, you might encounter an error of type:</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">SyntaxError</span>: <span class="string">Unexpected token</span></span><br></pre></td></tr></table></figure>
<p>This means you will need to create a launcher for your app that loads <code>&#39;babel-core/register&#39;</code> ahead of your code.</p>
<p>Assuming your entry point is <code>index.js</code>, create the following launcher:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// -----------</span></span><br><span class="line"><span class="comment">// launcher.js</span></span><br><span class="line"><span class="comment">// -----------</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'babel-core/register'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./index'</span>);</span><br></pre></td></tr></table></figure>
<p>Start your app with <code>node launcher.js</code></p>
<p>This will clear the errors.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This article gives you a basic way of setting up your environment if you want to use ES2015 with Node (using v4.3.0 in this tutorial).<br>]]>
    
    </summary>
    
      <category term="Babel" scheme="http://klugjo.github.io/tags/Babel/"/>
    
      <category term="ES2015" scheme="http://klugjo.github.io/tags/ES2015/"/>
    
      <category term="ES6" scheme="http://klugjo.github.io/tags/ES6/"/>
    
      <category term="Node" scheme="http://klugjo.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Further minify your CSS with CSSO]]></title>
    <link href="http://klugjo.github.io/2016/02/Further-minify-your-CSS-with-CSSO/"/>
    <id>http://klugjo.github.io/2016/02/Further-minify-your-CSS-with-CSSO/</id>
    <published>2016-02-15T06:44:48.000Z</published>
    <updated>2016-02-15T08:21:53.000Z</updated>
    <content type="html"><![CDATA[<p>Hi there, I just discovered <a href="https://github.com/css/csso" target="_blank" rel="external">CSSO â€“ CSS Optimizer</a> and I thought I would check out how it compares to other css minification tools like <a href="https://github.com/jbleuzen/node-cssmin" target="_blank" rel="external">cssmin</a> which is based on YUI compressor.</p>
<a id="more"></a> 
<h2 id="Installation">Installation</h2><p>Its a node package, installation is as straight forward as:</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> -g csso</span><br></pre></td></tr></table></figure>
<h2 id="Usage">Usage</h2><p>You can minify your CSS by using <code>csso.minify(yourCss)</code>.</p>
<p>Example:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> csso = <span class="built_in">require</span>(<span class="string">'csso'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> compressed = csso.minify(<span class="string">'.test &#123; color: #000000; &#125;'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(compressed); <span class="comment">// .test&#123;color:black&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="Basic_comparison_with_cssmin">Basic comparison with cssmin</h2><p>CSSO does more than just <a href="http://yui.github.io/yuicompressor/css.html" target="_blank" rel="external">remove whitespaces and line breaks</a> which is what cssmin based on YUI compressor does. In my opinion thatâ€™s already good enough of a reason to use it. </p>
<p>Letâ€™s look at how good of a job it does.</p>
<h3 id="For_my_quick_test,_I_have_used_2_css_files-">For my quick test, I have used 2 css files.</h3><ul>
<li>Simple CSS File: My blogâ€™s CSS at time of writing is a pretty simple 900 lines css file.</li>
<li>Complex CSS File: <a href="https://github.com/Dogfalo/materialize" target="_blank" rel="external">Materialize</a> main CSS which is a fairly complex 11256 lines stylesheet.</li>
</ul>
<h3 id="Here_are_the_results:">Here are the results:</h3><table>
<thead>
<tr>
<th>Metric</th>
<th style="text-align:center">Simple CSS File</th>
<th style="text-align:center">Complex CSS File</th>
</tr>
</thead>
<tbody>
<tr>
<td>Lines</td>
<td style="text-align:center">842</td>
<td style="text-align:center">11256</td>
</tr>
<tr>
<td>Length</td>
<td style="text-align:center">19133</td>
<td style="text-align:center">201025</td>
</tr>
<tr>
<td>cssmin length (characters)</td>
<td style="text-align:center">15431</td>
<td style="text-align:center">147778</td>
</tr>
<tr>
<td>csso length (characters)</td>
<td style="text-align:center">15405</td>
<td style="text-align:center">145423</td>
</tr>
<tr>
<td>cssmin compression (%)</td>
<td style="text-align:center">19.3%</td>
<td style="text-align:center">26.5%</td>
</tr>
<tr>
<td>csso compression (%)</td>
<td style="text-align:center">19.5%</td>
<td style="text-align:center">27.7%</td>
</tr>
</tbody>
</table>
<p>CSSO does a bit better than cssmin but the difference is negligible. I certainly wouldnâ€™t go ahead and change my current projects over to CSSO but I will give CSSO a try for my next project.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Hi there, I just discovered <a href="https://github.com/css/csso">CSSO â€“ CSS Optimizer</a> and I thought I would check out how it compares to other css minification tools like <a href="https://github.com/jbleuzen/node-cssmin">cssmin</a> which is based on YUI compressor.</p>]]>
    
    </summary>
    
      <category term="Build" scheme="http://klugjo.github.io/tags/Build/"/>
    
      <category term="CSS" scheme="http://klugjo.github.io/tags/CSS/"/>
    
      <category term="CSSO" scheme="http://klugjo.github.io/tags/CSSO/"/>
    
      <category term="CssMin" scheme="http://klugjo.github.io/tags/CssMin/"/>
    
      <category term="node" scheme="http://klugjo.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Stash your changes before switching branch with Git]]></title>
    <link href="http://klugjo.github.io/2016/02/Stash-your-changes-before-switching-branch/"/>
    <id>http://klugjo.github.io/2016/02/Stash-your-changes-before-switching-branch/</id>
    <published>2016-02-10T07:45:39.000Z</published>
    <updated>2016-02-11T12:36:58.000Z</updated>
    <content type="html"><![CDATA[<p>Common everyday scenario: you are working on your feature branch fixing a bug and your boss asks you for a build. You need to switch back to your main dev branch. Before that happens, you have to take care of all your current changes. You can either commit if you are ready for it, or maybe you have only modified a few lines and can simply revert your changes. </p>
<p>Well there is a better solution: git stash.<br><a id="more"></a> </p>
<h2 id="Setting_up_the_stage">Setting up the stage</h2><p>We have 2 files: <code>file1.txt</code> and <code>file2.txt</code> and 2 branches, <code>master</code> and <code>new-branch</code>.</p>
<p>If you want to follow along here is the script</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir testgitstash <span class="comment"># create directory</span></span><br><span class="line"><span class="built_in">cd</span> testgitstash <span class="comment"># change to that directory</span></span><br><span class="line">git init <span class="comment"># init git repo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">test</span>1 &gt; file1.txt <span class="comment"># create 2 files</span></span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">test</span>2 &gt; file2.txt</span><br><span class="line">git add . <span class="comment"># add both files</span></span><br><span class="line">git commit -m <span class="string">"Initial commit"</span> <span class="comment"># commit both files</span></span><br><span class="line">git checkout -b new-branch <span class="comment"># create a new branch and switch to that branch</span></span><br></pre></td></tr></table></figure>
<p>On top of that you have some pending changes on new-branch</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> change &gt; file1.txt <span class="comment"># change file1</span></span><br><span class="line">git commit -am <span class="string">"update"</span> <span class="comment"># commit change</span></span><br><span class="line"><span class="built_in">echo</span> change2 &gt; file1.txt <span class="comment"># change file1 again</span></span><br></pre></td></tr></table></figure>
<h2 id="The_problem">The problem</h2><p>If you want to switch back to <code>master</code>, you will get an error message:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">error: Your <span class="built_in">local</span> changes to the following files would be overwritten by checkout: </span><br><span class="line">    file1.txt</span><br><span class="line">Please, commit your changes or stash them before you can switch branches.</span><br><span class="line"></span><br><span class="line">Aborting</span><br></pre></td></tr></table></figure>
<p>Git does not allow you to switch back to <code>master</code> because you have changes on <code>new-branch</code>.</p>
<h2 id="One_solution:_git_stash">One solution: <code>git stash</code></h2><h3 id="Stash_the_changes">Stash the changes</h3><p>Instead of committing your changes or reverting, you can stash them with:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash save <span class="string">"changes on new-branch"</span></span><br></pre></td></tr></table></figure>
<h3 id="Switch_branch">Switch branch</h3><p>You can now switch back to <code>master</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br></pre></td></tr></table></figure>
<p>Do whatever changes you want on master, and when ready, go back to <code>new-branch</code>.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout new-branch</span><br></pre></td></tr></table></figure>
<h3 id="Unstash_the_changes">Unstash the changes</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure>
<p>Your changes will be put back and you can continue what you were doing initially.</p>
<h2 id="Notes">Notes</h2><h3 id="-_Your_changes_are_stashed_on_a_stack">- Your changes are stashed on a stack</h3><p>You can stack several changes and check the current stash stack using:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash list</span><br></pre></td></tr></table></figure>
<p>You can also unstash a specific stash by using</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash pop <span class="string">"stash@&#123;1&#125;"</span></span><br></pre></td></tr></table></figure>
<h3 id="-_Git_stash_pop_can_be_split_in_two">- Git stash pop can be split in two</h3><p>Git stash pop is the combination of two other commands:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash apply</span><br></pre></td></tr></table></figure>
<p>which applies the last stash and:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash drop</span><br></pre></td></tr></table></figure>
<p>which destroys the last stash</p>
<p><br><br>Hope this helped, there would be much more to say on this suject but I hope this will give you a place to start :)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Common everyday scenario: you are working on your feature branch fixing a bug and your boss asks you for a build. You need to switch back to your main dev branch. Before that happens, you have to take care of all your current changes. You can either commit if you are ready for it, or maybe you have only modified a few lines and can simply revert your changes. </p>
<p>Well there is a better solution: git stash.<br>]]>
    
    </summary>
    
      <category term="Bash" scheme="http://klugjo.github.io/tags/Bash/"/>
    
      <category term="Git" scheme="http://klugjo.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git add]]></title>
    <link href="http://klugjo.github.io/2016/02/git-add/"/>
    <id>http://klugjo.github.io/2016/02/git-add/</id>
    <published>2016-02-09T07:48:25.000Z</published>
    <updated>2016-02-11T12:36:48.000Z</updated>
    <content type="html"><![CDATA[<p>This article is a description of all the basic git add commands.</p>
<a id="more"></a> 
<h2 id="Understanding">Understanding</h2><p>Git uses a notion of changes staged for the next commit where you set which change you wish to include in the next <code>git commit</code> command. This includes new files, deleted files and modifications.</p>
<p>For those in a hurry, here is the conclusion of this article:</p>
<table>
<thead>
<tr>
<th>Command</th>
<th style="text-align:center">New Files</th>
<th style="text-align:center">Modified Files</th>
<th style="text-align:center">Deleted Files </th>
</tr>
</thead>
<tbody>
<tr>
<td><code>git add -A</code></td>
<td style="text-align:center">V</td>
<td style="text-align:center">V</td>
<td style="text-align:center">V</td>
</tr>
<tr>
<td><code>git add .</code></td>
<td style="text-align:center">V</td>
<td style="text-align:center">V</td>
<td style="text-align:center">V</td>
</tr>
<tr>
<td><code>git add -u</code></td>
<td style="text-align:center"><span style="color: red;">X</span></td>
<td style="text-align:center">V</td>
<td style="text-align:center">V</td>
</tr>
<tr>
<td><code>git add --ignore-removal</code></td>
<td style="text-align:center">V</td>
<td style="text-align:center">V</td>
<td style="text-align:center"><span style="color: red;">X</span></td>
</tr>
</tbody>
</table>
<p>Letâ€™s start by initializing a new git repository:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line"><span class="comment"># Initialized empty Git repository in /.git/</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="built_in">test</span>1 &gt; file-delete.txt</span><br><span class="line">$ <span class="built_in">echo</span> <span class="built_in">test</span>2 &gt; file-modify.txt</span><br></pre></td></tr></table></figure>
<h2 id="Add_by_filename">Add by filename</h2><p>Use <code>git add [&lt;pathspec&gt;â€¦â€‹]</code> to add file by their name.</p>
<p>If we want to add our two files created above:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add file1.txt file2.txt</span><br></pre></td></tr></table></figure>
<p>It is also possible to use wildcards</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add *.txt</span><br></pre></td></tr></table></figure>
<p>After any of these two commands, both our files will be staged for the next commit. Letâ€™s do our first commit before we continue.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">"Initial commit"</span></span><br></pre></td></tr></table></figure>
<h2 id="Stage_all_changes">Stage all changes</h2><p>If you wish to add deletions, updates and file creations, you can use any of these 3 commands:</p>
<ul>
<li><code>git add -A</code></li>
<li><code>git add .</code></li>
<li><code>git add --all</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> change &gt; file-modify.txt <span class="comment"># modifiy a file</span></span><br><span class="line">$ rm file-delete.txt <span class="comment"># delete a file</span></span><br><span class="line">$ <span class="built_in">echo</span> new &gt; file-new.txt <span class="comment"># create a new file</span></span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line"><span class="comment"># deleted:    file-delete.txt</span></span><br><span class="line"><span class="comment"># modified:   file-modify.txt</span></span><br><span class="line"><span class="comment"># untracked:  file-new.txt</span></span><br></pre></td></tr></table></figure>
<p>At this point, any of the command above will stage all these files:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git add -A <span class="comment"># add all files to the next commit</span></span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line"><span class="comment"># changes to be committed:</span></span><br><span class="line"><span class="comment"># deleted:    file-delete.txt</span></span><br><span class="line"><span class="comment"># modified:   file-modify.txt</span></span><br><span class="line"><span class="comment"># new file:   file-new.txt</span></span><br></pre></td></tr></table></figure>
<p>At this point, letâ€™s do a <code>git reset</code> to revert the staged changes and demonstrate the other commands.</p>
<h2 id="Stage_modified_and_deleted_files_only">Stage modified and deleted files only</h2><p>If you donâ€™t want to add the newly created files, but only the modifications and deletions, use any of the following:</p>
<ul>
<li><code>git add -u</code></li>
<li><code>git add -update</code></li>
</ul>
<p>Example:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git add -u</span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line"><span class="comment"># changes to be committed:</span></span><br><span class="line"><span class="comment"># deleted:    file-delete.txt</span></span><br><span class="line"><span class="comment"># modified:   file-modify.txt</span></span><br><span class="line"><span class="comment"># untracked files:</span></span><br><span class="line"><span class="comment"># file-new.txt</span></span><br></pre></td></tr></table></figure>
<p>Once again, a quick <code>git reset</code> will reset staged changes and allow us to look at the last option</p>
<h2 id="Stage_modified_and_new_files_only">Stage modified and new files only</h2><p>If you want to stage everything except the files that have been deleted, use:</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">add</span> <span class="comment">--ignore-removal</span></span><br></pre></td></tr></table></figure>
<p>Example:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git add --ignore-removal</span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line"><span class="comment"># changes to be committed:</span></span><br><span class="line"><span class="comment"># modified:   file-modify.txt</span></span><br><span class="line"><span class="comment"># new file:   file-new.txt </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Changed but not updated:</span></span><br><span class="line"><span class="comment"># deleted:    file-delete.txt</span></span><br></pre></td></tr></table></figure>
<h2 id="Try_it_yourself">Try it yourself</h2><p>Here is the full script if you want to see it with your own eyes :)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">test</span>1 &gt; file-delete.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">test</span>2 &gt; file-modify.txt</span><br><span class="line">git add *.txt</span><br><span class="line">git commit -m <span class="string">"Initial commit"</span></span><br><span class="line"><span class="built_in">echo</span> change &gt; file-modify.txt </span><br><span class="line">rm file-delete.txt</span><br><span class="line"><span class="built_in">echo</span> new &gt; file-new.txt</span><br><span class="line">git add -A</span><br><span class="line">git status</span><br><span class="line">git reset</span><br><span class="line">git add -u</span><br><span class="line">git status</span><br><span class="line">git reset</span><br><span class="line">git add --ignore-removal</span><br><span class="line">git status</span><br></pre></td></tr></table></figure>
<p>Hope this gives you a clearer view of what is going on !</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This article is a description of all the basic git add commands.</p>]]>
    
    </summary>
    
      <category term="Bash" scheme="http://klugjo.github.io/tags/Bash/"/>
    
      <category term="Git" scheme="http://klugjo.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Notes on Never Eat Alone by Keith Ferrazzi]]></title>
    <link href="http://klugjo.github.io/2016/02/Notes-on-Never-Eat-Alone-by-Keith-Ferrazzi/"/>
    <id>http://klugjo.github.io/2016/02/Notes-on-Never-Eat-Alone-by-Keith-Ferrazzi/</id>
    <published>2016-02-09T07:26:18.000Z</published>
    <updated>2016-02-11T12:50:58.000Z</updated>
    <content type="html"><![CDATA[<h2 id="First_impressions">First impressions</h2><p>I have just finished <a href="http://keithferrazzi.com/products/never-eat-alone" target="_blank" rel="external">Never Eat Alone</a>. It is a book about building a supportive network of business connections that will propel you to the highest spheres of the business world.<br><a id="more"></a> </p>
<p>The author goes through the story of his life and how he networked his way to the top. From his humble lower class beginnings, through golf sessions, wine dinners and republican rallies to being a top consultant and CEO. </p>
<p>I have gone through the entire book and it is packed with excellent advices, some of which I have detailed below. It is hard not to appreciate the honesty, authenticity and candor of the author. It is an excellent reminder that in life or business you canâ€™t make it alone. As a software developer, it is often too easy to think that your skills are enough to get ahead and this book serves as a powerful reminder that this is certainly not the case.</p>
<p>I had one minor problem with the book though, it assumes that you are an extrovert looking to smooth talk your way up the American Dream. Probably Appealing to some, I often had difficulties identifying to the authorâ€™s behavior and real life situations.</p>
<h2 id="Notes_and_Takeaways">Notes and Takeaways</h2><ul>
<li>You canâ€™t make it alone. People will always be the foundation of any human enterprise. Lone wolfs will inevitably crumble under their own weight.</li>
<li>Fearing rejection is normal, just ignore it and power through.</li>
<li>Not everyone is born with excellent communication skills but these can be learnt like any other skill.</li>
<li>Always be generous and loyal. When meeting someone, think: how can I help and not how can this person help me.</li>
<li>Be patient and meet as many people as you can. Build your network way before you need it.</li>
<li>Ping people constantly to keep all your hard earned relatioship alive. But once again remain interesting and authentic.</li>
<li>Set your goals straight and have a clear message, this will make people want to have you in their network and will help you hold intelligent conversations. Be your own brand and market yourself effectively.</li>
<li>The pillars of your network should be super connectors, mentors and mentees.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="First_impressions">First impressions</h2><p>I have just finished <a href="http://keithferrazzi.com/products/never-eat-alone">Never Eat Alone</a>. It is a book about building a supportive network of business connections that will propel you to the highest spheres of the business world.<br>]]>
    
    </summary>
    
      <category term="Books" scheme="http://klugjo.github.io/tags/Books/"/>
    
      <category term="General Business" scheme="http://klugjo.github.io/tags/General-Business/"/>
    
      <category term="Networking" scheme="http://klugjo.github.io/tags/Networking/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Node Auto Completion in WebStorm on OSX]]></title>
    <link href="http://klugjo.github.io/2016/02/Node-auto-completion-in-WebStorm-on-OSX/"/>
    <id>http://klugjo.github.io/2016/02/Node-auto-completion-in-WebStorm-on-OSX/</id>
    <published>2016-02-03T01:25:55.000Z</published>
    <updated>2016-02-11T12:50:44.000Z</updated>
    <content type="html"><![CDATA[<p>Quick article on how to add auto completion in Webstorm 11 for all the core Node libraries.<br><a id="more"></a></p>
<h2 id="The_problem">The problem</h2><p>Without Node coding assistance, you will get warnings on all the Node.js core functions like <code>require</code> or <code>__dirname</code>.</p>
<p><img src="https://s3.amazonaws.com/klugjo.github.io/node-code-completion-missing-webstorm.png" alt="Node Code Completion missing example" title="node code completion missing in webstorm"></p>
<h2 id="The_solution">The solution</h2><p>In webstorm 11 you need to enable the Node.js assistance:</p>
<p>Got to <strong>Preferences &gt; Languages &amp; Frameworks &gt; Node.js and npm</strong> and click <strong>Enable</strong> under Code Assistance.</p>
<p><img src="https://s3.amazonaws.com/klugjo.github.io/enable-core-node-js-code-assistance-webstorm.png" alt="Enable Node.js code assistance" title="enable the Node.js assistance"></p>
<p>Go back to your code and the errors will be gone !</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Quick article on how to add auto completion in Webstorm 11 for all the core Node libraries.<br>]]>
    
    </summary>
    
      <category term="Node" scheme="http://klugjo.github.io/tags/Node/"/>
    
      <category term="OS X" scheme="http://klugjo.github.io/tags/OS-X/"/>
    
      <category term="WebStorm" scheme="http://klugjo.github.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Debug hexo blog generation in webstorm]]></title>
    <link href="http://klugjo.github.io/2016/02/Debug-hexo-blog-generation-in-webstorm/"/>
    <id>http://klugjo.github.io/2016/02/Debug-hexo-blog-generation-in-webstorm/</id>
    <published>2016-02-02T06:44:51.000Z</published>
    <updated>2016-02-11T12:50:28.000Z</updated>
    <content type="html"><![CDATA[<p>In this article I will detail how I setup a debug configuration in webstorm in order to debug hexo. The information contained here can easily be applied to debugging any node app that is executed with a command lined command (<code>hexo generate</code>) instead of the more standard <code>node index.js</code>.<br><a id="more"></a> </p>
<h2 id="The_problem">The problem</h2><p>When setting up a <a href="https://www.jetbrains.com/webstorm/help/run-debug-configuration-node-js.html" target="_blank" rel="external">node debug configuration in Webstorm</a> you have to specify a file path. Since we are trying to debug <code>hexo generate</code>, we donâ€™t have any JavaScript file to specify.</p>
<h2 id="The_trick">The trick</h2><p>The trick here is to specify the path to the hexo executable located in <code>node_modules/.bin/hexo</code>.</p>
<p>When adding your configuration, use the following:</p>
<table>
<thead>
<tr>
<th>Field</th>
<th>Value</th>
<th>Example </th>
</tr>
</thead>
<tbody>
<tr>
<td>Node Interpreter</td>
<td>Path to Node</td>
<td>/usr/local/bin/node (on OSX)</td>
</tr>
<tr>
<td>Node Parameters</td>
<td>Node args to specify debug mode</td>
<td>--debug-brk</td>
</tr>
<tr>
<td>Working Directory</td>
<td>Project Directory</td>
<td>path/to/project</td>
</tr>
<tr>
<td>JavaScript File</td>
<td>Path to hexo executable</td>
<td>node_modules/.bin/hexo</td>
</tr>
<tr>
<td>Application Parameters</td>
<td>CLI command args</td>
<td>generate</td>
</tr>
<tr>
<td>Environment Variables</td>
<td>process.env.ENV_VARIABLE</td>
<td><em>empty</em></td>
</tr>
</tbody>
</table>
<p>Once you are done, set up a breakpoint somewhere and hit the debug button.</p>
<p>Thanks to this <a href="http://stackoverflow.com/questions/30942953/how-can-i-debug-a-node-app-that-is-started-via-the-command-line-cli-like-forev" target="_blank" rel="external">Stack Overflow Post</a> for pointing me in the right direction.<br>You can refer to it if you wish to use <code>node-inspector</code> instead of Webstorm to do your debugging.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>In this article I will detail how I setup a debug configuration in webstorm in order to debug hexo. The information contained here can easily be applied to debugging any node app that is executed with a command lined command (<code>hexo generate</code>) instead of the more standard <code>node index.js</code>.<br>]]>
    
    </summary>
    
      <category term="Debugging" scheme="http://klugjo.github.io/tags/Debugging/"/>
    
      <category term="Hexo" scheme="http://klugjo.github.io/tags/Hexo/"/>
    
      <category term="WebStorm" scheme="http://klugjo.github.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Display an animated counter on your webpage]]></title>
    <link href="http://klugjo.github.io/2016/02/Display-an-animated-counter-on-your-webpage/"/>
    <id>http://klugjo.github.io/2016/02/Display-an-animated-counter-on-your-webpage/</id>
    <published>2016-02-01T06:50:35.000Z</published>
    <updated>2016-02-11T12:37:43.000Z</updated>
    <content type="html"><![CDATA[<p>I just discovered <a href="http://github.hubspot.com/odometer/docs/welcome/" target="_blank" rel="external">Odometer</a> which is a cool open source library to transition numbers. It comes with a set of <a href="http://github.hubspot.com/odometer/api/themes/" target="_blank" rel="external">css themes</a>.</p>
<a id="more"></a> 
<h2 id="Example">Example</h2><p><br></p>
<script type="application/javascript">

    function updateNumbers() {
        setInterval(function(){
            var val = Math.floor(Math.random()*1000);
            val = val < 100 ? (val + 100) : val;
            document.getElementById('odometer').innerHTML = val;
        }, 4000);
    }

    updateNumbers();
</script>

<p><div id="odometer" class="odometer" style="font-size: 25px">321</div></p>
<h2 id="Usage">Usage</h2><h3 id="Install">Install</h3><p>Go to the <a href="http://github.hubspot.com/odometer/" target="_blank" rel="external">libraryâ€™s page</a> and download a zip file with the library or fire up bower:</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">bower </span>install odometer</span><br></pre></td></tr></table></figure>
<p>Include the js library, for example <code>odometer.min.js</code> .<br>Include the css for the theme of your choice, for example <code>odometer-theme-car.css</code>.</p>
<h3 id="Initialisation">Initialisation</h3><p>Create an element with the CSS class <code>.odometer</code> and the library will initialise automatically.</p>
<p>Check out <a href="http://github.hubspot.com/odometer/" target="_blank" rel="external">the documentation</a> if you need more configuration options.</p>
<h3 id="Update_the_value">Update the value</h3><p>You can update the value by setting the elementâ€™s <code>innerHTML</code>, <code>innerText</code>, or by using jQueryâ€™s <code>.text()</code> or <code>.html()</code>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I just discovered <a href="http://github.hubspot.com/odometer/docs/welcome/">Odometer</a> which is a cool open source library to transition numbers. It comes with a set of <a href="http://github.hubspot.com/odometer/api/themes/">css themes</a>.</p>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://klugjo.github.io/tags/CSS/"/>
    
      <category term="HTML" scheme="http://klugjo.github.io/tags/HTML/"/>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>

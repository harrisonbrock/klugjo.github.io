<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Klughertz Jonathan]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://klugjo.github.io/"/>
  <updated>2016-01-04T10:15:26.000Z</updated>
  <id>http://klugjo.github.io/</id>
  
  <author>
    <name><![CDATA[Klughertz Jonathan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Sorting files using the ls command]]></title>
    <link href="http://klugjo.github.io/2016/01/Sorting-files-using-the-ls-command/"/>
    <id>http://klugjo.github.io/2016/01/Sorting-files-using-the-ls-command/</id>
    <published>2016-01-04T09:24:40.000Z</published>
    <updated>2016-01-04T10:15:26.000Z</updated>
    <content type="html"><![CDATA[<p>In the article we will look at different ways of sorting results of the ls (— list directory content) command.</p>
<a id="more"></a> 
<p>In all example, use the <code>-l</code> flag in addition to the sort flag to retrieve a long description of files and verify your results.</p>
<p><br></p>
<h2 id="Sort_by_name">Sort by name</h2><p>This is the default:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Jonathans-MBP:_posts klugjo$ ls <span class="operator">-l</span></span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">2290</span> Dec  <span class="number">6</span> <span class="number">09</span>:<span class="number">08</span> Add-Disqus-comments-in-Hexo.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">2066</span> Dec  <span class="number">6</span> <span class="number">09</span>:<span class="number">09</span> Add-Google-Analytics-to-your-hexo-blog.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff   <span class="number">952</span> Dec  <span class="number">9</span> <span class="number">21</span>:<span class="number">08</span> Add-an-RSS-feed-to-your-hexo-blog.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">4597</span> Dec <span class="number">11</span> <span class="number">13</span>:<span class="number">32</span> Build-and-package-your-client-side-code-using-npm.md</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="Sort_by_file_size">Sort by file size</h2><p>To sort by file size, use</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-S      Sort files by size</span><br></pre></td></tr></table></figure>
<h3 id="Example">Example</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Jonathans-MBP:_posts klugjo$ ls -Sl</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">8337</span> Dec <span class="number">23</span> <span class="number">16</span>:<span class="number">41</span> Build-your-first-React-application.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">4597</span> Dec <span class="number">11</span> <span class="number">13</span>:<span class="number">32</span> Build-and-package-your-client-side-code-using-npm.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">4506</span> Dec  <span class="number">6</span> <span class="number">09</span>:<span class="number">14</span> Getting-started-with-Gulp-and-static-websites.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">4317</span> Dec  <span class="number">6</span> <span class="number">09</span>:<span class="number">14</span> Refresh-webpages-automatically-during-development-using-Gulp.md</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="Sort_by_modification_date">Sort by modification date</h2><p>To sort by modification date, use</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-t      Sort by time modified (most recently modified first) </span><br><span class="line">        before sorting the operands by lexicographical order.</span><br></pre></td></tr></table></figure>
<h3 id="Example-1">Example</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Jonathans-MBP:_posts klugjo$ ls -tl</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">1634</span> Jan  <span class="number">4</span> <span class="number">17</span>:<span class="number">55</span> Sorting-files-using-the-ls-command.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">2519</span> Dec <span class="number">31</span> <span class="number">18</span>:<span class="number">06</span> Code-snippets-in-Webstorm.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">4083</span> Dec <span class="number">29</span> <span class="number">12</span>:<span class="number">32</span> Loops-and-callbacks-in-React.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">3957</span> Dec <span class="number">28</span> <span class="number">17</span>:<span class="number">23</span> Easy-dynamic-classes-with-React.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">1418</span> Dec <span class="number">24</span> <span class="number">10</span>:<span class="number">13</span> Passing-arguments-to-the-underlying-command-in-npm-scripts.md</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="Sort_by_last_time_of_access">Sort by last time of access</h2><p>To sort by last time of access, use <code>-u</code> combined with the <code>-t</code> flag (to sort by date):</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-u      Use time of last access, instead of last modification </span><br><span class="line">        of the file <span class="keyword">for</span> sorting (-t) or long printing (<span class="operator">-l</span>).</span><br></pre></td></tr></table></figure>
<h3 id="Example-2">Example</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Jonathans-MBP:_posts klugjo$ ls -tlu</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">2188</span> Jan  <span class="number">4</span> <span class="number">17</span>:<span class="number">58</span> Sorting-files-using-the-ls-command.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">2290</span> Dec <span class="number">31</span> <span class="number">18</span>:<span class="number">07</span> Add-Disqus-comments-in-Hexo.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">2066</span> Dec <span class="number">31</span> <span class="number">18</span>:<span class="number">07</span> Add-Google-Analytics-to-your-hexo-blog.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff   <span class="number">952</span> Dec <span class="number">31</span> <span class="number">18</span>:<span class="number">07</span> Add-an-RSS-feed-to-your-hexo-blog.md</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="Sort_by_creation_date">Sort by creation date</h2><p>To sort by creation date, use <code>-U</code> combined with the <code>-t</code> flag (to sort by date):</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-U      Use time of file creation, instead of last modification </span><br><span class="line">        <span class="keyword">for</span> sorting (-t) or long output (<span class="operator">-l</span>).</span><br></pre></td></tr></table></figure>
<h3 id="Example-3">Example</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Jonathans-MBP:_posts klugjo$ ls -tlU</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">3032</span> Jan  <span class="number">4</span> <span class="number">18</span>:<span class="number">04</span> Sorting-files-using-the-ls-command.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">2519</span> Dec <span class="number">31</span> <span class="number">18</span>:<span class="number">06</span> Code-snippets-in-Webstorm.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">4083</span> Dec <span class="number">29</span> <span class="number">12</span>:<span class="number">32</span> Loops-and-callbacks-in-React.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">3957</span> Dec <span class="number">28</span> <span class="number">17</span>:<span class="number">23</span> Easy-dynamic-classes-with-React.md</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="Reverse_order">Reverse order</h2><p>To reverse the order of any of the sort above, add the <code>-r</code> flag:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-r      Reverse the order of the sort to get reverse lexicographical </span><br><span class="line">        order or the oldest entries first (or largest files last, <span class="keyword">if</span> combined with sort by size</span><br></pre></td></tr></table></figure>
<h3 id="Example_(sort_by_creation_date_starting_with_the_oldest_first)">Example (sort by creation date starting with the oldest first)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Jonathans-MBP:_posts klugjo$ ls -tlrU</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">2290</span> Dec  <span class="number">6</span> <span class="number">09</span>:<span class="number">08</span> Add-Disqus-comments-in-Hexo.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">2066</span> Dec  <span class="number">6</span> <span class="number">09</span>:<span class="number">09</span> Add-Google-Analytics-to-your-hexo-blog.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">1428</span> Dec  <span class="number">6</span> <span class="number">09</span>:<span class="number">13</span> round-images-in-css.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">4317</span> Dec  <span class="number">6</span> <span class="number">09</span>:<span class="number">14</span> Refresh-webpages-automatically-during-development-using-Gulp.md</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure>
<p>Happy sorting !</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>In the article we will look at different ways of sorting results of the ls (— list directory content) command.</p>]]>
    
    </summary>
    
      <category term="Bash" scheme="http://klugjo.github.io/tags/Bash/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Code snippets in Webstorm]]></title>
    <link href="http://klugjo.github.io/2015/12/Code-snippets-in-Webstorm/"/>
    <id>http://klugjo.github.io/2015/12/Code-snippets-in-Webstorm/</id>
    <published>2015-12-31T03:41:42.000Z</published>
    <updated>2015-12-31T10:06:23.000Z</updated>
    <content type="html"><![CDATA[<p>This article will show you how to create code snippets, also known as <a href="https://www.jetbrains.com/webstorm/help/live-templates-2.html" target="_blank" rel="external">live templates</a>, in WebStorm. We will create a JavaScript <a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript" target="_blank" rel="external">Revealing Module Pattern</a> live template.</p>
<a id="more"></a> 
<p><br></p>
<h2 id="Creating_a_new_live_template">Creating a new live template</h2><p>In Webstorm, access the live templates editor:</p>
<ul>
<li>Windows &amp; Linux: <code>File | Settings | Editor | Live Templates</code></li>
<li>OS X: <code>WebStorm | Preferences | Editor | Live Templates</code></li>
</ul>
<p>Press the <code>+</code> to add a new template.</p>
<p>Then use the following:</p>
<ul>
<li>Abbreviation: <code>revmod</code></li>
<li>Description: <code>Revealing Module Pattern</code></li>
<li>Applicable context: Click the define button and choose JavaScript. This means the template will be usable</li>
</ul>
<p><br></p>
<h2 id="Editing_the_live_template_code">Editing the live template code</h2><p>Let’s start with a basic template code for our revealing module pattern:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myModule = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">myMethod</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    myMethod : myMethod</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>Save it then go to any .js file and type <code>revmod</code>. Intellisense will show the live template, select it and press TAB or ENTER.</p>
<p>The code for our template will appear in your file. Let’s make it more interactive.</p>
<p><br></p>
<h2 id="Improving_the_template">Improving the template</h2><h3 id="Template_variables">Template variables</h3><p>Webstorm give you the option of declaring template variables. Use these variables to <strong>customize certain part of your template</strong>. In our example, we want to make the name of the module and the name of the function editable when using the template.</p>
<p>Declare template variables by starting and ending your variable name with a dollar sign: <code>$&lt;variable name&gt;$</code>.</p>
<p><u>Here is our improved template:</u></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $MODULE$ = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">$METHOD$</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    $METHOD$ : $METHOD$</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>If you try your live template again, you will get a wizard like prompt to enter the name of the module and method.</p>
<h3 id="Cursor_position">Cursor position</h3><p>After template insertion, the cursor position will be at the end of the code snippet. We would like it to be in our method, so we can start editing it.</p>
<p>You can do this by adding a special <code>$END$</code> variable in our template:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $MODULE$ = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">$METHOD$</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    $END$</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    $METHOD$ : $METHOD$</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>Try it again and notice the cursor position at the end.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This article will show you how to create code snippets, also known as <a href="https://www.jetbrains.com/webstorm/help/live-templates-2.html">live templates</a>, in WebStorm. We will create a JavaScript <a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript">Revealing Module Pattern</a> live template.</p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
      <category term="WebStorm" scheme="http://klugjo.github.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Loops and callbacks in React]]></title>
    <link href="http://klugjo.github.io/2015/12/Loops-and-callbacks-in-React/"/>
    <id>http://klugjo.github.io/2015/12/Loops-and-callbacks-in-React/</id>
    <published>2015-12-29T02:02:29.000Z</published>
    <updated>2015-12-29T04:32:17.000Z</updated>
    <content type="html"><![CDATA[<p>In this article we will see how to iterate through a collection to render a list of elements in React. We will also have a look at how to fire callback from the children elements.</p>
<a id="more"></a> 
<p><br></p>
<h2 id="The_Example">The Example</h2><p>We will build a dynamic list of buttons with an ‘Add’ button to add a button to the list. A click on any of these buttons will log the position of the button in the list. <a href="https://output.jsbin.com/rakuya" target="_blank" rel="external">Demo Here <i class="ic external-link"></i></a>. </p>
<p><br></p>
<h2 id="Rendering_the_List_of_Buttons">Rendering the List of Buttons</h2><p>To create a list of elements using a for loop in React, create an empty array and push React elements directly into it. Then Render it like any other element:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> buttonListElements = [], <span class="comment">// Empty Array</span></span><br><span class="line">    n = <span class="number">5</span>,</span><br><span class="line">    i;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// For each element, push a React element into the array</span></span><br><span class="line">    buttonListElements.push(</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">li</span> <span class="attribute">key</span>=<span class="value">&#123;i&#125;</span>&gt;</span><span class="tag">&lt;<span class="title">button</span>&gt;</span>&#123;i&#125;<span class="tag">&lt;/<span class="title">button</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    )</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Then render the array using curly braces</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">       &#123;buttonListElements&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  )</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Although it won’t be of any use in our app, React requires you to render a <code>key</code> attribute with unique values. If you don’t do so, you will receive warnings in the JS console.</p>
<p><br></p>
<h2 id="Adding_an_onclick_callback_for_each_button">Adding an <em>onclick</em> callback for each button</h2><p>Let’s start with the function that will log the button index:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onChildButtonClick: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Then add the callback to each child button element by modifying the <code>render</code> function above:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.state.buttonNumber; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">  buttonListElements.push(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="title">li</span> <span class="attribute">key</span>=<span class="value">&#123;i&#125;</span>&gt;</span><span class="tag">&lt;<span class="title">button</span> <span class="attribute">onClick</span>=<span class="value">&#123;this.onChildButtonClick.bind(null,</span> <span class="attribute">i</span>)&#125;&gt;</span>&#123;i&#125;<span class="tag">&lt;/<span class="title">button</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  )</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>To pass our current <code>i</code> value to each callback, use <code>.bind(null, i)</code>. The <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind" target="_blank" rel="external">function.prototype.bind()</a> function will create a new function with a global context (<em>null</em> used as context) and the current value of <code>i</code> as the first argument (our <code>val</code> parameter in the <code>onChildButtonClick</code> function).</p>
<p><br></p>
<h2 id="Dynamically_add_elements_to_the_list">Dynamically add elements to the list</h2><p>Let’s start by abstracting the number of elements value in the state:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;buttonNumber: <span class="number">5</span>&#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>Follows the ‘Add’ button click callback:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onButtonClick: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newButtonNumber = <span class="keyword">this</span>.state.buttonNumber + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;buttonNumber: newButtonNumber&#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>Add the button element to our render method</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">   &#123;buttonListElements&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">onClick</span>=<span class="value">&#123;this.onButtonClick&#125;</span>&gt;</span>Add<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>And replace the <code>n</code> with <code>this.state.buttonNumber</code> in the for loop:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.state.buttonNumber; i = i + <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>This is it. Check out the demo here: <a href="https://jsbin.com/rakuya/edit?html,output" target="_blank" rel="external">https://jsbin.com/rakuya/edit?html,output</a></p>
<p><br></p>
<h2 id="A_cleaner_way_of_handling_loops">A cleaner way of handling loops</h2><p>The example above is for explanation purposes. In production code, I would recommend the use of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="external">Array.prototype.map()</a>.</p>
<p>Like so:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buttonListElements = [],</span><br><span class="line">  data = [&#123;index: <span class="number">0</span>, text: <span class="string">'Jane'</span>&#125;, &#123;index: <span class="number">1</span>, text: <span class="string">'John'</span>&#125;, &#123;index: <span class="number">2</span>, text: <span class="string">'Marcy'</span>&#125;,];</span><br><span class="line"></span><br><span class="line">data.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  buttonListElements.push(</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">li</span> <span class="attribute">key</span>=<span class="value">&#123;item.index&#125;</span>&gt;</span><span class="tag">&lt;<span class="title">button</span> <span class="attribute">onClick</span>=<span class="value">&#123;this.onChildButtonClick.bind(null,</span> <span class="attribute">item.index</span>)&#125;&gt;</span>&#123;item.text&#125;<span class="tag">&lt;/<span class="title">button</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  )</span>;</span><br><span class="line">&#125;, <span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>With this method, you can pass an array of objects and elegantly access the children properties.</li>
<li>Do not forget to pass the context (<code>this</code>) as a second argument in <code>arr.map(callback[, thisArg])</code>. Otherwise you won’t be able to access the child click callback function (<code>this.onChildButtonClick</code>).</li>
</ul>
<p>Thanks for reading !</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>In this article we will see how to iterate through a collection to render a list of elements in React. We will also have a look at how to fire callback from the children elements.</p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
      <category term="React" scheme="http://klugjo.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Easy dynamic classes with React]]></title>
    <link href="http://klugjo.github.io/2015/12/Easy-dynamic-classes-with-React/"/>
    <id>http://klugjo.github.io/2015/12/Easy-dynamic-classes-with-React/</id>
    <published>2015-12-28T07:16:03.000Z</published>
    <updated>2015-12-28T09:23:32.000Z</updated>
    <content type="html"><![CDATA[<p>In this article we will see how to generate dynamic classes for React without resorting to obnoxious string manipulations.</p>
<p>We will build a simple app that changes the <code>color</code> and <code>font-style</code> of a div based on a textbox value.</p>
<a id="more"></a> 
<p><br></p>
<h2 id="The_rules">The rules</h2><h3 id="The_text_in_our_div_should_be:">The text in our div should be:</h3><ul>
<li><span style="color: red;">Red</span> when the value is negative</li>
<li><span style="color: blue;">Blue</span> when the value is positive</li>
<li><span style="font-style: italic;">Italic</span> when the value is even</li>
<li><span style="font-style: normal;">Normal</span> when the value is odd</li>
</ul>
<h3 id="Corresponding_css_classes:">Corresponding css classes:</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.blue</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">color</span>:<span class="value"> blue</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.red</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">color</span>:<span class="value"> red</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.italic</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">font-style</span>:<span class="value"> italic</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.normal</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">font-style</span>:<span class="value"> normal</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="The_magic">The magic</h2><p>React now uses the <a href="https://github.com/JedWatson/classnames" target="_blank" rel="external">classNames</a> library to join and manage class names.</p>
<p>You can <a href="https://github.com/JedWatson/classnames#classnames" target="_blank" rel="external">install it with npm or bower</a>.</p>
<p>The <code>classNames</code> library allows you to <strong>declare your classes as a string, an array or an object</strong>. The 3 following declarations are equivalent:</p>
<h3 id="String">String</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elementClass = className(<span class="string">'red italic'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Array">Array</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elementClass = className([<span class="string">'red'</span>, <span class="string">'italic'</span>]);</span><br></pre></td></tr></table></figure>
<h3 id="Object">Object</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elementClass = className(&#123;</span><br><span class="line">    red: <span class="literal">true</span>, <span class="comment">// use true or any truthy value / expression</span></span><br><span class="line">    italic: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Note:"><u>Note:</u></h3><p>You can even use a <a href="https://github.com/JedWatson/classnames#usage-with-reactjs" target="_blank" rel="external">mix of all three</a> as separate parameters:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elementClass = className(<span class="string">"class1 class2"</span>, <span class="comment">// String</span></span><br><span class="line">  [<span class="string">'class3'</span>, <span class="string">'class4'</span>], <span class="comment">// Array</span></span><br><span class="line">  &#123;class5: <span class="literal">true</span>&#125;); <span class="comment">// Object</span></span><br></pre></td></tr></table></figure>
<p>It will <strong>add all 5 classes</strong> to the element.</p>
<p><br></p>
<h2 id="The_example">The example</h2><h3 id="Rendering_the_elements">Rendering the elements</h3><p>Let’s start with the render function. We will need a div with some text and a text input:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;this.state.textClass&#125;</span>&gt;</span>RESULT<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">value</span>=<span class="value">"Hello!"</span> <span class="attribute">value</span>=<span class="value">&#123;this.state.value&#125;</span> <span class="attribute">onChange</span>=<span class="value">&#123;this.handleChange&#125;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  )</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>this.state.value</code>: will hold the number we are going to check</li>
<li><code>this.state.textClass</code>: will hold our classes generated with <strong>className</strong></li>
<li><code>this.handleChange</code>: will regenerate the classes when the textbox value changes</li>
</ul>
<h3 id="Generating_our_css_classes">Generating our css classes</h3><p>We can now create our class generation function based on the example defined above:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">computeClass: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> classNames(&#123;</span><br><span class="line">    blue: val &gt; <span class="number">0</span>, <span class="comment">// positive -&gt; blue</span></span><br><span class="line">    red: val &lt; <span class="number">0</span>, <span class="comment">// negative -&gt; red</span></span><br><span class="line">    italic: val % <span class="number">2</span> === <span class="number">0</span>, <span class="comment">// even -&gt; italic</span></span><br><span class="line">    normal: <span class="built_in">Math</span>.abs(val % <span class="number">2</span>) === <span class="number">1</span> <span class="comment">// odd -&gt; normal</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Consider always using this method in your applications. Conditional blocks used to generate strings are a hell to read and maintain ;)</p>
<h3 id="Full_React_code">Full React code</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Main = React.createClass(&#123;</span><br><span class="line">  getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        value: <span class="number">0</span>,</span><br><span class="line">        textClass: <span class="keyword">this</span>.computeClass(<span class="number">0</span>)</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  computeClass: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> classNames(&#123;</span><br><span class="line">      blue: val &gt; <span class="number">0</span>,</span><br><span class="line">      red: val &lt; <span class="number">0</span>,</span><br><span class="line">      italic: val % <span class="number">2</span> === <span class="number">0</span>,</span><br><span class="line">      normal: <span class="built_in">Math</span>.abs(val % <span class="number">2</span>) === <span class="number">1</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  handleChange: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> val = <span class="built_in">isNaN</span>(event.target.value) ? <span class="number">0</span> : event.target.value,</span><br><span class="line">      textClass = <span class="keyword">this</span>.computeClass(val);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;value: val, textClass: textClass&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;this.state.textClass&#125;</span>&gt;</span>RESULT<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">value</span>=<span class="value">"Hello!"</span> <span class="attribute">value</span>=<span class="value">&#123;this.state.value&#125;</span> <span class="attribute">onChange</span>=<span class="value">&#123;this.handleChange&#125;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    )</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="title">Main</span> /&gt;</span>, document.getElementById("main"));</span></span><br></pre></td></tr></table></figure>
<p>Or check it live here: <a href="https://jsbin.com/kijica/edit?html,output" target="_blank" rel="external">https://jsbin.com/kijica/edit?html,output</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>In this article we will see how to generate dynamic classes for React without resorting to obnoxious string manipulations.</p>
<p>We will build a simple app that changes the <code>color</code> and <code>font-style</code> of a div based on a textbox value.</p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
      <category term="React" scheme="http://klugjo.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Passing arguments to the underlying command in npm scripts]]></title>
    <link href="http://klugjo.github.io/2015/12/Passing-arguments-to-the-underlying-command-in-npm-scripts/"/>
    <id>http://klugjo.github.io/2015/12/Passing-arguments-to-the-underlying-command-in-npm-scripts/</id>
    <published>2015-12-24T01:26:41.000Z</published>
    <updated>2015-12-24T02:13:32.000Z</updated>
    <content type="html"><![CDATA[<p>In this tutorial we will see how to pass arguments to a command when combining <a href="/2015/12/Run-scripts-with-npm/" target="_blank">npm scripts</a>.</p>
<a id="more"></a> 
<p><br></p>
<h2 id="Project_setup">Project setup</h2><p>Let’s assume we have the current script defined in our npm scripts:</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"stylus"</span>: <span class="string">"stylus src/stylus/site.styl --out dist/"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="Watching_for_changes">Watching for changes</h2><p>Now let’s say we want to create a new task that will not only compile our stylus files to css but also watch for changes and recompile when necessary.</p>
<p>Using the command line this can be done with the <code>-w</code> flag:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stylus src/stylus/site<span class="class">.styl</span> -w</span><br></pre></td></tr></table></figure>
<p>We now want to create a new script that watches for stylus changes. We can do:</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"stylus"</span>: <span class="string">"stylus src/stylus/site.styl --out dist/"</span>,</span><br><span class="line">    <span class="string">"watch:stylus"</span>: <span class="string">"stylus src/stylus/site.styl --out dist/ -w"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>See anything ugly ?</p>
<p><br></p>
<h2 id="Reusing_existing_code">Reusing existing code</h2><p>In order to avoid duplicated code, we want to reuse our first command and add the <code>-w</code> flag.</p>
<p>The general syntax is</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="command">run</span> [command] [<span class="comment">-- &lt;args&gt;]</span></span><br></pre></td></tr></table></figure>
<p>With our example it would be:</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"stylus"</span>: <span class="string">"stylus src/stylus/site.styl --out dist/"</span>,</span><br><span class="line">    <span class="string">"watch:stylus"</span>: <span class="string">"npm run stylus -- -w"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>Note the <code>--</code> in between the initial command and the additional arguments.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>In this tutorial we will see how to pass arguments to a command when combining <a href="/2015/12/Run-scripts-with-npm/" target="_blank">npm scripts</a>.</p>]]>
    
    </summary>
    
      <category term="Node" scheme="http://klugjo.github.io/tags/Node/"/>
    
      <category term="npm" scheme="http://klugjo.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Build your first React application]]></title>
    <link href="http://klugjo.github.io/2015/12/Build-your-first-React-application/"/>
    <id>http://klugjo.github.io/2015/12/Build-your-first-React-application/</id>
    <published>2015-12-22T06:44:36.000Z</published>
    <updated>2015-12-23T08:41:46.000Z</updated>
    <content type="html"><![CDATA[<p>This tutorial will walk you through developing your first app with React.<br><a id="more"></a><br><br></p>
<h2 id="1)_Installation">1) Installation</h2><p>This is the app we are going to build. Two buttons that change the case of a text. Pretty simple but good enough to look at a few of React’s basic syntax.</p>
<p><br></p>
<p><hr style="border: 0;height: 1px;background-image: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.75), rgba(0, 0, 0, 0));"></p>
<p><div style="margin-top: 7px; margin-bottom: 15px; text-align:center; width: 100%; padding-bottom: 15px"><br>  <div id="react-tutorial-1-text" style="color:#666666; font-size:20px">Hello from React</div><br>  <button onmouseover="this.style.background = '#f9f9f9'" onmouseout="this.style.background = '#f4f4f4'" style="border-radius:6px; border:1px solid #dcdcdc; color:#666666; background: #f4f4f4; font-size:15px; padding:6px 24px; text-decoration:none; text-shadow:0px 1px 0px #ffffff; margin: 7px; outline: none; cursor: pointer;" onclick="document.getElementById('react-tutorial-1-text').style['text-transform'] = 'lowercase';">Lowercase</button><button onmouseover="this.style.background = '#f9f9f9'" onmouseout="this.style.background = '#f4f4f4'" style="border-radius:6px; border:1px solid #dcdcdc; color:#666666; background: #f4f4f4; font-size:15px; padding:6px 24px; text-decoration:none; text-shadow:0px 1px 0px #ffffff; margin: 7px; outline: none; cursor: pointer;" onclick="document.getElementById('react-tutorial-1-text').style['text-transform'] = 'uppercase';">Uppercase</button><br></div></p>
<p><hr style="border: 0;height: 1px;background-image: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.75), rgba(0, 0, 0, 0));"><br><br><br>Let’s get started by creating a simple HTML document and include the <a href="https://facebook.github.io/react/downloads.html" target="_blank" rel="external">React libraries</a>. You will also need to include a script tag and create div with <code>id=&quot;main&quot;</code> in the the document body.</p>
<p>Make sure you are using the <a href="https://facebook.github.io/react/downloads.html" target="_blank" rel="external">latest version of React</a>. At the time of writing, this is what I have in my index.html:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://fb.me/react-0.14.3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://fb.me/react-dom-0.14.3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"main"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/babel"</span>&gt;</span><span class="1c"></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// Your react code goes here</span></span><br><span class="line">      </span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><u>Note:</u> It is <s>possible</s> <strong>recommended</strong> to use React with a CommonJS module system like browserify or webpack and to <a href="https://facebook.github.io/react/docs/getting-started.html" target="_blank" rel="external">install it with npm</a>.</p>
<p><br></p>
<h2 id="2)_First_component_using_React’s_JSX_syntax">2) First component using React’s JSX syntax</h2><p>React uses a specific syntax, called <a href="https://facebook.github.io/react/docs/jsx-in-depth.html" target="_blank" rel="external">JSX</a>. JSX is a JavaScript syntax extension that looks similar to XML. In your JSX files, you can use any JavaScript you want, but you can also include pieces of HTML/XML without quotes.</p>
<p>(The <a href="https://babeljs.io/" target="_blank" rel="external">babel-core</a> library we have included, allows in browser JSX transformation and the use of <code>&lt;script type=&quot;text/babel&quot;&gt;</code> tags.)</p>
<p>Let’s create a button component on our page with React:</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var UppercaseButton = React.createClass<span class="params">(&#123;</span><br><span class="line">  render: function<span class="params">()</span> &#123;</span><br><span class="line">    return <span class="params">(</span><br><span class="line">      &lt;button&gt;Uppercase&lt;/button&gt;</span><br><span class="line">    )</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.<span class="built_in">render</span><span class="params">(&lt;UppercaseButton /&gt;, document.getElementById<span class="params">(<span class="string">"main"</span>)</span>)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>Use <code>React.createClass()</code> to declare new components.</li>
<li>A React Class should have a <code>render</code> function that returns the element’s HTML. Careful to use <code>return(&lt;HtmlTag /&gt;)</code> and not <code>return{&lt;HtmlTag /&gt;}</code>.</li>
<li>ReactDOM.render() is our app’s main entry point and renders our components. The first argument is the <code>&lt;ReactTag /&gt;</code> that we declared with <code>createClass()</code> and the second is the HTML element that will contain the rendered React component.</li>
<li>React classes should always start with an Capital letter.</li>
</ul>
<p>Check out the code here: <a href="https://jsbin.com/xakiza/edit?html,output" target="_blank" rel="external">https://jsbin.com/xakiza/edit?html,output</a></p>
<p><br></p>
<h2 id="3)_Passing_arguments_to_a_React_component">3) Passing arguments to a React component</h2><p>It is possible to pass arguments to components using components properties.</p>
<p>Change your React code to:</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> UppercaseButton = React.createClass(&#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button&gt;&#123;<span class="keyword">this</span>.props.text&#125;&lt;/button&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;UppercaseButton text=&#123;<span class="string">"Uppercase"</span>&#125; /&gt;, document.getElementById(<span class="string">"main"</span>));</span><br></pre></td></tr></table></figure>
<ul>
<li>Pass an argument by adding a property like you would in HTML. In this example, we added the <code>text={&quot;Uppercase&quot;}</code> property.</li>
<li>Use curly brackets when interpolating JavaScript expressions in your JSX templates.</li>
<li>In the component definition, use <code>this.props.propertyName</code> to access the value passed to that component.</li>
</ul>
<p>Check out the code here: <a href="https://jsbin.com/qakaka/edit?html,output" target="_blank" rel="external">https://jsbin.com/qakaka/edit?html,output</a></p>
<p><br></p>
<h2 id="4)_Composing_components_and_managing_state">4) Composing components and managing state</h2><p>We are now going to create a <code>&lt;Main /&gt;</code> component to hold our button and text. This component will hold our application’s state.</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> UppercaseButton = React.createClass(&#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button onClick=&#123;<span class="keyword">this</span>.props.onButtonClick&#125;&gt;Uppercase&lt;/button&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> HelloText = React.createClass(&#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div style=&#123;<span class="keyword">this</span>.props.textStyle&#125;&gt;Hello from React&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Main = React.createClass(&#123;</span><br><span class="line">  getInitialState: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;textStyle: &#123;</span><br><span class="line">      textTransform: <span class="string">'none'</span></span><br><span class="line">    &#125;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  clickHandler: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;textStyle: &#123;</span><br><span class="line">      textTransform: <span class="string">'uppercase'</span></span><br><span class="line">    &#125;&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;HelloText textStyle=&#123;<span class="keyword">this</span>.state.textStyle&#125; /&gt;</span><br><span class="line">        &lt;UppercaseButton onButtonClick=&#123;<span class="keyword">this</span>.clickHandler&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Main /&gt;, document.getElementById(<span class="string">"main"</span>));</span><br></pre></td></tr></table></figure>
<p>Our code is getting larger, here are the main things to pay attention to:</p>
<ul>
<li>We now have 3 components (Main, UppercaseButton and HelloText). Main holds UppercaseButton and HelloText.</li>
<li><code>getInitialState()</code> is a special React function that will be called once when a component is initialized. Make use of it to return the initial state object.</li>
<li>The component state can be access with <code>this.state</code>.</li>
<li>The component state can be modified using <code>this.setState(newState)</code>.</li>
<li>To set a inline style using the JSX syntax, use <code>style={JavascriptStyleObject}</code>. More info in the <a href="https://facebook.github.io/react/tips/inline-styles.html" target="_blank" rel="external">React inline style documentation</a>. In our example, to set the text to uppercase: style=&lbrace;&lbrace;textTransform: ‘none’&rbrace;&rbrace;</li>
</ul>
<p>Check out the code and play around here: <a href="https://jsbin.com/beheve/edit?html,output" target="_blank" rel="external">https://jsbin.com/beheve/edit?html,output</a></p>
<p><br></p>
<h2 id="5)_Finishing_the_application_and_taking_of_advantage_of_React_modular_approach">5) Finishing the application and taking of advantage of React modular approach</h2><p>Let’s now add our second button by creating a generic button.</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> TextTransformButton = React.createClass(&#123;</span><br><span class="line">  onButtonClick: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.props.onButtonClick(<span class="keyword">this</span>.props.transform);</span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button onClick=&#123;<span class="keyword">this</span>.onButtonClick&#125;&gt;&#123;<span class="keyword">this</span>.props.transform&#125;&lt;/button&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> HelloText = React.createClass(&#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div style=&#123;<span class="keyword">this</span>.props.textStyle&#125;&gt;Hello from React&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Main = React.createClass(&#123;</span><br><span class="line">  getInitialState: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;textStyle: &#123;</span><br><span class="line">      textTransform: <span class="string">'none'</span></span><br><span class="line">    &#125;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  clickHandler: <span class="function"><span class="keyword">function</span> <span class="params">(newCase)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;textStyle: &#123;</span><br><span class="line">      textTransform: newCase</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;HelloText textStyle=&#123;<span class="keyword">this</span>.state.textStyle&#125; /&gt;</span><br><span class="line">        &lt;TextTransformButton onButtonClick=&#123;<span class="keyword">this</span>.clickHandler&#125; transform=&#123;<span class="string">"lowercase"</span>&#125; /&gt;</span><br><span class="line">        &lt;TextTransformButton onButtonClick=&#123;<span class="keyword">this</span>.clickHandler&#125; transform=&#123;<span class="string">"uppercase"</span>&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Main /&gt;, document.getElementById(<span class="string">"main"</span>));</span><br></pre></td></tr></table></figure>
<ul>
<li>The <code>clickHandler</code> function is now generic. </li>
<li>The child components (buttons here) will decide what to send to the <code>clickHandler</code>.</li>
</ul>
<p>Check out the final code here: <a href="https://jsbin.com/bidafa/edit?html,output" target="_blank" rel="external">https://jsbin.com/bidafa/edit?html,output</a></p>
<p>Hopefully this quick first look at React will help you get started and get an idea of the framework’s potential.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This tutorial will walk you through developing your first app with React.<br>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
      <category term="React" scheme="http://klugjo.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Bundle jade templates with browserify transform]]></title>
    <link href="http://klugjo.github.io/2015/12/Bundle-jade-templates-with-browserify-transform/"/>
    <id>http://klugjo.github.io/2015/12/Bundle-jade-templates-with-browserify-transform/</id>
    <published>2015-12-18T02:03:38.000Z</published>
    <updated>2015-12-18T04:06:35.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/substack/node-browserify/wiki/list-of-transforms" target="_blank" rel="external">Browserify transforms</a> can be used to load non Javascript files using the <a href="http://requirejs.org/docs/commonjs.html" target="_blank" rel="external">Common JS</a> syntax. You could for example load <a href="https://github.com/jnordberg/coffeeify" target="_blank" rel="external">CoffeeScript</a>, <a href="https://github.com/guzart/browserify-typescriptifier" target="_blank" rel="external">TypeScript</a> or <a href="https://github.com/babel/babelify" target="_blank" rel="external">compile ES6 to ES5</a> when packaging your JavaScript.</p>
<p>In this example we will look at how to require a jade template directly inside our JS code and have browserify bundle everything up nicely.</p>
<a id="more"></a> 
<p><br></p>
<h2 id="1)_Project_setup">1) Project setup</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|-- dist // Build will end up here</span><br><span class="line">|-- src // All source code <span class="keyword">is</span> <span class="keyword">inside</span> this folder</span><br><span class="line">    |-- templates</span><br><span class="line">        |-- quote.jade // Our jade template</span><br><span class="line">    |-- js</span><br><span class="line">        |-- index.js // Our main JavaScript file</span><br><span class="line">|-- package.json</span><br></pre></td></tr></table></figure>
<p>We have an <code>index.js</code> file in which we will require and render our jade template.</p>
<p><br></p>
<h2 id="2)_Jade_template">2) Jade template</h2><p>Let’s start by setting up a simple <code>quote.jade</code> <a href="http://jade-lang.com/" target="_blank" rel="external">Jade template</a>.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h3 #&#123;quote&#125;&#10;span - #&#123;author&#125;</span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="3)_Javascript">3) Javascript</h2><p>We are now ready to include our template in our Javascript. Require your jade template the same way as you would for a JS file but <strong>add the file extension</strong>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Require our jade template as we would require a Js file</span></span><br><span class="line"><span class="keyword">var</span> quoteTemplate = <span class="built_in">require</span>(<span class="string">'../templates/quote.jade'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Render the template</span></span><br><span class="line"><span class="keyword">var</span> output = quoteTemplate(&#123;</span><br><span class="line">    quote: <span class="string">"Be yourself; everyone else is already taken."</span>,</span><br><span class="line">    author: <span class="string">"Oscar Wilde"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(output);</span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="4)_Bundle_up">4) Bundle up</h2><h3 id="Let’s_start_by_installing_everything_we_need:">Let’s start by installing everything we need:</h3><ul>
<li><p><a href="/2015/11/Your-first-10-minutes-with-Browserify/" target="_blank">Install browserify globally</a></p>
</li>
<li><p>Install <a href="https://github.com/domenic/jadeify" target="_blank" rel="external">jadeify</a>, our jade browserify transform: </p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> jadeify <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>You will also need to install jade locally even if you already have it installed globally. This is because browserify needs to access some of the jade code to include it in the output file.</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> jade <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure>
<h3 id="We_are_now_ready_to_create_our_package:">We are now ready to create our package:</h3><p>To specify a transform when launching browserify, use <code>-transform</code> or <code>-t</code> followed by the plugin name.</p>
<p>So in our case:</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">browserify </span>-t jadeify <span class="string">"src/js/index.js"</span> -o <span class="string">"dist/bundle.js"</span></span><br></pre></td></tr></table></figure>
<p>Your code is all packaged in one Js file. Include the bundle.js file in a simple HTML page and check the console. You should see:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">h3</span>&gt;</span> Be yourself; everyone else is already taken.<span class="tag">&lt;/<span class="title">h3</span>&gt;</span><span class="tag">&lt;<span class="title">span</span>&gt;</span>- Oscar Wilde<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Have fun with browserify transforms !</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://github.com/substack/node-browserify/wiki/list-of-transforms">Browserify transforms</a> can be used to load non Javascript files using the <a href="http://requirejs.org/docs/commonjs.html">Common JS</a> syntax. You could for example load <a href="https://github.com/jnordberg/coffeeify">CoffeeScript</a>, <a href="https://github.com/guzart/browserify-typescriptifier">TypeScript</a> or <a href="https://github.com/babel/babelify">compile ES6 to ES5</a> when packaging your JavaScript.</p>
<p>In this example we will look at how to require a jade template directly inside our JS code and have browserify bundle everything up nicely.</p>]]>
    
    </summary>
    
      <category term="Browserify" scheme="http://klugjo.github.io/tags/Browserify/"/>
    
      <category term="Jade" scheme="http://klugjo.github.io/tags/Jade/"/>
    
      <category term="Node" scheme="http://klugjo.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo deploy your blog to github pages in one command]]></title>
    <link href="http://klugjo.github.io/2015/12/Hexo-deploy-your-blog-to-github-pages-in-one-command/"/>
    <id>http://klugjo.github.io/2015/12/Hexo-deploy-your-blog-to-github-pages-in-one-command/</id>
    <published>2015-12-17T08:12:33.000Z</published>
    <updated>2015-12-17T09:19:40.000Z</updated>
    <content type="html"><![CDATA[<p>Hexo allows you to deploy your blog to github pages or any other git repository pretty much out of the box.</p>
<p>Your hexo can be hosted for free on <a href="https://pages.github.com/" target="_blank" rel="external">github pages</a> but this tutorial would also work for any other git hosting site.</p>
<a id="more"></a> 
<p><br></p>
<h2 id="Hexo-deployer-git">Hexo-deployer-git</h2><p>There is a <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="external">plugin developed by the hexo team</a> that will help do just that, deploy to git in one command.</p>
<p><br></p>
<h3 id="1)_Installation">1) Installation</h3><p>While at the root of your hexo project:</p>
<p><code>npm install hexo-deployer-git --save</code></p>
<p><br></p>
<h3 id="2)_Configuration">2) Configuration</h3><p>Open your <code>_config.yml</code> and edit the Deployment section:</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: <span class="attribute">https</span>:<span class="comment">//github.com/username/your-blog-url.github.io</span></span><br></pre></td></tr></table></figure>
<p>Use your blog github repo URL in the repo property</p>
<p><br></p>
<h3 id="3)_Deploy_!">3) Deploy !</h3><p>Run <code>hexo deploy</code> and your blog is online. Easy, wasn’t it ?</p>
<p><br></p>
<h2 id="Remarks">Remarks</h2><p><br></p>
<h3 id="You_need_to_generate_your_site_first">You need to generate your site first</h3><p><code>hexo deploy</code> will not generate your pages, you need to launch <code>hexo generate</code> first.</p>
<p>If you want an easy way to do both at the same time, you could <a href="/2015/12/Run-scripts-with-npm/" target="_blank">create an npm script</a> to do this:</p>
<p>In your package.json add</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"deploy"</span>: <span class="string">"hexo generate &amp;&amp; hexo deploy"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>then run <code>npm run deploy</code> to first generate and then deploy your blog.</p>
<p><br></p>
<h3 id="You_can_add_several_repos_if_you_want_to_push_your_blog_to_several_places">You can add several repos if you want to push your blog to several places</h3><p>Just duplicated the <code>repo:</code> line:</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: <span class="attribute">https</span>:<span class="comment">//github.com/username/your-blog-url.github.io</span></span><br><span class="line">  <span class="attribute">repo</span>: <span class="attribute">https</span>:<span class="comment">//github.com/username/your-second-blog-url.github.io</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<h3 id="You_can_personalize_the_git_commit_message">You can personalize the git commit message</h3><p>By default the message will be: Site updated: &lbrace;&lbrace; now(“YYYY-MM-DD HH:mm:ss”) &lbrace;&lbrace;</p>
<p>You can add a message property if you want to use your own:</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: <span class="attribute">https</span>:<span class="comment">//github.com/username/your-blog-url.github.io</span></span><br><span class="line">  <span class="attribute">message</span>: New post added</span><br></pre></td></tr></table></figure>
<p>You can use <a href="http://paularmstrong.github.io/swig/" target="_blank" rel="external">SWIG</a> templates in the message although I am not sure how that would help. The <code>now</code> method in the default message is a custom swig helper as you can see in the <a href="https://github.com/hexojs/hexo-deployer-git/blob/master/lib/deployer.js#L10-L14" target="_blank" rel="external">source</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Hexo allows you to deploy your blog to github pages or any other git repository pretty much out of the box.</p>
<p>Your hexo can be hosted for free on <a href="https://pages.github.com/">github pages</a> but this tutorial would also work for any other git hosting site.</p>]]>
    
    </summary>
    
      <category term="GitHub" scheme="http://klugjo.github.io/tags/GitHub/"/>
    
      <category term="Hexo" scheme="http://klugjo.github.io/tags/Hexo/"/>
    
      <category term="Node" scheme="http://klugjo.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Read-Only properties in JavaScript]]></title>
    <link href="http://klugjo.github.io/2015/12/Read-only-properties-in-JavaScript/"/>
    <id>http://klugjo.github.io/2015/12/Read-only-properties-in-JavaScript/</id>
    <published>2015-12-14T03:19:31.000Z</published>
    <updated>2015-12-14T08:02:13.000Z</updated>
    <content type="html"><![CDATA[<p>Let’s look at how we can make a JavaScript object property read-only using little-known built in functions.</p>
<p>JavaScript Object Literals are by dynamic by default. Given the following object:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> movieTicket</span> = &#123;</span><br><span class="line">  movie: <span class="string">"Mad Max"</span>,</span><br><span class="line">  hall: <span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<a id="more"></a> 
<p>It is possible to add, delete and modify properties after object creation:</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">movieTicket.price = <span class="string">'$10.00'</span>;</span><br><span class="line"><span class="keyword">delete</span> movieTicket.hall;</span><br><span class="line">movieTicket.movie = <span class="string">'The Rise And Rise Of Bitcoin'</span>;</span><br></pre></td></tr></table></figure>
<p>The <code>movieTicket</code> will then look like:</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attribute">movie</span>: <span class="string">'The Rise And Rise Of Bitcoin'</span>,</span><br><span class="line">  <span class="attribute">price</span>: <span class="string">'$10.00'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Make_a_property_read-only">Make a property read-only</h2><p>You can make a property read-only by using the <code>Object.defineProperty(obj, prop, descriptor)</code> static function. </p>
<p>Example:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> movieTicket = &#123;</span><br><span class="line">  movie: <span class="string">'Mad Max'</span>,</span><br><span class="line">  hall: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(movieTicket, <span class="string">'movie'</span>, &#123;</span><br><span class="line">  value: <span class="string">'Mad Max'</span>,</span><br><span class="line">  writable: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">movieTicket.movie = <span class="string">'Star Wars'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(movieTicket);</span><br></pre></td></tr></table></figure>
<p>will log <code>Object {movie: &quot;Mad Max&quot;, hall: 1}</code></p>
<h2 id="Notes:">Notes:</h2><h3 id="No_error_thrown_when_accessing_a_read-only_property">No error thrown when accessing a read-only property</h3><p>After using the Object.defineProperty method on the movie property, the movie property can not be changed. But <u>the system will not throw any error if you try to change its value</u>. This can be an issue as, in a larger system, if you forget that a property is read-only, this might create nearly impossible to find bugs.</p>
<p>One workaround for this issue is to use <code>&#39;use strict&#39;;</code>. If you do and try to modify a read-only property, the code will thrown an error:</p>
<p><code>Uncaught TypeError: Cannot assign to read only property &#39;movie&#39; of #&lt;Object&gt;</code></p>
<h3 id="The_property_can_still_be_deleted">The property can still be deleted</h3><p>If you make a property read-only using that method, you can still delete it using <code>delete movieTicket.movie</code>. If you re-add that property after that, the newly added property will <strong>not</strong> be read-only.</p>
<h3 id="Sub_properties_are_still_modifiable">Sub properties are still modifiable</h3><p>If your property points to an object, properties of that object are <strong>not</strong> read-only</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var movieTicket = &#123;</span><br><span class="line">  movie: &#123;</span><br><span class="line">    title: <span class="string">'Mad Max'</span>,</span><br><span class="line">    <span class="built_in">year</span>: <span class="number">2015</span></span><br><span class="line">  &#125;,</span><br><span class="line">  hall: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Object</span>.defineProperty(movieTicket, <span class="string">'movie'</span>, &#123;</span><br><span class="line">  value: &#123;</span><br><span class="line">    title: <span class="string">'Mad Max'</span>,</span><br><span class="line">    <span class="built_in">year</span>: <span class="number">2015</span></span><br><span class="line">  &#125;,</span><br><span class="line">  writable: <span class="keyword">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">movieTicket.movie.title = <span class="string">'Sicario'</span>;</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(movieTicket.movie.title); <span class="comment">// Returns: 'Sicario'</span></span><br></pre></td></tr></table></figure>
<p>In that example, only the pointer to the movie child object is made read-only.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Let’s look at how we can make a JavaScript object property read-only using little-known built in functions.</p>
<p>JavaScript Object Literals are by dynamic by default. Given the following object:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> movieTicket</span> = &#123;</span><br><span class="line">  movie: <span class="string">"Mad Max"</span>,</span><br><span class="line">  hall: <span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
      <category term="OOP" scheme="http://klugjo.github.io/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Requiring external libraries with Browserify]]></title>
    <link href="http://klugjo.github.io/2015/12/Requiring-external-libraries-with-Browserify/"/>
    <id>http://klugjo.github.io/2015/12/Requiring-external-libraries-with-Browserify/</id>
    <published>2015-12-11T05:34:28.000Z</published>
    <updated>2015-12-11T16:50:04.000Z</updated>
    <content type="html"><![CDATA[<p>This post will show you how to easily download and include 3rd party libraries in your Browserify bundle.</p>
<a id="more"></a> 
<p><br></p>
<h2 id="1)_Project_Structure">1) Project Structure</h2><p>Let’s start by assuming the following project structure</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">|-- dist // Build will end up here</span></span><br><span class="line"><span class="string">|-- src </span></span><br><span class="line">    <span class="string">|-- js</span></span><br><span class="line">        <span class="string">|-- main.js // Our main JavaScript file</span></span><br><span class="line">        <span class="string">|-- module.js // Local module</span></span><br><span class="line"><span class="string">|-- package.json</span></span><br></pre></td></tr></table></figure>
<p>We have our <code>main.js</code> file where we will require our local module (<code>module.js</code>) and our jQuery library</p>
<p><br></p>
<h2 id="2)_Requiring_the_jQuery_library">2) Requiring the jQuery library</h2><h3 id="Installing_jQuery">Installing jQuery</h3><p>One of the advantages of using Browserify is that you don’t have to use bower or download your dependencies manually. You can just install everything with npm.</p>
<p>To install jquery:</p>
<p><code>npm install jquery</code></p>
<h3 id="Requiring_jQuery">Requiring jQuery</h3><p>Since jQuery has been installed with npm, we can require it in our client code like we would do in Node: by simply using the name of the library.</p>
<p><code>var $ = require(&#39;jquery&#39;);</code></p>
<p>Browserify makes it easy to reuse server side libraries if you use node and to centralize all your JavaScript libraries in one place. Not to mention that npm is now a mature and solid packet manager.</p>
<p><br></p>
<h2 id="3)_Requiring_local_modules">3) Requiring local modules</h2><p>As a bonus here is the correct way to require local modules.</p>
<p>When requiring a local module, the path should always start with:</p>
<ul>
<li><code>./</code> representing the current directory</li>
<li><code>../</code> representing the parent directory</li>
</ul>
<p>In our project example, to require <code>module.js</code> in <code>main.js</code>, we have to use</p>
<p><code>var module = require(&#39;./module&#39;);</code></p>
<p>Happy bundling !</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This post will show you how to easily download and include 3rd party libraries in your Browserify bundle.</p>]]>
    
    </summary>
    
      <category term="Browserify" scheme="http://klugjo.github.io/tags/Browserify/"/>
    
      <category term="Node" scheme="http://klugjo.github.io/tags/Node/"/>
    
  </entry>
  
</feed>

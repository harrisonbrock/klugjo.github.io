<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Klughertz Jonathan]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://klugjo.github.io/"/>
  <updated>2016-01-11T09:36:14.000Z</updated>
  <id>http://klugjo.github.io/</id>
  
  <author>
    <name><![CDATA[Klughertz Jonathan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Code Bloat Commandos - Do not let your functions do more than one thing]]></title>
    <link href="http://klugjo.github.io/2016/01/Code-Bloat-Commandos-Do-not-let-your-functions-do-more-than-one-thing/"/>
    <id>http://klugjo.github.io/2016/01/Code-Bloat-Commandos-Do-not-let-your-functions-do-more-than-one-thing/</id>
    <published>2016-01-11T07:02:12.000Z</published>
    <updated>2016-01-11T09:36:14.000Z</updated>
    <content type="html"><![CDATA[<p><strong>Code Bloat Commandos</strong> looks at why software code deteriorates over time; and how to fight back.</p>
<p>In this episode, we will look at how a nice and clean method grows into a dumping ground function. We will see when it happens, how to spot it and how to fix it.</p>
<a id="more"></a>
<blockquote><p>FUNCTIONS SHOULD DO ONE THING. THEY SHOULD DO IT WELL. THEY SHOULD DO IT ONLY.</p>
<footer><strong>Uncle Bob</strong><cite><a href="https://books.google.com.sg/books/about/Clean_Code.html?id=dwSfGQAACAAJ" target="_blank" rel="external">Clean Code</a></cite></footer></blockquote>
<p><br></p>
<h2 id="The_humble_beginnings">The humble beginnings</h2><h3 id="Project_specification:">Project specification:</h3><ul>
<li>We have a live video player and an event function called <code>onProgress</code> that is executed every second.</li>
<li>We can use that function to monitor playback progress and hook up various actions.</li>
<li>Our job is to implement a function that will track video engagement by sending an analytics ping every 30 seconds.</li>
</ul>
<h3 id="This_is_our_code_(JavaScript):">This is our code (JavaScript):</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Main entry point. This function will be called every second by the player</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onProgress</span>(<span class="params">currentTime</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// [...] Do UI stuff here like update progress bar and set Time</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Our function</span></span><br><span class="line">    _sendVideoEngagementAnalytics(currentTime);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// [...] Do more things here like update the icons in the footer</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_sendVideoEngagementAnalytics</span>(<span class="params">currentTime</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Math</span>.abs(currentTime - __analyticsState.fromPosition) &gt; <span class="number">30</span>) &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">var</span> analyticsData = &#123;</span><br><span class="line">            event: <span class="string">"VIDEO_PROGRESS"</span></span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        analyticsManager.send(analyticsData);   </span><br><span class="line">        </span><br><span class="line">        __analyticsState.fromPosition = currentTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This is our first version of the <code>_sendVideoEngagementAnalytics</code> function. It is still reasonably simple and compact. It checks if more than 30 seconds have elapsed. If it did, it sends an analytics ping using an analytics manager object.</p>
<p><br></p>
<h2 id="A_few_weeks_later">A few weeks later</h2><p>Our first version of the app is working and a few weeks later we need to also check if the current content playing is an Advertisement; and if that is the case send an Advertisement Start and End pings.<br>We can check if the current content playing is an Ad by calling <code>isAdPlaying(currentTime)</code>.</p>
<p>Easy enough, letâ€™s get coding.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Main entry point. This function will be called every second by the player</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onProgress</span>(<span class="params">currentTime</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// [...] Do UI stuff here like update progress bar and set Time</span></span><br><span class="line">    </span><br><span class="line">    _sendVideoEngagementAnalytics(currentTime);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Do more things here like update the footer controls</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_sendVideoEngagementAnalytics</span>(<span class="params">currentTime</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> analyticsData,</span><br><span class="line">        adPlaying = isAdPlaying(currentTime);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Checks if more that 30 seconds have passed</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Math</span>.abs(currentTime - __analyticsState.fromPosition) &gt; <span class="number">30</span>) &#123;</span><br><span class="line">    </span><br><span class="line">        analyticsData = &#123;</span><br><span class="line">            event: <span class="string">"VIDEO_PROGRESS"</span></span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        analyticsManager.send(analyticsData);   </span><br><span class="line">        </span><br><span class="line">        __analyticsState.fromPosition = currentTime;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Checks if an Ad just started playing</span></span><br><span class="line">    <span class="keyword">if</span>(__analyticsState.adPlaying !== adPlaying) &#123;</span><br><span class="line">        </span><br><span class="line">        analyticsData = &#123;</span><br><span class="line">            event: adPlaying ? <span class="string">"AD_BEGIN"</span> : <span class="string">"AD_COMPLETE"</span></span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        analyticsManager.send(analyticsData);   </span><br><span class="line">        </span><br><span class="line">        __analyticsState.adPlaying = adPlaying;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Done. <code>git commit -m &quot;Added Ad tracking analytics to player&quot;</code>. Jump on Skype and ask who is ready for lunch.</p>
<p>This is (almost) what happened to me today.</p>
<p><br></p>
<h2 id="The_bloat">The bloat</h2><h3 id="The_code_is_not_that_bad,_we_have:">The code is not that bad, we have:</h3><ul>
<li>refactored <code>analyticsData</code> out of the initial if block because of <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/var#var_hoisting" target="_blank" rel="external">variable hoisting and scoping in JavaScript</a>.</li>
<li>created a local variable <code>adPlaying</code> to avoid multiple calls to <code>isAdPlaying(currentTime)</code>.</li>
</ul>
<p><br></p>
<h3 id="These_are_great,_but_we_have_committed_an_even_bigger_mistake_here:">These are great, but we have committed an even bigger mistake here:</h3><p><strong>The <code>_sendVideoEngagementAnalytics</code> is now doing 2 things</strong>; which is pretty bad in and of itself but also has the following scary consequences:</p>
<ul>
<li><strong>The name <code>_sendVideoEngagementAnalytics</code> is now incorrect</strong> (we are not only monitoring video engagement but ad playback as well). Someone reading <code>_sendVideoEngagementAnalytics(currentTime);</code> in the calling function might not suspect that it also sends Ad related analytics.</li>
<li><strong>The function is getting longer.</strong> And we are setting the stage for it to become even longer by starting off a series of if blocks that check playback position related stuff.</li>
<li>We suddenly feel like <strong>we need comments in our code to explain what it does</strong> and â€˜structureâ€™ the two parts of our function. Burp.</li>
</ul>
<p><br></p>
<h2 id="Pain_Relief">Pain Relief</h2><h3 id="Recognising_the_problem">Recognising the problem</h3><ul>
<li><p>It clicked for me when I realised <strong>the functionâ€™s name didnâ€™t correspond to what the function actually does.</strong></p>
</li>
<li><p>Another hint could have been the fact that the function now has <strong>two sections of code that handles different business requirements.</strong></p>
</li>
<li><p>A function that is <strong>30 lines long and needs comments for â€˜if conditionsâ€™</strong> that are pretty readable is not a good sign either.</p>
</li>
<li><p>But really, simply observing that the function I have modified suddenly <strong>does not respect the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" target="_blank" rel="external">Single Responsibility Principle</a></strong> should have been enough.</p>
</li>
</ul>
<p><br></p>
<h3 id="Administering_the_cure">Administering the cure</h3><p>At this point, the solution is pretty clear. Separating the ravioli.</p>
<p>Letâ€™s go ahead and split our function into two functions:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onProgress</span>(<span class="params">currentTime</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// [...] Do UI stuff here like update progress bar and set Time</span></span><br><span class="line">    </span><br><span class="line">    _sendVideoEngagementAnalytics(currentTime);</span><br><span class="line">    _sendAdContentAnalytics(currentTime);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Do more things here like update the footer controls</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_sendVideoEngagementAnalytics</span>(<span class="params">currentTime</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> analyticsData;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Math</span>.abs(currentTime - __analyticsState.fromPosition) &gt; <span class="number">30</span>) &#123;</span><br><span class="line">    </span><br><span class="line">        analyticsData = &#123;</span><br><span class="line">            event: <span class="string">"VIDEO_PROGRESS"</span></span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        analyticsManager.send(analyticsData);   </span><br><span class="line">        </span><br><span class="line">        __analyticsState.fromPosition = currentTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_sendAdContentAnalytics</span>(<span class="params">currentTime</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> analyticsData,</span><br><span class="line">        adPlaying = isAdPlaying(currentTime);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(__analyticsState.adPlaying !== adPlaying) &#123;</span><br><span class="line">        </span><br><span class="line">        analyticsData = &#123;</span><br><span class="line">            event: adPlaying ? <span class="string">"AD_BEGIN"</span> : <span class="string">"AD_COMPLETE"</span></span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        analyticsManager.send(analyticsData);   </span><br><span class="line">        </span><br><span class="line">        __analyticsState.adPlaying = adPlaying;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br></p>
<h3 id="Following_up_after_treatment">Following up after treatment</h3><ul>
<li>When reading<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_sendVideoEngagementAnalytics<span class="list">(<span class="keyword">currentTime</span>)</span><span class="comment">;</span></span><br><span class="line">_sendAdContentAnalytics<span class="list">(<span class="keyword">currentTime</span>)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>we know exactly what is going on. No extra â€˜hiddenâ€™ functionality.</p>
<ul>
<li><p>No more ugly comments</p>
</li>
<li><p>Shorter functions</p>
</li>
<li><p>If someone wants to add more analytics logic, they wonâ€™t be tempted to add to that function and worsen the problem. They will do the right thing right away by adding a new function.<br><br></p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>Code Bloat Commandos</strong> looks at why software code deteriorates over time; and how to fight back.</p>
<p>In this episode, we will look at how a nice and clean method grows into a dumping ground function. We will see when it happens, how to spot it and how to fix it.</p>]]>
    
    </summary>
    
      <category term="Single Responsibility Principle" scheme="http://klugjo.github.io/tags/Single-Responsibility-Principle/"/>
    
      <category term="Software Practices" scheme="http://klugjo.github.io/tags/Software-Practices/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Method context in JavaScript]]></title>
    <link href="http://klugjo.github.io/2016/01/Method-context-in-JavaScript/"/>
    <id>http://klugjo.github.io/2016/01/Method-context-in-JavaScript/</id>
    <published>2016-01-06T07:51:11.000Z</published>
    <updated>2016-01-06T09:01:38.000Z</updated>
    <content type="html"><![CDATA[<p>This article takes a closer look at what is called <strong>method context</strong> in JavaScript.</p>
<p>Method context refers to the way the <code>this</code> keyword behaves inside a function. It is different in JavaScript than in other languages. As we are going to demonstrate here, <strong>the value of <code>this</code> is determined by how and where a function is called.</strong></p>
<a id="more"></a> 
<p><br></p>
<h2 id="Function_defined_and_called_as_an_object_method">Function defined and called as an object method</h2><p>The simplest scenario is a <strong>function defined and called as an object method</strong>. In that case, <code>this</code> is set to the object the method is called on.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> defaultLogger = &#123;</span><br><span class="line">  loggerName: <span class="string">"Default"</span>,</span><br><span class="line">  log: <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"["</span> + <span class="keyword">this</span>.loggerName + <span class="string">"] "</span> + message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">defaultLogger.log(<span class="string">"example 1"</span>); <span class="comment">// logs "[Default] example 1"</span></span><br></pre></td></tr></table></figure>
<p>In the <code>log</code> function here, <code>this</code> corresponds to <code>defaultLogger</code>.</p>
<p><br></p>
<h2 id="Function_defined_in_the_global_scope">Function defined in the global scope</h2><p>By extension, if a function is defined in the global scope. <code>this</code> will be set to <code>window</code> (global object) when the code is executed in the browser.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Log function defined in the global scope</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"this "</span> + <span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">var</span> loggerName = <span class="keyword">this</span>.loggerName || <span class="string">"Default"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"["</span> + loggerName + <span class="string">"] "</span> + message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log(<span class="string">"example 2"</span>); <span class="comment">// Logs "this: [object Window]" then "[Default] example 2"</span></span><br></pre></td></tr></table></figure>
<p>Because the function is defined and executed in the global scope, in the <code>log</code> function here, <code>this</code> points to the global <code>window</code> object.</p>
<p><code>this.loggerName</code> is then undefined and the <code>&quot;Default&quot;</code> logger name is used instead.</p>
<p><br></p>
<h2 id="Function_defined_in_the_global_scope_and_used_as_an_object_method">Function defined in the global scope and used as an object method</h2><p>We can reuse the function defined above and use it in the context of an object. In that case, <code>this</code> will point to that object.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Log function defined externally</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"this: "</span> + <span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">var</span> loggerName = <span class="keyword">this</span>.loggerName || <span class="string">"Default"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"["</span> + loggerName + <span class="string">"] "</span> + message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using the log function in the context of an object</span></span><br><span class="line"><span class="keyword">var</span> databaseLogger = &#123;</span><br><span class="line">  loggerName: <span class="string">"Database"</span>,</span><br><span class="line">  log: log</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">databaseLogger.log(<span class="string">"example 3"</span>); <span class="comment">// Logs "this: [object Object]" then "[Database] example 3"</span></span><br></pre></td></tr></table></figure>
<p>Because we are calling the <code>log</code> function with the dot notation (<code>databaseLogger.log()</code>), the context is set to the object.</p>
<p>In conclusion, <strong>it does not matter where the function is defined; the context depends on which object the function is invoked from.</strong></p>
<p>Check out the code here: <a href="https://jsbin.com/ciqolu/edit?js,console" target="_blank" rel="external">https://jsbin.com/ciqolu/edit?js,console</a><br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This article takes a closer look at what is called <strong>method context</strong> in JavaScript.</p>
<p>Method context refers to the way the <code>this</code> keyword behaves inside a function. It is different in JavaScript than in other languages. As we are going to demonstrate here, <strong>the value of <code>this</code> is determined by how and where a function is called.</strong></p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Wildcards in Bash]]></title>
    <link href="http://klugjo.github.io/2016/01/Wildcards-in-bash/"/>
    <id>http://klugjo.github.io/2016/01/Wildcards-in-bash/</id>
    <published>2016-01-05T06:31:40.000Z</published>
    <updated>2016-01-05T07:55:00.000Z</updated>
    <content type="html"><![CDATA[<p>This article will walk you through some of the main wildcards available in Bash:</p>
<a id="more"></a> 
<p><br></p>
<h2 id="Match_any_string_with_*">Match any string with *</h2><p>The <code>*</code> wildcard will match any number of characters including no characters.</p>
<table>
<thead>
<tr>
<th>Expression</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ls *.jpg</code></td>
<td>lists all files ending with <strong>.jpg</strong></td>
</tr>
<tr>
<td><code>ls pic*</code></td>
<td>lists all files starting with <strong>pic</strong></td>
</tr>
<tr>
<td><code>ls *abc*</code></td>
<td>lists all files containing <strong>abc</strong> (including starting with and ending with <strong>abc</strong>)</td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="Match_a_single_character_with_?">Match a single character with ?</h2><p>The <code>?</code> wildcard will match a single character. That single character can be anything but can not be empty.</p>
<table>
<thead>
<tr>
<th>Expression</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ls pic?.jpg</code></td>
<td>lists all files like <strong>pic1.jpg</strong>, <strong>picA.jpg</strong> or <strong>picz.jpg</strong>. It will <u>not match</u> <strong>pic.jpg</strong></td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="Match_a_set_of_characters_with_[xyz]">Match a set of characters with [xyz]</h2><p>Use <code>[ ]</code> to have one single character match a defined set of characters.<br>[123abc] means will match 1, 2, 3, a, b or c.</p>
<table>
<thead>
<tr>
<th>Expression</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>pic[123].jpg</code></td>
<td>Will <u>only</u> match <strong>pic1.jpg</strong>, <strong>pic2.jpg</strong> and <strong>pic3.jpg</strong></td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="Match_a_range_of_characters_with_[a-z]">Match a range of characters with [a-z]</h2><p>Use <code>[-]</code> to have one character be within certain range.</p>
<table>
<thead>
<tr>
<th>Expression</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>[a-e]</code></td>
<td>Will match a, b, c, d or e</td>
</tr>
<tr>
<td><code>[a-z]</code></td>
<td>Will match any lowercase letter</td>
</tr>
<tr>
<td><code>[0-9]</code></td>
<td>Will match any digit</td>
</tr>
<tr>
<td><code>[A-Za-z]</code></td>
<td>Will match any letter</td>
</tr>
<tr>
<td><code>[a-e1-5]</code></td>
<td>Will match any lowercase letter between a and e or any digit between 1 and 5</td>
</tr>
<tr>
<td><code>[a-e123]</code></td>
<td>Will match any lowercase letter between a and e or any digit equal to 1, 2 or 3</td>
</tr>
<tr>
<td><code>[0-10]</code></td>
<td>Will match 0 or 1 (0 to 1 range or 0)</td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="Invert_a_selection_with_^">Invert a selection with ^</h2><p>Use <code>^</code> to invert a selection</p>
<table>
<thead>
<tr>
<th>Expression</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>[^78]</code></td>
<td>Will match any character (including letters) different than 7 and 8</td>
</tr>
<tr>
<td><code>[^a-z]</code></td>
<td>Will match any character that is not a lowercase letter</td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="Match_several_expressions_with_{abc,xyz}">Match several expressions with {abc,xyz}</h2><p>Use <code>{expr1,expr2}</code> to match expr1 and expr2</p>
<table>
<thead>
<tr>
<th>Expression</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ls {*.jpg,*.gif}</code></td>
<td>Will list any file with the jpg or gif extension</td>
</tr>
</tbody>
</table>
<p><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This article will walk you through some of the main wildcards available in Bash:</p>]]>
    
    </summary>
    
      <category term="Bash" scheme="http://klugjo.github.io/tags/Bash/"/>
    
      <category term="OS X" scheme="http://klugjo.github.io/tags/OS-X/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[open the current terminal directory in Finder (OS X)]]></title>
    <link href="http://klugjo.github.io/2016/01/open-the-current-terminal-directory-in-Finder-OS-X/"/>
    <id>http://klugjo.github.io/2016/01/open-the-current-terminal-directory-in-Finder-OS-X/</id>
    <published>2016-01-04T15:29:11.000Z</published>
    <updated>2016-01-04T15:42:46.000Z</updated>
    <content type="html"><![CDATA[<p>You can open the current terminal working directory and display it in the Finder using:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open .</span><br></pre></td></tr></table></figure>
<a id="more"></a> 
<p><br></p>
<h2 id="You_might_also_be_interested_in_knowing_how_to:">You might also be interested in knowing how to:</h2><p><br></p>
<h3 id="Open_the_current_parent_directory_in_Finder">Open the current parent directory in Finder</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open ..</span><br></pre></td></tr></table></figure>
<p><br></p>
<h3 id="Open_a_specific_directory_in_Finder">Open a specific directory in Finder</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open dir1/dir2</span><br></pre></td></tr></table></figure>
<p><br></p>
<h3 id="Open_a_file_with_the_default_application">Open a file with the default application</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open file.txt</span><br></pre></td></tr></table></figure>
<p><br></p>
<h3 id="Open_multiple_files:">Open multiple files:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open file1.txt file2.txt file3.txt</span><br></pre></td></tr></table></figure>
<p><br></p>
<h3 id="Open_a_file_while_specifying_the_application">Open a file while specifying the application</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open <span class="operator">-a</span> preview pic1.jpg</span><br></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>You can open the current terminal working directory and display it in the Finder using:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open .</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Bash" scheme="http://klugjo.github.io/tags/Bash/"/>
    
      <category term="OS X" scheme="http://klugjo.github.io/tags/OS-X/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Sorting files using the ls command]]></title>
    <link href="http://klugjo.github.io/2016/01/Sorting-files-using-the-ls-command/"/>
    <id>http://klugjo.github.io/2016/01/Sorting-files-using-the-ls-command/</id>
    <published>2016-01-04T09:24:40.000Z</published>
    <updated>2016-01-04T15:32:10.000Z</updated>
    <content type="html"><![CDATA[<p>In the article we will look at different ways of sorting results of the ls (â€” list directory content) command.</p>
<a id="more"></a> 
<p>In all example, use the <code>-l</code> flag in addition to the sort flag to retrieve a long description of files and verify your results.</p>
<p><br></p>
<h2 id="Sort_by_name">Sort by name</h2><p>This is the default:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Mac-Book-Pro:_posts username$ ls <span class="operator">-l</span></span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">2290</span> Dec  <span class="number">6</span> <span class="number">09</span>:<span class="number">08</span> Add-Disqus-comments-in-Hexo.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">2066</span> Dec  <span class="number">6</span> <span class="number">09</span>:<span class="number">09</span> Add-Google-Analytics-to-your-hexo-blog.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff   <span class="number">952</span> Dec  <span class="number">9</span> <span class="number">21</span>:<span class="number">08</span> Add-an-RSS-feed-to-your-hexo-blog.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">4597</span> Dec <span class="number">11</span> <span class="number">13</span>:<span class="number">32</span> Build-and-package-your-client-side-code-using-npm.md</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="Sort_by_file_size">Sort by file size</h2><p>To sort by file size, use</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-S      Sort files by size</span><br></pre></td></tr></table></figure>
<h3 id="Example">Example</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Mac-Book-Pro:_posts username$ ls -Sl</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">8337</span> Dec <span class="number">23</span> <span class="number">16</span>:<span class="number">41</span> Build-your-first-React-application.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">4597</span> Dec <span class="number">11</span> <span class="number">13</span>:<span class="number">32</span> Build-and-package-your-client-side-code-using-npm.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">4506</span> Dec  <span class="number">6</span> <span class="number">09</span>:<span class="number">14</span> Getting-started-with-Gulp-and-static-websites.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">4317</span> Dec  <span class="number">6</span> <span class="number">09</span>:<span class="number">14</span> Refresh-webpages-automatically-during-development-using-Gulp.md</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="Sort_by_modification_date">Sort by modification date</h2><p>To sort by modification date, use</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-t      Sort by time modified (most recently modified first) </span><br><span class="line">        before sorting the operands by lexicographical order.</span><br></pre></td></tr></table></figure>
<h3 id="Example-1">Example</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Mac-Book-Pro:_posts username$ ls -tl</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">1634</span> Jan  <span class="number">4</span> <span class="number">17</span>:<span class="number">55</span> Sorting-files-using-the-ls-command.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">2519</span> Dec <span class="number">31</span> <span class="number">18</span>:<span class="number">06</span> Code-snippets-in-Webstorm.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">4083</span> Dec <span class="number">29</span> <span class="number">12</span>:<span class="number">32</span> Loops-and-callbacks-in-React.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">3957</span> Dec <span class="number">28</span> <span class="number">17</span>:<span class="number">23</span> Easy-dynamic-classes-with-React.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">1418</span> Dec <span class="number">24</span> <span class="number">10</span>:<span class="number">13</span> Passing-arguments-to-the-underlying-command-in-npm-scripts.md</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="Sort_by_last_time_of_access">Sort by last time of access</h2><p>To sort by last time of access, use <code>-u</code> combined with the <code>-t</code> flag (to sort by date):</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-u      Use time of last access, instead of last modification </span><br><span class="line">        of the file <span class="keyword">for</span> sorting (-t) or long printing (<span class="operator">-l</span>).</span><br></pre></td></tr></table></figure>
<h3 id="Example-2">Example</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Mac-Book-Pro:_posts username$ ls -tlu</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">2188</span> Jan  <span class="number">4</span> <span class="number">17</span>:<span class="number">58</span> Sorting-files-using-the-ls-command.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">2290</span> Dec <span class="number">31</span> <span class="number">18</span>:<span class="number">07</span> Add-Disqus-comments-in-Hexo.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">2066</span> Dec <span class="number">31</span> <span class="number">18</span>:<span class="number">07</span> Add-Google-Analytics-to-your-hexo-blog.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff   <span class="number">952</span> Dec <span class="number">31</span> <span class="number">18</span>:<span class="number">07</span> Add-an-RSS-feed-to-your-hexo-blog.md</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="Sort_by_creation_date">Sort by creation date</h2><p>To sort by creation date, use <code>-U</code> combined with the <code>-t</code> flag (to sort by date):</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-U      Use time of file creation, instead of last modification </span><br><span class="line">        <span class="keyword">for</span> sorting (-t) or long output (<span class="operator">-l</span>).</span><br></pre></td></tr></table></figure>
<h3 id="Example-3">Example</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Mac-Book-Pro:_posts username$ ls -tlU</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">3032</span> Jan  <span class="number">4</span> <span class="number">18</span>:<span class="number">04</span> Sorting-files-using-the-ls-command.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">2519</span> Dec <span class="number">31</span> <span class="number">18</span>:<span class="number">06</span> Code-snippets-in-Webstorm.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">4083</span> Dec <span class="number">29</span> <span class="number">12</span>:<span class="number">32</span> Loops-and-callbacks-in-React.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">3957</span> Dec <span class="number">28</span> <span class="number">17</span>:<span class="number">23</span> Easy-dynamic-classes-with-React.md</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="Reverse_order">Reverse order</h2><p>To reverse the order of any of the sort above, add the <code>-r</code> flag:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-r      Reverse the order of the sort to get reverse lexicographical </span><br><span class="line">        order or the oldest entries first (or largest files last, <span class="keyword">if</span> combined with sort by size</span><br></pre></td></tr></table></figure>
<h3 id="Example_(sort_by_creation_date_starting_with_the_oldest_first)">Example (sort by creation date starting with the oldest first)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Mac-Book-Pro:_posts username$ ls -tlrU</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">2290</span> Dec  <span class="number">6</span> <span class="number">09</span>:<span class="number">08</span> Add-Disqus-comments-in-Hexo.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">2066</span> Dec  <span class="number">6</span> <span class="number">09</span>:<span class="number">09</span> Add-Google-Analytics-to-your-hexo-blog.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">1428</span> Dec  <span class="number">6</span> <span class="number">09</span>:<span class="number">13</span> round-images-in-css.md</span><br><span class="line">-rw-r--r--  <span class="number">1</span> klugjo  staff  <span class="number">4317</span> Dec  <span class="number">6</span> <span class="number">09</span>:<span class="number">14</span> Refresh-webpages-automatically-during-development-using-Gulp.md</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure>
<p>Happy sorting !</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>In the article we will look at different ways of sorting results of the ls (â€” list directory content) command.</p>]]>
    
    </summary>
    
      <category term="Bash" scheme="http://klugjo.github.io/tags/Bash/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Code snippets in Webstorm]]></title>
    <link href="http://klugjo.github.io/2015/12/Code-snippets-in-Webstorm/"/>
    <id>http://klugjo.github.io/2015/12/Code-snippets-in-Webstorm/</id>
    <published>2015-12-31T03:41:42.000Z</published>
    <updated>2015-12-31T10:06:23.000Z</updated>
    <content type="html"><![CDATA[<p>This article will show you how to create code snippets, also known as <a href="https://www.jetbrains.com/webstorm/help/live-templates-2.html" target="_blank" rel="external">live templates</a>, in WebStorm. We will create a JavaScript <a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript" target="_blank" rel="external">Revealing Module Pattern</a> live template.</p>
<a id="more"></a> 
<p><br></p>
<h2 id="Creating_a_new_live_template">Creating a new live template</h2><p>In Webstorm, access the live templates editor:</p>
<ul>
<li>Windows &amp; Linux: <code>File | Settings | Editor | Live Templates</code></li>
<li>OS X: <code>WebStorm | Preferences | Editor | Live Templates</code></li>
</ul>
<p>Press the <code>+</code> to add a new template.</p>
<p>Then use the following:</p>
<ul>
<li>Abbreviation: <code>revmod</code></li>
<li>Description: <code>Revealing Module Pattern</code></li>
<li>Applicable context: Click the define button and choose JavaScript. This means the template will be usable</li>
</ul>
<p><br></p>
<h2 id="Editing_the_live_template_code">Editing the live template code</h2><p>Letâ€™s start with a basic template code for our revealing module pattern:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myModule = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">myMethod</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    myMethod : myMethod</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>Save it then go to any .js file and type <code>revmod</code>. Intellisense will show the live template, select it and press TAB or ENTER.</p>
<p>The code for our template will appear in your file. Letâ€™s make it more interactive.</p>
<p><br></p>
<h2 id="Improving_the_template">Improving the template</h2><h3 id="Template_variables">Template variables</h3><p>Webstorm give you the option of declaring template variables. Use these variables to <strong>customize certain part of your template</strong>. In our example, we want to make the name of the module and the name of the function editable when using the template.</p>
<p>Declare template variables by starting and ending your variable name with a dollar sign: <code>$&lt;variable name&gt;$</code>.</p>
<p><u>Here is our improved template:</u></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $MODULE$ = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">$METHOD$</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    $METHOD$ : $METHOD$</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>If you try your live template again, you will get a wizard like prompt to enter the name of the module and method.</p>
<h3 id="Cursor_position">Cursor position</h3><p>After template insertion, the cursor position will be at the end of the code snippet. We would like it to be in our method, so we can start editing it.</p>
<p>You can do this by adding a special <code>$END$</code> variable in our template:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $MODULE$ = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">$METHOD$</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    $END$</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    $METHOD$ : $METHOD$</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>Try it again and notice the cursor position at the end.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This article will show you how to create code snippets, also known as <a href="https://www.jetbrains.com/webstorm/help/live-templates-2.html">live templates</a>, in WebStorm. We will create a JavaScript <a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript">Revealing Module Pattern</a> live template.</p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
      <category term="WebStorm" scheme="http://klugjo.github.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Loops and callbacks in React]]></title>
    <link href="http://klugjo.github.io/2015/12/Loops-and-callbacks-in-React/"/>
    <id>http://klugjo.github.io/2015/12/Loops-and-callbacks-in-React/</id>
    <published>2015-12-29T02:02:29.000Z</published>
    <updated>2015-12-29T04:32:17.000Z</updated>
    <content type="html"><![CDATA[<p>In this article we will see how to iterate through a collection to render a list of elements in React. We will also have a look at how to fire callback from the children elements.</p>
<a id="more"></a> 
<p><br></p>
<h2 id="The_Example">The Example</h2><p>We will build a dynamic list of buttons with an â€˜Addâ€™ button to add a button to the list. A click on any of these buttons will log the position of the button in the list. <a href="https://output.jsbin.com/rakuya" target="_blank" rel="external">Demo Here <i class="ic external-link"></i></a>. </p>
<p><br></p>
<h2 id="Rendering_the_List_of_Buttons">Rendering the List of Buttons</h2><p>To create a list of elements using a for loop in React, create an empty array and push React elements directly into it. Then Render it like any other element:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> buttonListElements = [], <span class="comment">// Empty Array</span></span><br><span class="line">    n = <span class="number">5</span>,</span><br><span class="line">    i;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// For each element, push a React element into the array</span></span><br><span class="line">    buttonListElements.push(</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">li</span> <span class="attribute">key</span>=<span class="value">&#123;i&#125;</span>&gt;</span><span class="tag">&lt;<span class="title">button</span>&gt;</span>&#123;i&#125;<span class="tag">&lt;/<span class="title">button</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    )</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Then render the array using curly braces</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">       &#123;buttonListElements&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  )</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Although it wonâ€™t be of any use in our app, React requires you to render a <code>key</code> attribute with unique values. If you donâ€™t do so, you will receive warnings in the JS console.</p>
<p><br></p>
<h2 id="Adding_an_onclick_callback_for_each_button">Adding an <em>onclick</em> callback for each button</h2><p>Letâ€™s start with the function that will log the button index:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onChildButtonClick: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Then add the callback to each child button element by modifying the <code>render</code> function above:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.state.buttonNumber; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">  buttonListElements.push(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="title">li</span> <span class="attribute">key</span>=<span class="value">&#123;i&#125;</span>&gt;</span><span class="tag">&lt;<span class="title">button</span> <span class="attribute">onClick</span>=<span class="value">&#123;this.onChildButtonClick.bind(null,</span> <span class="attribute">i</span>)&#125;&gt;</span>&#123;i&#125;<span class="tag">&lt;/<span class="title">button</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  )</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>To pass our current <code>i</code> value to each callback, use <code>.bind(null, i)</code>. The <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind" target="_blank" rel="external">function.prototype.bind()</a> function will create a new function with a global context (<em>null</em> used as context) and the current value of <code>i</code> as the first argument (our <code>val</code> parameter in the <code>onChildButtonClick</code> function).</p>
<p><br></p>
<h2 id="Dynamically_add_elements_to_the_list">Dynamically add elements to the list</h2><p>Letâ€™s start by abstracting the number of elements value in the state:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;buttonNumber: <span class="number">5</span>&#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>Follows the â€˜Addâ€™ button click callback:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onButtonClick: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newButtonNumber = <span class="keyword">this</span>.state.buttonNumber + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;buttonNumber: newButtonNumber&#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>Add the button element to our render method</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">   &#123;buttonListElements&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">onClick</span>=<span class="value">&#123;this.onButtonClick&#125;</span>&gt;</span>Add<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>And replace the <code>n</code> with <code>this.state.buttonNumber</code> in the for loop:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.state.buttonNumber; i = i + <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>This is it. Check out the demo here: <a href="https://jsbin.com/rakuya/edit?html,output" target="_blank" rel="external">https://jsbin.com/rakuya/edit?html,output</a></p>
<p><br></p>
<h2 id="A_cleaner_way_of_handling_loops">A cleaner way of handling loops</h2><p>The example above is for explanation purposes. In production code, I would recommend the use of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="external">Array.prototype.map()</a>.</p>
<p>Like so:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buttonListElements = [],</span><br><span class="line">  data = [&#123;index: <span class="number">0</span>, text: <span class="string">'Jane'</span>&#125;, &#123;index: <span class="number">1</span>, text: <span class="string">'John'</span>&#125;, &#123;index: <span class="number">2</span>, text: <span class="string">'Marcy'</span>&#125;,];</span><br><span class="line"></span><br><span class="line">data.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  buttonListElements.push(</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">li</span> <span class="attribute">key</span>=<span class="value">&#123;item.index&#125;</span>&gt;</span><span class="tag">&lt;<span class="title">button</span> <span class="attribute">onClick</span>=<span class="value">&#123;this.onChildButtonClick.bind(null,</span> <span class="attribute">item.index</span>)&#125;&gt;</span>&#123;item.text&#125;<span class="tag">&lt;/<span class="title">button</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  )</span>;</span><br><span class="line">&#125;, <span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>With this method, you can pass an array of objects and elegantly access the children properties.</li>
<li>Do not forget to pass the context (<code>this</code>) as a second argument in <code>arr.map(callback[, thisArg])</code>. Otherwise you wonâ€™t be able to access the child click callback function (<code>this.onChildButtonClick</code>).</li>
</ul>
<p>Thanks for reading !</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>In this article we will see how to iterate through a collection to render a list of elements in React. We will also have a look at how to fire callback from the children elements.</p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
      <category term="React" scheme="http://klugjo.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Easy dynamic classes with React]]></title>
    <link href="http://klugjo.github.io/2015/12/Easy-dynamic-classes-with-React/"/>
    <id>http://klugjo.github.io/2015/12/Easy-dynamic-classes-with-React/</id>
    <published>2015-12-28T07:16:03.000Z</published>
    <updated>2015-12-28T09:23:32.000Z</updated>
    <content type="html"><![CDATA[<p>In this article we will see how to generate dynamic classes for React without resorting to obnoxious string manipulations.</p>
<p>We will build a simple app that changes the <code>color</code> and <code>font-style</code> of a div based on a textbox value.</p>
<a id="more"></a> 
<p><br></p>
<h2 id="The_rules">The rules</h2><h3 id="The_text_in_our_div_should_be:">The text in our div should be:</h3><ul>
<li><span style="color: red;">Red</span> when the value is negative</li>
<li><span style="color: blue;">Blue</span> when the value is positive</li>
<li><span style="font-style: italic;">Italic</span> when the value is even</li>
<li><span style="font-style: normal;">Normal</span> when the value is odd</li>
</ul>
<h3 id="Corresponding_css_classes:">Corresponding css classes:</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.blue</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">color</span>:<span class="value"> blue</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.red</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">color</span>:<span class="value"> red</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.italic</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">font-style</span>:<span class="value"> italic</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.normal</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">font-style</span>:<span class="value"> normal</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="The_magic">The magic</h2><p>React now uses the <a href="https://github.com/JedWatson/classnames" target="_blank" rel="external">classNames</a> library to join and manage class names.</p>
<p>You can <a href="https://github.com/JedWatson/classnames#classnames" target="_blank" rel="external">install it with npm or bower</a>.</p>
<p>The <code>classNames</code> library allows you to <strong>declare your classes as a string, an array or an object</strong>. The 3 following declarations are equivalent:</p>
<h3 id="String">String</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elementClass = className(<span class="string">'red italic'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Array">Array</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elementClass = className([<span class="string">'red'</span>, <span class="string">'italic'</span>]);</span><br></pre></td></tr></table></figure>
<h3 id="Object">Object</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elementClass = className(&#123;</span><br><span class="line">    red: <span class="literal">true</span>, <span class="comment">// use true or any truthy value / expression</span></span><br><span class="line">    italic: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Note:"><u>Note:</u></h3><p>You can even use a <a href="https://github.com/JedWatson/classnames#usage-with-reactjs" target="_blank" rel="external">mix of all three</a> as separate parameters:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elementClass = className(<span class="string">"class1 class2"</span>, <span class="comment">// String</span></span><br><span class="line">  [<span class="string">'class3'</span>, <span class="string">'class4'</span>], <span class="comment">// Array</span></span><br><span class="line">  &#123;class5: <span class="literal">true</span>&#125;); <span class="comment">// Object</span></span><br></pre></td></tr></table></figure>
<p>It will <strong>add all 5 classes</strong> to the element.</p>
<p><br></p>
<h2 id="The_example">The example</h2><h3 id="Rendering_the_elements">Rendering the elements</h3><p>Letâ€™s start with the render function. We will need a div with some text and a text input:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;this.state.textClass&#125;</span>&gt;</span>RESULT<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">value</span>=<span class="value">"Hello!"</span> <span class="attribute">value</span>=<span class="value">&#123;this.state.value&#125;</span> <span class="attribute">onChange</span>=<span class="value">&#123;this.handleChange&#125;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  )</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>this.state.value</code>: will hold the number we are going to check</li>
<li><code>this.state.textClass</code>: will hold our classes generated with <strong>className</strong></li>
<li><code>this.handleChange</code>: will regenerate the classes when the textbox value changes</li>
</ul>
<h3 id="Generating_our_css_classes">Generating our css classes</h3><p>We can now create our class generation function based on the example defined above:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">computeClass: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> classNames(&#123;</span><br><span class="line">    blue: val &gt; <span class="number">0</span>, <span class="comment">// positive -&gt; blue</span></span><br><span class="line">    red: val &lt; <span class="number">0</span>, <span class="comment">// negative -&gt; red</span></span><br><span class="line">    italic: val % <span class="number">2</span> === <span class="number">0</span>, <span class="comment">// even -&gt; italic</span></span><br><span class="line">    normal: <span class="built_in">Math</span>.abs(val % <span class="number">2</span>) === <span class="number">1</span> <span class="comment">// odd -&gt; normal</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Consider always using this method in your applications. Conditional blocks used to generate strings are a hell to read and maintain ;)</p>
<h3 id="Full_React_code">Full React code</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Main = React.createClass(&#123;</span><br><span class="line">  getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        value: <span class="number">0</span>,</span><br><span class="line">        textClass: <span class="keyword">this</span>.computeClass(<span class="number">0</span>)</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  computeClass: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> classNames(&#123;</span><br><span class="line">      blue: val &gt; <span class="number">0</span>,</span><br><span class="line">      red: val &lt; <span class="number">0</span>,</span><br><span class="line">      italic: val % <span class="number">2</span> === <span class="number">0</span>,</span><br><span class="line">      normal: <span class="built_in">Math</span>.abs(val % <span class="number">2</span>) === <span class="number">1</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  handleChange: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> val = <span class="built_in">isNaN</span>(event.target.value) ? <span class="number">0</span> : event.target.value,</span><br><span class="line">      textClass = <span class="keyword">this</span>.computeClass(val);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;value: val, textClass: textClass&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;this.state.textClass&#125;</span>&gt;</span>RESULT<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">value</span>=<span class="value">"Hello!"</span> <span class="attribute">value</span>=<span class="value">&#123;this.state.value&#125;</span> <span class="attribute">onChange</span>=<span class="value">&#123;this.handleChange&#125;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    )</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="title">Main</span> /&gt;</span>, document.getElementById("main"));</span></span><br></pre></td></tr></table></figure>
<p>Or check it live here: <a href="https://jsbin.com/kijica/edit?html,output" target="_blank" rel="external">https://jsbin.com/kijica/edit?html,output</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>In this article we will see how to generate dynamic classes for React without resorting to obnoxious string manipulations.</p>
<p>We will build a simple app that changes the <code>color</code> and <code>font-style</code> of a div based on a textbox value.</p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
      <category term="React" scheme="http://klugjo.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Passing arguments to the underlying command in npm scripts]]></title>
    <link href="http://klugjo.github.io/2015/12/Passing-arguments-to-the-underlying-command-in-npm-scripts/"/>
    <id>http://klugjo.github.io/2015/12/Passing-arguments-to-the-underlying-command-in-npm-scripts/</id>
    <published>2015-12-24T01:26:41.000Z</published>
    <updated>2015-12-24T02:13:32.000Z</updated>
    <content type="html"><![CDATA[<p>In this tutorial we will see how to pass arguments to a command when combining <a href="/2015/12/Run-scripts-with-npm/" target="_blank">npm scripts</a>.</p>
<a id="more"></a> 
<p><br></p>
<h2 id="Project_setup">Project setup</h2><p>Letâ€™s assume we have the current script defined in our npm scripts:</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"stylus"</span>: <span class="string">"stylus src/stylus/site.styl --out dist/"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="Watching_for_changes">Watching for changes</h2><p>Now letâ€™s say we want to create a new task that will not only compile our stylus files to css but also watch for changes and recompile when necessary.</p>
<p>Using the command line this can be done with the <code>-w</code> flag:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stylus src/stylus/site<span class="class">.styl</span> -w</span><br></pre></td></tr></table></figure>
<p>We now want to create a new script that watches for stylus changes. We can do:</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"stylus"</span>: <span class="string">"stylus src/stylus/site.styl --out dist/"</span>,</span><br><span class="line">    <span class="string">"watch:stylus"</span>: <span class="string">"stylus src/stylus/site.styl --out dist/ -w"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>See anything ugly ?</p>
<p><br></p>
<h2 id="Reusing_existing_code">Reusing existing code</h2><p>In order to avoid duplicated code, we want to reuse our first command and add the <code>-w</code> flag.</p>
<p>The general syntax is</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="command">run</span> [command] [<span class="comment">-- &lt;args&gt;]</span></span><br></pre></td></tr></table></figure>
<p>With our example it would be:</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"stylus"</span>: <span class="string">"stylus src/stylus/site.styl --out dist/"</span>,</span><br><span class="line">    <span class="string">"watch:stylus"</span>: <span class="string">"npm run stylus -- -w"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>Note the <code>--</code> in between the initial command and the additional arguments.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>In this tutorial we will see how to pass arguments to a command when combining <a href="/2015/12/Run-scripts-with-npm/" target="_blank">npm scripts</a>.</p>]]>
    
    </summary>
    
      <category term="Node" scheme="http://klugjo.github.io/tags/Node/"/>
    
      <category term="npm" scheme="http://klugjo.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Build your first React application]]></title>
    <link href="http://klugjo.github.io/2015/12/Build-your-first-React-application/"/>
    <id>http://klugjo.github.io/2015/12/Build-your-first-React-application/</id>
    <published>2015-12-22T06:44:36.000Z</published>
    <updated>2015-12-23T08:41:46.000Z</updated>
    <content type="html"><![CDATA[<p>This tutorial will walk you through developing your first app with React.<br><a id="more"></a><br><br></p>
<h2 id="1)_Installation">1) Installation</h2><p>This is the app we are going to build. Two buttons that change the case of a text. Pretty simple but good enough to look at a few of Reactâ€™s basic syntax.</p>
<p><br></p>
<p><hr style="border: 0;height: 1px;background-image: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.75), rgba(0, 0, 0, 0));"></p>
<p><div style="margin-top: 7px; margin-bottom: 15px; text-align:center; width: 100%; padding-bottom: 15px"><br>  <div id="react-tutorial-1-text" style="color:#666666; font-size:20px">Hello from React</div><br>  <button onmouseover="this.style.background = '#f9f9f9'" onmouseout="this.style.background = '#f4f4f4'" style="border-radius:6px; border:1px solid #dcdcdc; color:#666666; background: #f4f4f4; font-size:15px; padding:6px 24px; text-decoration:none; text-shadow:0px 1px 0px #ffffff; margin: 7px; outline: none; cursor: pointer;" onclick="document.getElementById('react-tutorial-1-text').style['text-transform'] = 'lowercase';">Lowercase</button><button onmouseover="this.style.background = '#f9f9f9'" onmouseout="this.style.background = '#f4f4f4'" style="border-radius:6px; border:1px solid #dcdcdc; color:#666666; background: #f4f4f4; font-size:15px; padding:6px 24px; text-decoration:none; text-shadow:0px 1px 0px #ffffff; margin: 7px; outline: none; cursor: pointer;" onclick="document.getElementById('react-tutorial-1-text').style['text-transform'] = 'uppercase';">Uppercase</button><br></div></p>
<p><hr style="border: 0;height: 1px;background-image: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.75), rgba(0, 0, 0, 0));"><br><br><br>Letâ€™s get started by creating a simple HTML document and include the <a href="https://facebook.github.io/react/downloads.html" target="_blank" rel="external">React libraries</a>. You will also need to include a script tag and create div with <code>id=&quot;main&quot;</code> in the the document body.</p>
<p>Make sure you are using the <a href="https://facebook.github.io/react/downloads.html" target="_blank" rel="external">latest version of React</a>. At the time of writing, this is what I have in my index.html:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://fb.me/react-0.14.3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://fb.me/react-dom-0.14.3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"main"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/babel"</span>&gt;</span><span class="1c"></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// Your react code goes here</span></span><br><span class="line">      </span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><u>Note:</u> It is <s>possible</s> <strong>recommended</strong> to use React with a CommonJS module system like browserify or webpack and to <a href="https://facebook.github.io/react/docs/getting-started.html" target="_blank" rel="external">install it with npm</a>.</p>
<p><br></p>
<h2 id="2)_First_component_using_Reactâ€™s_JSX_syntax">2) First component using Reactâ€™s JSX syntax</h2><p>React uses a specific syntax, called <a href="https://facebook.github.io/react/docs/jsx-in-depth.html" target="_blank" rel="external">JSX</a>. JSX is a JavaScript syntax extension that looks similar to XML. In your JSX files, you can use any JavaScript you want, but you can also include pieces of HTML/XML without quotes.</p>
<p>(The <a href="https://babeljs.io/" target="_blank" rel="external">babel-core</a> library we have included, allows in browser JSX transformation and the use of <code>&lt;script type=&quot;text/babel&quot;&gt;</code> tags.)</p>
<p>Letâ€™s create a button component on our page with React:</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var UppercaseButton = React.createClass<span class="params">(&#123;</span><br><span class="line">  render: function<span class="params">()</span> &#123;</span><br><span class="line">    return <span class="params">(</span><br><span class="line">      &lt;button&gt;Uppercase&lt;/button&gt;</span><br><span class="line">    )</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.<span class="built_in">render</span><span class="params">(&lt;UppercaseButton /&gt;, document.getElementById<span class="params">(<span class="string">"main"</span>)</span>)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>Use <code>React.createClass()</code> to declare new components.</li>
<li>A React Class should have a <code>render</code> function that returns the elementâ€™s HTML. Careful to use <code>return(&lt;HtmlTag /&gt;)</code> and not <code>return{&lt;HtmlTag /&gt;}</code>.</li>
<li>ReactDOM.render() is our appâ€™s main entry point and renders our components. The first argument is the <code>&lt;ReactTag /&gt;</code> that we declared with <code>createClass()</code> and the second is the HTML element that will contain the rendered React component.</li>
<li>React classes should always start with an Capital letter.</li>
</ul>
<p>Check out the code here: <a href="https://jsbin.com/xakiza/edit?html,output" target="_blank" rel="external">https://jsbin.com/xakiza/edit?html,output</a></p>
<p><br></p>
<h2 id="3)_Passing_arguments_to_a_React_component">3) Passing arguments to a React component</h2><p>It is possible to pass arguments to components using components properties.</p>
<p>Change your React code to:</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> UppercaseButton = React.createClass(&#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button&gt;&#123;<span class="keyword">this</span>.props.text&#125;&lt;/button&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;UppercaseButton text=&#123;<span class="string">"Uppercase"</span>&#125; /&gt;, document.getElementById(<span class="string">"main"</span>));</span><br></pre></td></tr></table></figure>
<ul>
<li>Pass an argument by adding a property like you would in HTML. In this example, we added the <code>text={&quot;Uppercase&quot;}</code> property.</li>
<li>Use curly brackets when interpolating JavaScript expressions in your JSX templates.</li>
<li>In the component definition, use <code>this.props.propertyName</code> to access the value passed to that component.</li>
</ul>
<p>Check out the code here: <a href="https://jsbin.com/qakaka/edit?html,output" target="_blank" rel="external">https://jsbin.com/qakaka/edit?html,output</a></p>
<p><br></p>
<h2 id="4)_Composing_components_and_managing_state">4) Composing components and managing state</h2><p>We are now going to create a <code>&lt;Main /&gt;</code> component to hold our button and text. This component will hold our applicationâ€™s state.</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> UppercaseButton = React.createClass(&#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button onClick=&#123;<span class="keyword">this</span>.props.onButtonClick&#125;&gt;Uppercase&lt;/button&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> HelloText = React.createClass(&#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div style=&#123;<span class="keyword">this</span>.props.textStyle&#125;&gt;Hello from React&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Main = React.createClass(&#123;</span><br><span class="line">  getInitialState: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;textStyle: &#123;</span><br><span class="line">      textTransform: <span class="string">'none'</span></span><br><span class="line">    &#125;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  clickHandler: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;textStyle: &#123;</span><br><span class="line">      textTransform: <span class="string">'uppercase'</span></span><br><span class="line">    &#125;&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;HelloText textStyle=&#123;<span class="keyword">this</span>.state.textStyle&#125; /&gt;</span><br><span class="line">        &lt;UppercaseButton onButtonClick=&#123;<span class="keyword">this</span>.clickHandler&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Main /&gt;, document.getElementById(<span class="string">"main"</span>));</span><br></pre></td></tr></table></figure>
<p>Our code is getting larger, here are the main things to pay attention to:</p>
<ul>
<li>We now have 3 components (Main, UppercaseButton and HelloText). Main holds UppercaseButton and HelloText.</li>
<li><code>getInitialState()</code> is a special React function that will be called once when a component is initialized. Make use of it to return the initial state object.</li>
<li>The component state can be access with <code>this.state</code>.</li>
<li>The component state can be modified using <code>this.setState(newState)</code>.</li>
<li>To set a inline style using the JSX syntax, use <code>style={JavascriptStyleObject}</code>. More info in the <a href="https://facebook.github.io/react/tips/inline-styles.html" target="_blank" rel="external">React inline style documentation</a>. In our example, to set the text to uppercase: style=&lbrace;&lbrace;textTransform: â€˜noneâ€™&rbrace;&rbrace;</li>
</ul>
<p>Check out the code and play around here: <a href="https://jsbin.com/beheve/edit?html,output" target="_blank" rel="external">https://jsbin.com/beheve/edit?html,output</a></p>
<p><br></p>
<h2 id="5)_Finishing_the_application_and_taking_of_advantage_of_React_modular_approach">5) Finishing the application and taking of advantage of React modular approach</h2><p>Letâ€™s now add our second button by creating a generic button.</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> TextTransformButton = React.createClass(&#123;</span><br><span class="line">  onButtonClick: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.props.onButtonClick(<span class="keyword">this</span>.props.transform);</span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button onClick=&#123;<span class="keyword">this</span>.onButtonClick&#125;&gt;&#123;<span class="keyword">this</span>.props.transform&#125;&lt;/button&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> HelloText = React.createClass(&#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div style=&#123;<span class="keyword">this</span>.props.textStyle&#125;&gt;Hello from React&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Main = React.createClass(&#123;</span><br><span class="line">  getInitialState: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;textStyle: &#123;</span><br><span class="line">      textTransform: <span class="string">'none'</span></span><br><span class="line">    &#125;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  clickHandler: <span class="function"><span class="keyword">function</span> <span class="params">(newCase)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;textStyle: &#123;</span><br><span class="line">      textTransform: newCase</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;HelloText textStyle=&#123;<span class="keyword">this</span>.state.textStyle&#125; /&gt;</span><br><span class="line">        &lt;TextTransformButton onButtonClick=&#123;<span class="keyword">this</span>.clickHandler&#125; transform=&#123;<span class="string">"lowercase"</span>&#125; /&gt;</span><br><span class="line">        &lt;TextTransformButton onButtonClick=&#123;<span class="keyword">this</span>.clickHandler&#125; transform=&#123;<span class="string">"uppercase"</span>&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Main /&gt;, document.getElementById(<span class="string">"main"</span>));</span><br></pre></td></tr></table></figure>
<ul>
<li>The <code>clickHandler</code> function is now generic. </li>
<li>The child components (buttons here) will decide what to send to the <code>clickHandler</code>.</li>
</ul>
<p>Check out the final code here: <a href="https://jsbin.com/bidafa/edit?html,output" target="_blank" rel="external">https://jsbin.com/bidafa/edit?html,output</a></p>
<p>Hopefully this quick first look at React will help you get started and get an idea of the frameworkâ€™s potential.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This tutorial will walk you through developing your first app with React.<br>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
      <category term="React" scheme="http://klugjo.github.io/tags/React/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[CodeBlocQ]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://klugjo.github.io/"/>
  <updated>2016-03-07T09:45:59.000Z</updated>
  <id>http://klugjo.github.io/</id>
  
  <author>
    <name><![CDATA[Klughertz Jonathan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Setup Gulp to compile ES6 ES2015 code]]></title>
    <link href="http://klugjo.github.io/2016/03/Setup-Gulp-to-compile-ES6-ES2015-code/"/>
    <id>http://klugjo.github.io/2016/03/Setup-Gulp-to-compile-ES6-ES2015-code/</id>
    <published>2016-03-07T09:20:16.000Z</published>
    <updated>2016-03-07T09:45:59.000Z</updated>
    <content type="html"><![CDATA[<p>Basics of setting yourself up with Gulp and Babel. </p>
<p>In this example I am going to look at compiling ES6 to ES5 using Babel, but this example will work with compiling your React jsx code as well. As long a you know how to configure Babel.</p>
<a id="more"></a>
<h2 id="Project_Structure">Project Structure</h2><p>This is what my project folder structure looks like:</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|<span class="comment">-- dist // Build will end up here</span></span><br><span class="line">|<span class="comment">-- src // All source code should be inside this folder</span></span><br><span class="line">    |<span class="comment">-- index.js </span></span><br><span class="line">|<span class="comment">-- gulpfile.js</span></span><br></pre></td></tr></table></figure>
<p>Our <code>src/index.js</code> contains the ES6 code and gulp will create a compiled version inside the <code>/dist</code> folder.</p>
<p>The ES2015 code I am using to test is</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(() =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">"ES2015 FTW"</span>); &#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<h2 id="npm_install">npm install</h2><p>Let’s install everything we need</p>
<h3 id="Babel">Babel</h3><p>We need the babel core, CLI and es2015 preset:</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install </span>--save-dev <span class="keyword">babel-cli </span><span class="keyword">babel-core </span><span class="keyword">babel-preset-es2015</span></span><br></pre></td></tr></table></figure>
<h3 id="Gulp">Gulp</h3><p>We need gulp and the <a href="https://github.com/babel/gulp-babel" target="_blank" rel="external">babel module for gulp</a>.</p>
<figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> gulp gulp-babel</span><br></pre></td></tr></table></figure>
<p>Also make sure you have <code>gulp</code> installed globally.</p>
<h2 id="Configuration">Configuration</h2><h3 id="Babel-1">Babel</h3><p>Configure babel to use the es2015 plugin in your package.json (or .babelrc if you prefer).</p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"babel"</span>: &#123;</span><br><span class="line">    <span class="string">"presets"</span>: [<span class="string">"es2015"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Gulp-1">Gulp</h3><p>Create your <code>gulpfile.js</code> and require the two gulp libs:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>);</span><br></pre></td></tr></table></figure>
<p>Then declare our default task:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Then for our task content: </p>
<ul>
<li>Pick up the js files in <code>/src</code></li>
<li>Compile it with babel</li>
<li>Put everything in <code>/dist</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'src/**/*.js'</span>)</span><br><span class="line">        .pipe(babel())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'dist'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Run_the_build_script">Run the build script</h2><p>Run the build script using </p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>gulp</span><br></pre></td></tr></table></figure>
<p>And your compiled files will be in the output folder.</p>
<p>This is what my <code>index.js</code> looks like after being transpiled:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"ES6 FTW"</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Note">Note</h3><p>If you want to write your <code>gulpfile.js</code> in ES2015 and your version of node does not support it, <a href="https://markgoodyear.com/2015/06/using-es6-with-gulp/" target="_blank" rel="external">follow the instructions in this article</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Basics of setting yourself up with Gulp and Babel. </p>
<p>In this example I am going to look at compiling ES6 to ES5 using Babel, but this example will work with compiling your React jsx code as well. As long a you know how to configure Babel.</p>]]>
    
    </summary>
    
      <category term="Babel" scheme="http://klugjo.github.io/tags/Babel/"/>
    
      <category term="ES2015" scheme="http://klugjo.github.io/tags/ES2015/"/>
    
      <category term="ES6" scheme="http://klugjo.github.io/tags/ES6/"/>
    
      <category term="Gulp" scheme="http://klugjo.github.io/tags/Gulp/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Unit Test React Components]]></title>
    <link href="http://klugjo.github.io/2016/03/Unit-Test-React-Components/"/>
    <id>http://klugjo.github.io/2016/03/Unit-Test-React-Components/</id>
    <published>2016-03-02T06:04:35.000Z</published>
    <updated>2016-03-03T03:46:46.000Z</updated>
    <content type="html"><![CDATA[<p>In this article you will learn how to setup your environment and get started with React Unit Testing. The setup I am detailing here is inspired by <a href="http://teropa.info/blog/2015/09/10/full-stack-redux-tutorial.html#the-client-application" target="_blank" rel="external">this much longer yet amazing tutorial</a>.</p>
<p>To get the most out of this post, it’s best if you have had some exposure to at least some of these frameworks/tools:</p>
<ul>
<li><strong>Node.js and NPM:</strong> install packages and <a href="/2015/12/Run-scripts-with-npm/">run custom scripts</a></li>
<li><strong>webpack:</strong> Basic configuration to compile code and launch a web server</li>
<li><strong>React:</strong> <a href="/2015/12/Build-your-first-React-application/">Basics of writing components</a></li>
<li><strong>mocha:</strong> Run unit tests with mocha</li>
<li><strong>chai:</strong> Basics of writing unit tests with chai</li>
<li><strong>Babel:</strong> <a href="/2016/02/How-to-setup-Babel6-for-NodeJs/">Compile ES6</a> and React code with Babel</li>
<li><strong>ES6:</strong> <a href="/2016/02/Babel-and-Node-Module-Loader/">Import statement</a> and some of the new additions to the language</li>
</ul>
<a id="more"></a>
<h2 id="Project_Setup">Project Setup</h2><p>Everything we need to write our first React component.</p>
<h3 id="NPM">NPM</h3><p>Let’s get started with a new NPM project</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">npm</span> init -y</span><br></pre></td></tr></table></figure>
<h3 id="Dist_Folder">Dist Folder</h3><p>Create a <code>dist</code> folder and an <code>dist/index.html</code> file that will be the shell for our React code.</p>
<p>Here is the HTML code we will use:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>We will use <code>webpack</code> to generate <code>bundle.js</code> from the React code will write later on.</p>
<h3 id="Webpack_&amp;_Babel">Webpack &amp; Babel</h3><h4 id="Install_Webpack_and_Webpack’s_local_web_server_module-">Install Webpack and Webpack’s local web server module.</h4><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> webpack webpack-<span class="built_in">dev</span>-server</span><br></pre></td></tr></table></figure>
<p>If you have not done so, install these modules globally as well: </p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> -g webpack webpack-dev-<span class="keyword">server</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>webpack</code>: base webpack module</li>
<li><code>webpack-dev-server</code>: easy web server with webpack (defaults to <a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a>)</li>
</ul>
<h4 id="We_will_also_need_all_the_Babel_compilers:">We will also need all the Babel compilers:</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install </span>--save-dev <span class="keyword">babel-core </span><span class="keyword">babel-loader </span><span class="keyword">babel-preset-react </span><span class="keyword">babel-preset-es2015</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>babel-core</code>: needed to do anything with babel. Install this globally if you have not already done so.</li>
<li><code>babel-loader</code>: <a href="https://github.com/babel/babel-loader" target="_blank" rel="external">babel plugin for webpack</a>.</li>
<li><code>babel-preset-react</code>: babel plugin to compile our React JSX files.</li>
<li><code>babel-preset-es2015</code>: babel plugin to compile our ES6/ES2015 code.</li>
</ul>
<h4 id="We_are_now_ready_to_write_the_first_version_of_webpack’s_configuration:_webpack-config-js">We are now ready to write the first version of webpack’s configuration: <code>webpack.config.js</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: [</span><br><span class="line">        <span class="string">'./src/index.jsx'</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">            loaders: [&#123;</span><br><span class="line">                test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                loader: <span class="string">'babel'</span></span><br><span class="line">            &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.jsx'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.join(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        publicPath: <span class="string">'/'</span>,</span><br><span class="line">        filename: <span class="string">'bundle.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: <span class="string">'./dist'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>module</code> and <code>resolve</code> contain the Babel configuration.</li>
<li><code>output</code> contains the output <code>bundle.js</code> configuration.</li>
<li><code>devserver</code> indicates which folder should be used as the root for <code>webpack-dev-server</code>.</li>
</ul>
<h3 id="React_libraries">React libraries</h3><p>The start of the show:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save react react-dom</span><br></pre></td></tr></table></figure>
<ul>
<li><code>react</code>: React base module</li>
<li><code>react-dom</code>: to render React component to the DOM</li>
</ul>
<h3 id="Package-json_-_Babel_configuration">Package.json - Babel configuration</h3><p>In your package.json, add the following section to tell Babel to use the ES6 and React plugins. This is usually done in a <code>.babelrc</code> file but <a href="/2016/02/How-to-setup-Babel6-for-NodeJs/">I find it cleaner</a> to put it in <code>package.json</code></p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"babel"</span>: &#123;</span><br><span class="line">    <span class="string">"presets"</span>: [</span><br><span class="line">      <span class="string">"es2015"</span>,</span><br><span class="line">      <span class="string">"react"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<h2 id="App_code">App code</h2><p>Let’s start building !</p>
<h3 id="App_requirements">App requirements</h3><p>This is what our app does. Starting with an array of strings, our component will generate one button for each of these strings. A click on any of the generated buttons should display the button text in a label.</p>
<h3 id="src/index-jsx">src/index.jsx</h3><p>Let’s start with a <code>src/index.jsx</code> file that will hold our component:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> Component <span class="keyword">from</span> <span class="string">'./component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = [<span class="string">'OK'</span>, <span class="string">'No'</span>, <span class="string">'Cancel'</span>];</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Component</span> <span class="attr">options</span>=<span class="string">&#123;options&#125;</span> /&gt;</span>,</span><br><span class="line">    document.getElementById('app')</span><br><span class="line">);</span></span><br></pre></td></tr></table></figure>
<p>We have a <code>Component</code> React class with an <code>options</code> property that will hold our string array.</p>
<h3 id="src/Component-jsx">src/Component.jsx</h3><p>Here is the code for that component, put it in <code>src/Component.jsx</code>:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</span><br><span class="line">    getOptions: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.props.options || [];</span><br><span class="line">    &#125;,</span><br><span class="line">    getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            displayText: <span class="string">"Click on a button"</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    clickHandler: <span class="function"><span class="keyword">function</span> (<span class="params">displayText</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;displayText: displayText&#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;"display-text"&#125;</span>&gt;</span>&#123;this.state.displayText&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            &#123;</span><br><span class="line">                this.getOptions().map(option =&gt;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">key</span>=<span class="string">&#123;option&#125;</span></span><br><span class="line">                            <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.clickHandler(option)&#125;&gt;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;option&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>The initial text in our <code>div.display-text</code> label is <code>&quot;Click on a button&quot;</code>.</li>
<li>We are generating buttons for each string in <code>this.props.options</code>.</li>
<li>A click on one of these buttons will update the state and the label’s text.</li>
</ul>
<p>Pretty straightforward. At this stage, you can to run the app with:</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ webpack-dev-<span class="keyword">server</span></span><br></pre></td></tr></table></figure>
<p>and open your browser at <a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a>.</p>
<h2 id="Unit_testing">Unit testing</h2><p>Let’s now look at why we are here in the first place. Unit testing our newly created <code>Component</code>.</p>
<h3 id="Unit_testing_libraries">Unit testing libraries</h3><p>Let’s start by installing and configuring our Unit testing environment. We will be using:</p>
<ul>
<li><p><code>mocha</code> to run our tests and <code>chai</code> to write them. </p>
</li>
<li><p><code>jsdom</code> to emulate a web browser so that we won’t need a real browser to run our tests.</p>
</li>
<li><p><code>react-addons-test-utils</code> which is the official React test helper library.</p>
</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install </span>--save-dev mocha chai <span class="keyword">jsdom </span>react-<span class="keyword">addons-test-utils</span></span><br></pre></td></tr></table></figure>
<h3 id="Configure_jsdom">Configure <code>jsdom</code></h3><p><a href="https://github.com/tmpvar/jsdom" target="_blank" rel="external">jsdom</a> requires some configuration that we will put in a <code>test/test-helper.js</code> file. Later, <code>mocha</code> will run this file before running any test.</p>
<p>We need to set up a basic HTML environment for <code>jsdom</code> and transfers the <code>window</code> object and all its properties to Node’s global object so that mocha can access them seamlessly.</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import jsdom from 'jsdom';</span><br><span class="line"></span><br><span class="line"><span class="comment">// Setup a basic HTML document</span></span><br><span class="line"><span class="keyword">const</span> doc = jsdom.jsdom('&lt;!doctype html&gt;&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;');</span><br><span class="line"></span><br><span class="line"><span class="comment">// Extract the window element from the document</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">win</span> = doc.defaultView;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Insert these objects in Node's global object.</span></span><br><span class="line"><span class="keyword">global</span>.document = doc;</span><br><span class="line"><span class="keyword">global</span>.<span class="keyword">window</span> = <span class="keyword">win</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Take out all the properties from the window object and add them to global</span></span><br><span class="line">Object.keys(<span class="keyword">window</span>).<span class="keyword">forEach</span>((key) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(key <span class="keyword">in</span> <span class="keyword">global</span>)) &#123;</span><br><span class="line">        <span class="keyword">global</span>[key] = <span class="keyword">window</span>[key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="package-json_-_Test_script">package.json - Test script</h3><p>Our Mocha command is pretty complex so let’s add a script in the the package.json.</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"mocha --compilers js:babel-core/register --require ./test/test-helper.js 'test/**/*.@(js|jsx)'"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>Now we can simply type <code>npm run test</code> to run our tests.</p>
<p>Details on that command:</p>
<ul>
<li><code>&#39;test/**/*.@(js|jsx)&#39;</code>: It runs all mocha unit tests in <code>.js</code> and <code>.jsx</code> files in the <code>/test/</code> folder.</li>
<li><code>--compilers js:babel-core/register</code>: It compiles the ES6 and React code with Babel. You might have to install <code>babel-core</code> globally to execute that command. Do so if you run into problems.</li>
<li><code>--require ./test/test-helper.js</code>: It executes our jsdom configuration in <code>test/test-helper.js</code> before running the tests.</li>
</ul>
<h3 id="Writing_the_first_test">Writing the first test</h3><p>And the moment we have all been waiting for: our first test in <code>test/Component-spec.jsx</code>.</p>
<p>Let’s start bu testing the button generation:</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    renderIntoDocument,</span><br><span class="line">    scryRenderedDOMComponentsWithTag</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-addons-test-utils'</span>;</span><br><span class="line"><span class="keyword">import</span> Component <span class="keyword">from</span> <span class="string">'../src/Component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;expect&#125; <span class="keyword">from</span> <span class="string">'chai'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'Component'</span>, () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="literal">it</span>(<span class="string">'renders as many buttons as stated in the options property'</span>, () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> component = renderIntoDocument(</span><br><span class="line">            &lt;Component options=&#123;[<span class="string">'Bleach'</span>, <span class="string">'Nevermind'</span>, <span class="string">'In Utero'</span>]&#125; /&gt;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> buttons = scryRenderedDOMComponentsWithTag(component, <span class="string">'button'</span>);</span><br><span class="line"></span><br><span class="line">        expect(buttons.length).<span class="keyword">to</span>.equal(<span class="number">3</span>);</span><br><span class="line">        expect(buttons[<span class="number">0</span>].textContent).<span class="keyword">to</span>.equal(<span class="string">'Bleach'</span>);</span><br><span class="line">        expect(buttons[<span class="number">1</span>].textContent).<span class="keyword">to</span>.equal(<span class="string">'Nevermind'</span>);</span><br><span class="line">        expect(buttons[<span class="number">2</span>].textContent).<span class="keyword">to</span>.equal(<span class="string">'In Utero'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Imports">Imports</h3><p>We are going to use some of the <a href="https://facebook.github.io/react/docs/test-utils.html" target="_blank" rel="external">react test utils methods</a>:</p>
<ul>
<li><code>renderIntoDocument</code>: renders a component into a detached DOM.</li>
<li><code>scryRenderedDOMComponentsWithTag</code>: finds all instances of components based on tag name</li>
</ul>
<h3 id="Test_Flow">Test Flow</h3><p>We start by rendering our <code>Component</code>, then retrieve all the <buttons> and test that the button’s text is what we set in the <code>options</code> property.</buttons></p>
<h3 id="Run_the_tests">Run the tests</h3><p>Run this test using</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="built_in">run</span> test</span><br><span class="line"><span class="comment"># 1 passing (43ms)</span></span><br></pre></td></tr></table></figure>
<h3 id="Writing_a_second_test">Writing a second test</h3><p>Before we go, let’s write a second test that check that the test has changed when a button is clicked:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    renderIntoDocument,</span><br><span class="line">    scryRenderedDOMComponentsWithTag,</span><br><span class="line">    findRenderedDOMComponentWithClass,</span><br><span class="line">    Simulate</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-addons-test-utils'</span>;</span><br><span class="line"><span class="keyword">import</span> Component <span class="keyword">from</span> <span class="string">'../src/Component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;expect&#125; <span class="keyword">from</span> <span class="string">'chai'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'Component'</span>, () =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// [...]</span></span><br><span class="line"></span><br><span class="line">    it(<span class="string">'changes the displayed text when button is clicked'</span>, () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> component = renderIntoDocument(</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">Component</span> <span class="attr">options</span>=<span class="string">&#123;['Bleach',</span> '<span class="attr">Nevermind</span>', '<span class="attr">In</span> <span class="attr">Utero</span>']&#125; /&gt;</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        const displayText = findRenderedDOMComponentWithClass(component, 'display-text');</span><br><span class="line">        const buttons = scryRenderedDOMComponentsWithTag(component, 'button');</span><br><span class="line"></span><br><span class="line">        Simulate.click(buttons[0]);</span><br><span class="line">        expect(displayText.textContent).to.equal('Bleach');</span><br><span class="line"></span><br><span class="line">        Simulate.click(buttons[1]);</span><br><span class="line">        expect(displayText.textContent).to.equal('Nevermind');</span><br><span class="line"></span><br><span class="line">        Simulate.click(buttons[2]);</span><br><span class="line">        expect(displayText.textContent).to.equal('In Utero');</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span></span><br></pre></td></tr></table></figure>
<h3 id="Imports-1">Imports</h3><p>Check the imports: we have added two more <a href="https://facebook.github.io/react/docs/test-utils.html" target="_blank" rel="external">react test utils methods</a>:</p>
<ul>
<li><code>findRenderedDOMComponentWithClass</code>: which finds one unique instance of an element based on its css class.</li>
<li><code>Simulate</code>: simulate user interaction, here <code>Simulate.click</code>.</li>
</ul>
<h3 id="Test_Flow-1">Test Flow</h3><p>We start by rendering our <code>Component</code>, then retrieve all the <code>&lt;buttons&gt;</code> and the label with the display text.<br>For each button we simulate a click and check that the text content of the label has changed and matched the button’s text.</p>
<h3 id="Run_the_tests-1">Run the tests</h3><p>Run both our tests using:</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="built_in">run</span> test</span><br><span class="line"><span class="comment"># 2 passing (50ms)</span></span><br></pre></td></tr></table></figure>
<p>Hope you found this tutorial useful, I sure had a great time writing it :)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>In this article you will learn how to setup your environment and get started with React Unit Testing. The setup I am detailing here is inspired by <a href="http://teropa.info/blog/2015/09/10/full-stack-redux-tutorial.html#the-client-application">this much longer yet amazing tutorial</a>.</p>
<p>To get the most out of this post, it’s best if you have had some exposure to at least some of these frameworks/tools:</p>
<ul>
<li><strong>Node.js and NPM:</strong> install packages and <a href="/2015/12/Run-scripts-with-npm/">run custom scripts</a></li>
<li><strong>webpack:</strong> Basic configuration to compile code and launch a web server</li>
<li><strong>React:</strong> <a href="/2015/12/Build-your-first-React-application/">Basics of writing components</a></li>
<li><strong>mocha:</strong> Run unit tests with mocha</li>
<li><strong>chai:</strong> Basics of writing unit tests with chai</li>
<li><strong>Babel:</strong> <a href="/2016/02/How-to-setup-Babel6-for-NodeJs/">Compile ES6</a> and React code with Babel</li>
<li><strong>ES6:</strong> <a href="/2016/02/Babel-and-Node-Module-Loader/">Import statement</a> and some of the new additions to the language</li>
</ul>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
      <category term="Babel" scheme="http://klugjo.github.io/tags/Babel/"/>
    
      <category term="ES2015" scheme="http://klugjo.github.io/tags/ES2015/"/>
    
      <category term="ES6" scheme="http://klugjo.github.io/tags/ES6/"/>
    
      <category term="React" scheme="http://klugjo.github.io/tags/React/"/>
    
      <category term="TDD" scheme="http://klugjo.github.io/tags/TDD/"/>
    
      <category term="Webpack" scheme="http://klugjo.github.io/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Best git log aliases]]></title>
    <link href="http://klugjo.github.io/2016/02/Best-git-log-aliases/"/>
    <id>http://klugjo.github.io/2016/02/Best-git-log-aliases/</id>
    <published>2016-02-29T08:38:44.000Z</published>
    <updated>2016-02-29T09:57:16.000Z</updated>
    <content type="html"><![CDATA[<p>This article looks at the best log aliases I use. Some I have found, some I have created and after reading you should be able to create your own easily.</p>
<p>Please feel free to submit your own in the comments below.<br><a id="more"></a></p>
<h2 id="Add_an_alias">Add an alias</h2><p>To add aliases, open your <code>.gitconfig</code> file and you will see an alias section:</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">alias</span>]</span><br><span class="line">	ac = !git <span class="keyword">add </span>. &amp;&amp; git commit -am</span><br></pre></td></tr></table></figure>
<p>If you are on OSX, open a new command prompt and type:</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span> .gitconfig</span><br></pre></td></tr></table></figure>
<p>To use the alias, simply type:</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git</span> aliasname</span><br></pre></td></tr></table></figure>
<h2 id="Log_aliases">Log aliases</h2><p>In no particular order:</p>
<h3 id="1_-_One_liner_with_colors">1 - One liner with colors</h3><p>Will log a list of commits, all on one line with customisable colours. Useful to know who has changed what on the repo recently.</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l1 = <span class="keyword">log</span> --pretty=<span class="keyword">format</span>:<span class="string">"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]"</span> --decorate --date=short</span><br></pre></td></tr></table></figure>
<p><a href="https://gist.github.com/mwhite/6887990" target="_blank" rel="external">Source</a></p>
<h3 id="2_-_Graph_one_liner">2 - Graph one liner</h3><p>Will log a list of commits with only the commit name and SHA. Useful to have a quick overview of the branches on the repo. I usually use the web UI for this, but this can be quicker if all you need is to refresh your memory.</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">l2</span> <span class="comment">=</span> <span class="comment">log</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">graph</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oneline</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">decorate</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">all</span></span><br></pre></td></tr></table></figure>
<p><a href="http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/" target="_blank" rel="external">Source</a> (first comment)</p>
<h3 id="3_-_Search_commit_name_history">3 - Search commit name history</h3><p>Will search previous commits for a specific term. Useful if you want to find a specific comment based on the comment.</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">l3</span> = !git log --<span class="literal">on</span>eline | grep</span><br></pre></td></tr></table></figure>
<p>Use it like this</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> l3 JIRA <span class="comment"># Will display all commits with 'JIRA' in the description</span></span><br></pre></td></tr></table></figure>
<h3 id="4_-_Details_about_the_last_commit">4 - Details about the last commit</h3><p>Will show all the differences introduced in the last commit.</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">l4</span> = log -p -<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="5_-_Get_commits_for_n_days_before_today">5 - Get commits for n days before today</h3><p>Another one by myself. It makes use of functions and displays the list of commits made before X days ago.</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l5 = <span class="string">"!f() &#123; \</span><br><span class="line">        git log --after=\"</span>$(date -j -v-$1d +<span class="meta">%Y</span>-<span class="meta">%m</span>-<span class="meta">%d</span>)\<span class="string">" --oneline; \</span><br><span class="line">    &#125;; f"</span></span><br></pre></td></tr></table></figure>
<p>Use it like this</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git l5 15 <span class="comment"># Get the commits made in the last 15 days</span></span><br></pre></td></tr></table></figure>
<h2 id="Summary">Summary</h2><p>I hope you found these useful, I will add more as I go.</p>
<p>Here is the list so far:</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">l1 = <span class="keyword">log</span> --pretty=<span class="keyword">format</span>:<span class="string">"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]"</span> --decorate --date=short</span><br><span class="line">l2 = <span class="keyword">log</span> --graph --oneline --decorate --all</span><br><span class="line">l3 = !git <span class="keyword">log</span> --oneline | <span class="keyword">grep</span></span><br><span class="line">l4 = <span class="keyword">log</span> -p -<span class="number">1</span></span><br><span class="line">l5 = <span class="string">"!f() &#123; \</span><br><span class="line">        git log --after=\"$(date -j -v-$1d +%Y-%m-%d)\" --oneline; \</span><br><span class="line">    &#125;; f"</span></span><br></pre></td></tr></table></figure>
<p>Thanks for reading !</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This article looks at the best log aliases I use. Some I have found, some I have created and after reading you should be able to create your own easily.</p>
<p>Please feel free to submit your own in the comments below.<br>]]>
    
    </summary>
    
      <category term="Git" scheme="http://klugjo.github.io/tags/Git/"/>
    
      <category term="Log" scheme="http://klugjo.github.io/tags/Log/"/>
    
      <category term="Alias" scheme="http://klugjo.github.io/tags/Alias/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Copy an Array into itself in JavaScript ES6/2015]]></title>
    <link href="http://klugjo.github.io/2016/02/Copy-an-Array-into-itself-in-JavaScript-ES6-2015/"/>
    <id>http://klugjo.github.io/2016/02/Copy-an-Array-into-itself-in-JavaScript-ES6-2015/</id>
    <published>2016-02-24T09:42:32.000Z</published>
    <updated>2016-02-26T00:58:11.000Z</updated>
    <content type="html"><![CDATA[<p>Part of the additions to ES6 is an array method called <code>copyWithin</code>:<br><a id="more"></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.copyWithin(target, start[, end = <span class="keyword">this</span>.length])</span><br></pre></td></tr></table></figure>
<p>The function takes a section of the array and copies it to another place within the array.</p>
<ul>
<li><code>target</code>: index where to copy the elements</li>
<li><code>start</code>: beginning of section to copy</li>
<li><code>end</code>: end of section to copy. Optional, if not specified the section will go to the end of the array</li>
</ul>
<h3 id="Example">Example</h3><p>m<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].copyWithin(<span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// Result: [0, 1, 2, 3, 1, 2]</span></span><br></pre></td></tr></table></figure></p>
<p>Here is a visual representation of what happens:</p>
<p><img src="https://s3.amazonaws.com/klugjo.github.io/array-copywithin-es6-explanation.png" alt="Array copyWithin visual explanation"></p>
<h3 id="Remarks">Remarks</h3><ul>
<li>As expected parameters are 0 based indexes.</li>
<li>The <code>copyWithin</code> modifies the array itself, it does not return a copy of it.</li>
<li>The array size if not modified, <code>copyWithin</code> only copies what fits.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Part of the additions to ES6 is an array method called <code>copyWithin</code>:<br>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
      <category term="ES2015" scheme="http://klugjo.github.io/tags/ES2015/"/>
    
      <category term="ES6" scheme="http://klugjo.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Basic git log commands]]></title>
    <link href="http://klugjo.github.io/2016/02/Basic-git-log-commands/"/>
    <id>http://klugjo.github.io/2016/02/Basic-git-log-commands/</id>
    <published>2016-02-23T13:56:49.000Z</published>
    <updated>2016-02-23T13:58:31.000Z</updated>
    <content type="html"><![CDATA[<p>In this article you will learn a few useful commands to check the activity on your repo.</p>
<a id="more"></a>
<h2 id="git_log">git log</h2><p>Get your repo history by using </p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<h2 id="Get_more_commit_details">Get more commit details</h2><p>In certain circumstances, you might want to get more detail on some commits.</p>
<p>Use the <code>-p</code> flag to see all the differences introduced in each commit</p>
<p>Use the <code>-2</code> to see the last 2 commits only</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log -<span class="selector-tag">p</span> -<span class="number">2</span></span><br></pre></td></tr></table></figure>
<h2 id="Get_less_commit_details">Get less commit details</h2><p>In other situations, you want to have less commit details and more of an overview of what is going on in your repo.</p>
<p>The <code>--oneline</code> flag will help you get a list of commits on one line</p>
<p>The <code>--graph</code> flag will display a graph that shows to which branches the commits were made</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> <span class="comment">--oneline --graph</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>In this article you will learn a few useful commands to check the activity on your repo.</p>]]>
    
    </summary>
    
      <category term="Git" scheme="http://klugjo.github.io/tags/Git/"/>
    
      <category term="Bash" scheme="http://klugjo.github.io/tags/Bash/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How to use a custom domain with your github pages site]]></title>
    <link href="http://klugjo.github.io/2016/02/How-to-use-a-custom-domain-with-your-github-pages-site/"/>
    <id>http://klugjo.github.io/2016/02/How-to-use-a-custom-domain-with-your-github-pages-site/</id>
    <published>2016-02-22T10:39:16.000Z</published>
    <updated>2016-02-22T11:29:30.000Z</updated>
    <content type="html"><![CDATA[<p>This article goes through the process of setting up a custom domain for a github pages website.</p>
<a id="more"></a>
<h2 id="Pre_requisites">Pre requisites</h2><p>This article assumes that you already have a github pages website up and running. Mine is <a href="https://github.com/klugjo/klugjo.github.io" target="_blank" rel="external">klugjo.github.io</a>.</p>
<h2 id="Create_the_github_CNAME_file">Create the github CNAME file</h2><p>In order to use a custom domain, you need to let Github know about it with the help of a CNAME file:</p>
<ul>
<li>Create a file names <code>CNAME</code> at the root of your website. The file name has to be all Caps.</li>
<li>Inside that file, input your custom domain name <u>without</u> <code>http(s)://</code>.<br><a href="https://github.com/klugjo/klugjo.github.io/blob/master/CNAME" target="_blank" rel="external">My CNAME file</a> contains: </li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www<span class="selector-class">.codeblocq</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Commit and push your changes</li>
</ul>
<p>That is it for the configuration on the github side.</p>
<h2 id="Setup_the_DNS_provider">Setup the DNS provider</h2><p>You can contact your DNS provider for help on how to configure an A record but this is how I configured mine:</p>
<p><img src="https://s3.amazonaws.com/klugjo.github.io/github-pages-custom-domain.png" alt="DNS provider configuration github pages custom domain"></p>
<p>The <code>CNAME</code> record for www is set to <strong>klugjo.github.io</strong>. The role of a CNAME record is to map a name to another name. Useful when the IP address of the host is not know or not stable.</p>
<p>The URL record is set to <a href="http://www.codeblocq.com" target="_blank" rel="external">http://www.codeblocq.com</a> in order to redirect all traffic to the www site.</p>
<h2 id="Notes">Notes</h2><ul>
<li>You can only setup one custom domain in the CNAME file on github. <a href="https://help.github.com/articles/about-supported-custom-domains/" target="_blank" rel="external">See what are the supported custom domains</a>.</li>
<li>Read <a href="https://help.github.com/articles/setting-up-an-apex-domain/" target="_blank" rel="external">this article</a> if you need to configure an A record with your DNS provider.</li>
<li>If you still can’t get it right, check out <a href="https://help.github.com/articles/troubleshooting-custom-domains/" target="_blank" rel="external">this troubleshooting guide</a>.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>This article goes through the process of setting up a custom domain for a github pages website.</p>]]>
    
    </summary>
    
      <category term="Github" scheme="http://klugjo.github.io/tags/Github/"/>
    
      <category term="Custom Domain" scheme="http://klugjo.github.io/tags/Custom-Domain/"/>
    
      <category term="DNS Provider" scheme="http://klugjo.github.io/tags/DNS-Provider/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Babel and Node Module Loader]]></title>
    <link href="http://klugjo.github.io/2016/02/Babel-and-Node-Module-Loader/"/>
    <id>http://klugjo.github.io/2016/02/Babel-and-Node-Module-Loader/</id>
    <published>2016-02-20T01:26:03.000Z</published>
    <updated>2016-03-03T07:36:30.000Z</updated>
    <content type="html"><![CDATA[<p>This article will show you how to get started with ES6 modules in node with Babel.<br><a id="more"></a><br>If you need to setup your environment, check out <a href="/2016/02/How-to-setup-Babel6-for-NodeJs/">this article</a>.</p>
<h2 id="Exports">Exports</h2><p>In your library, export functions and classes this way:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ----------</span></span><br><span class="line"><span class="comment">// module1.js</span></span><br><span class="line"><span class="comment">// ----------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> life = <span class="string">"42"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(color) &#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getCarColor() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Imports">Imports</h2><h3 id="Import_specific">Import specific</h3><p>You can specify which value you wish to import using the following syntax:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;life, add <span class="keyword">as</span> addition&#125; <span class="keyword">from</span> <span class="string">'./module1'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(life); <span class="comment">// 42</span></span><br><span class="line"><span class="built_in">console</span>.log(addition(<span class="number">1</span>,<span class="number">1</span>)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>Note how you can use <code>as</code> to change the name of some of the values.</p>
<h3 id="Import_all">Import all</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module1 <span class="keyword">from</span> <span class="string">'./module1'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car = <span class="keyword">new</span> module1.Car(<span class="string">"blue"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(car.getCarColor()); <span class="comment">// blue</span></span><br></pre></td></tr></table></figure>
<h2 id="Default_export">Default export</h2><p>If your module only has one value to export, use <code>default</code> when exporting that value.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Export - myModule.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Import</span></span><br><span class="line"><span class="keyword">import</span> myFunc <span class="keyword">from</span> <span class="string">'./myModule'</span>;</span><br><span class="line">myFunc();</span><br></pre></td></tr></table></figure>
<p>This information should be enough for you to get started with ES6/ES2015 modules. If you need to know more, I would recommend <a href="http://exploringjs.com/es6/ch_modules.html" target="_blank" rel="external">this article</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This article will show you how to get started with ES6 modules in node with Babel.<br>]]>
    
    </summary>
    
      <category term="Node" scheme="http://klugjo.github.io/tags/Node/"/>
    
      <category term="Babel" scheme="http://klugjo.github.io/tags/Babel/"/>
    
      <category term="ES2015" scheme="http://klugjo.github.io/tags/ES2015/"/>
    
      <category term="ES6" scheme="http://klugjo.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How to setup Babel6 for NodeJs]]></title>
    <link href="http://klugjo.github.io/2016/02/How-to-setup-Babel6-for-NodeJs/"/>
    <id>http://klugjo.github.io/2016/02/How-to-setup-Babel6-for-NodeJs/</id>
    <published>2016-02-16T11:58:08.000Z</published>
    <updated>2016-02-20T03:06:48.000Z</updated>
    <content type="html"><![CDATA[<p>This article gives you a basic way of setting up your environment if you want to use ES2015 with Node (using v4.3.0 in this tutorial).<br><a id="more"></a> </p>
<h2 id="Babel_libraries">Babel libraries</h2><p>You will first need:</p>
<ul>
<li><a href="https://babeljs.io/docs/usage/cli/" target="_blank" rel="external">babel-cli</a>: Used to compile files from the command line</li>
<li><a href="http://babeljs.io/docs/usage/api/" target="_blank" rel="external">babel-core</a>: Core API</li>
<li><a href="https://babeljs.io/docs/plugins/preset-es2015/" target="_blank" rel="external">babel-preset-es2015</a>: Collection of all the plugins needed to write ES2015 JavaScript.</li>
</ul>
<p>(Babel in itself does not do anything and it is the plugins that will define what it does.)</p>
<h3 id="Installation">Installation</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev babel-cli babel-core babel-preset-es2015</span><br></pre></td></tr></table></figure>
<h2 id="Babel_configuration">Babel configuration</h2><p>The standard way of configuring Babel is to use a <a href="https://babeljs.io/docs/usage/babelrc/" target="_blank" rel="external">.babelrc</a> file:</p>
<p>Put a <code>.babelrc</code> configuration file at the root of your project. I don’t like to have too much stuff in there and <a href="http://babeljs.io/docs/usage/babelrc/" target="_blank" rel="external">thankfully you can also put your config in <code>package.json</code></a>.</p>
<p>Whichever way you choose, inside your configuration put:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [<span class="string">"es2015"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Testing">Testing</h2><p>Create an <code>index.js</code> file with the following ES2015 code:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> doubles = numbers.map(num =&gt; num * <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(doubles); <span class="comment">//  [2, 8, 18 ]</span></span><br></pre></td></tr></table></figure>
<p>Run it with <code>node index.js</code> and check that everything is working.</p>
<h2 id="Create_a_launcher">Create a launcher</h2><p>When using certain features of ES6, you might encounter an error of type:</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">SyntaxError:</span> Unexpected token</span><br></pre></td></tr></table></figure>
<p>This means you will need to create a launcher for your app that loads <code>&#39;babel-core/register&#39;</code> ahead of your code.</p>
<p>Assuming your entry point is <code>index.js</code>, create the following launcher:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// -----------</span></span><br><span class="line"><span class="comment">// launcher.js</span></span><br><span class="line"><span class="comment">// -----------</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'babel-core/register'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./index'</span>);</span><br></pre></td></tr></table></figure>
<p>Start your app with <code>node launcher.js</code></p>
<p>This will clear the errors.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This article gives you a basic way of setting up your environment if you want to use ES2015 with Node (using v4.3.0 in this tutorial).<br>]]>
    
    </summary>
    
      <category term="Node" scheme="http://klugjo.github.io/tags/Node/"/>
    
      <category term="Babel" scheme="http://klugjo.github.io/tags/Babel/"/>
    
      <category term="ES2015" scheme="http://klugjo.github.io/tags/ES2015/"/>
    
      <category term="ES6" scheme="http://klugjo.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Further minify your CSS with CSSO]]></title>
    <link href="http://klugjo.github.io/2016/02/Further-minify-your-CSS-with-CSSO/"/>
    <id>http://klugjo.github.io/2016/02/Further-minify-your-CSS-with-CSSO/</id>
    <published>2016-02-15T06:44:48.000Z</published>
    <updated>2016-02-15T08:21:53.000Z</updated>
    <content type="html"><![CDATA[<p>Hi there, I just discovered <a href="https://github.com/css/csso" target="_blank" rel="external">CSSO – CSS Optimizer</a> and I thought I would check out how it compares to other css minification tools like <a href="https://github.com/jbleuzen/node-cssmin" target="_blank" rel="external">cssmin</a> which is based on YUI compressor.</p>
<a id="more"></a> 
<h2 id="Installation">Installation</h2><p>Its a node package, installation is as straight forward as:</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> -g csso</span><br></pre></td></tr></table></figure>
<h2 id="Usage">Usage</h2><p>You can minify your CSS by using <code>csso.minify(yourCss)</code>.</p>
<p>Example:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> csso = <span class="built_in">require</span>(<span class="string">'csso'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> compressed = csso.minify(<span class="string">'.test &#123; color: #000000; &#125;'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(compressed); <span class="comment">// .test&#123;color:black&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="Basic_comparison_with_cssmin">Basic comparison with cssmin</h2><p>CSSO does more than just <a href="http://yui.github.io/yuicompressor/css.html" target="_blank" rel="external">remove whitespaces and line breaks</a> which is what cssmin based on YUI compressor does. In my opinion that’s already good enough of a reason to use it. </p>
<p>Let’s look at how good of a job it does.</p>
<h3 id="For_my_quick_test,_I_have_used_2_css_files-">For my quick test, I have used 2 css files.</h3><ul>
<li>Simple CSS File: My blog’s CSS at time of writing is a pretty simple 900 lines css file.</li>
<li>Complex CSS File: <a href="https://github.com/Dogfalo/materialize" target="_blank" rel="external">Materialize</a> main CSS which is a fairly complex 11256 lines stylesheet.</li>
</ul>
<h3 id="Here_are_the_results:">Here are the results:</h3><table>
<thead>
<tr>
<th>Metric</th>
<th style="text-align:center">Simple CSS File</th>
<th style="text-align:center">Complex CSS File</th>
</tr>
</thead>
<tbody>
<tr>
<td>Lines</td>
<td style="text-align:center">842</td>
<td style="text-align:center">11256</td>
</tr>
<tr>
<td>Length</td>
<td style="text-align:center">19133</td>
<td style="text-align:center">201025</td>
</tr>
<tr>
<td>cssmin length (characters)</td>
<td style="text-align:center">15431</td>
<td style="text-align:center">147778</td>
</tr>
<tr>
<td>csso length (characters)</td>
<td style="text-align:center">15405</td>
<td style="text-align:center">145423</td>
</tr>
<tr>
<td>cssmin compression (%)</td>
<td style="text-align:center">19.3%</td>
<td style="text-align:center">26.5%</td>
</tr>
<tr>
<td>csso compression (%)</td>
<td style="text-align:center">19.5%</td>
<td style="text-align:center">27.7%</td>
</tr>
</tbody>
</table>
<p>CSSO does a bit better than cssmin but the difference is negligible. I certainly wouldn’t go ahead and change my current projects over to CSSO but I will give CSSO a try for my next project.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Hi there, I just discovered <a href="https://github.com/css/csso">CSSO – CSS Optimizer</a> and I thought I would check out how it compares to other css minification tools like <a href="https://github.com/jbleuzen/node-cssmin">cssmin</a> which is based on YUI compressor.</p>]]>
    
    </summary>
    
      <category term="Build" scheme="http://klugjo.github.io/tags/Build/"/>
    
      <category term="CSS" scheme="http://klugjo.github.io/tags/CSS/"/>
    
      <category term="node" scheme="http://klugjo.github.io/tags/node/"/>
    
      <category term="CssMin" scheme="http://klugjo.github.io/tags/CssMin/"/>
    
      <category term="CSSO" scheme="http://klugjo.github.io/tags/CSSO/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Stash your changes before switching branch with Git]]></title>
    <link href="http://klugjo.github.io/2016/02/Stash-your-changes-before-switching-branch/"/>
    <id>http://klugjo.github.io/2016/02/Stash-your-changes-before-switching-branch/</id>
    <published>2016-02-10T07:45:39.000Z</published>
    <updated>2016-02-11T12:36:58.000Z</updated>
    <content type="html"><![CDATA[<p>Common everyday scenario: you are working on your feature branch fixing a bug and your boss asks you for a build. You need to switch back to your main dev branch. Before that happens, you have to take care of all your current changes. You can either commit if you are ready for it, or maybe you have only modified a few lines and can simply revert your changes. </p>
<p>Well there is a better solution: git stash.<br><a id="more"></a> </p>
<h2 id="Setting_up_the_stage">Setting up the stage</h2><p>We have 2 files: <code>file1.txt</code> and <code>file2.txt</code> and 2 branches, <code>master</code> and <code>new-branch</code>.</p>
<p>If you want to follow along here is the script</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir testgitstash <span class="comment"># create directory</span></span><br><span class="line"><span class="built_in">cd</span> testgitstash <span class="comment"># change to that directory</span></span><br><span class="line">git init <span class="comment"># init git repo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">test</span>1 &gt; file1.txt <span class="comment"># create 2 files</span></span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">test</span>2 &gt; file2.txt</span><br><span class="line">git add . <span class="comment"># add both files</span></span><br><span class="line">git commit -m <span class="string">"Initial commit"</span> <span class="comment"># commit both files</span></span><br><span class="line">git checkout -b new-branch <span class="comment"># create a new branch and switch to that branch</span></span><br></pre></td></tr></table></figure>
<p>On top of that you have some pending changes on new-branch</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> change &gt; file1.txt <span class="comment"># change file1</span></span><br><span class="line">git commit -am <span class="string">"update"</span> <span class="comment"># commit change</span></span><br><span class="line"><span class="built_in">echo</span> change2 &gt; file1.txt <span class="comment"># change file1 again</span></span><br></pre></td></tr></table></figure>
<h2 id="The_problem">The problem</h2><p>If you want to switch back to <code>master</code>, you will get an error message:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">error: Your <span class="built_in">local</span> changes to the following files would be overwritten by checkout: </span><br><span class="line">    file1.txt</span><br><span class="line">Please, commit your changes or stash them before you can switch branches.</span><br><span class="line"></span><br><span class="line">Aborting</span><br></pre></td></tr></table></figure>
<p>Git does not allow you to switch back to <code>master</code> because you have changes on <code>new-branch</code>.</p>
<h2 id="One_solution:_git_stash">One solution: <code>git stash</code></h2><h3 id="Stash_the_changes">Stash the changes</h3><p>Instead of committing your changes or reverting, you can stash them with:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash save <span class="string">"changes on new-branch"</span></span><br></pre></td></tr></table></figure>
<h3 id="Switch_branch">Switch branch</h3><p>You can now switch back to <code>master</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br></pre></td></tr></table></figure>
<p>Do whatever changes you want on master, and when ready, go back to <code>new-branch</code>.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout new-branch</span><br></pre></td></tr></table></figure>
<h3 id="Unstash_the_changes">Unstash the changes</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure>
<p>Your changes will be put back and you can continue what you were doing initially.</p>
<h2 id="Notes">Notes</h2><h3 id="-_Your_changes_are_stashed_on_a_stack">- Your changes are stashed on a stack</h3><p>You can stack several changes and check the current stash stack using:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash list</span><br></pre></td></tr></table></figure>
<p>You can also unstash a specific stash by using</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash pop <span class="string">"stash@&#123;1&#125;"</span></span><br></pre></td></tr></table></figure>
<h3 id="-_Git_stash_pop_can_be_split_in_two">- Git stash pop can be split in two</h3><p>Git stash pop is the combination of two other commands:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash apply</span><br></pre></td></tr></table></figure>
<p>which applies the last stash and:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash drop</span><br></pre></td></tr></table></figure>
<p>which destroys the last stash</p>
<p><br><br>Hope this helped, there would be much more to say on this suject but I hope this will give you a place to start :)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Common everyday scenario: you are working on your feature branch fixing a bug and your boss asks you for a build. You need to switch back to your main dev branch. Before that happens, you have to take care of all your current changes. You can either commit if you are ready for it, or maybe you have only modified a few lines and can simply revert your changes. </p>
<p>Well there is a better solution: git stash.<br>]]>
    
    </summary>
    
      <category term="Git" scheme="http://klugjo.github.io/tags/Git/"/>
    
      <category term="Bash" scheme="http://klugjo.github.io/tags/Bash/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CodeBlocQ</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.codeblocq.com/"/>
  <updated>2017-11-08T00:24:19.000Z</updated>
  <id>http://www.codeblocq.com/</id>
  
  <author>
    <name>Jonathan Klughertz</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Notes on Anything You Want by Derek Sivers</title>
    <link href="http://www.codeblocq.com/2017/11/Notes-on-Anything-You-Want-by-Derek-Sivers/"/>
    <id>http://www.codeblocq.com/2017/11/Notes-on-Anything-You-Want-by-Derek-Sivers/</id>
    <published>2017-11-08T00:17:51.000Z</published>
    <updated>2017-11-08T00:24:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>Big fan of Derek Sivers as I have already mentionned, I really enjoyed this short and super easy to digest book.<br>It is the kind of book that you open to see what it looks like and 2 hours later (1 hours if you are not as slow as I am) you realise that you have finished it.</p>
<p>Through 40 stories turned lessons, Derek puts down all his learnings from creating, running and selling his internet business CD Baby.</p>
<p>The book is at the same time very easy to read and understand as well as packed to the brim with deep and original concepts. Derek exposes a very human, humble way to run a company, far away from the usual startup or corporate discourse. It shows that it is possible to do without investors, to respect your customers (really), and to enjoy the process of building a business (really although not always).</p>
<p>All in all I really appreciated how honnest the book was. I never felt like that book was over analysing, exagerating or embellishing facts like some other ‘business books’ will, mostly to increase sales.</p>
<p>Key Take aways</p>
<p>The book is packed with gems but here are a few that resonated with me:</p>
<ul>
<li><p>Never build anything nobody asked you for. There was never a business plan (in someone’s head) that resisted the first contact with a customer. You can never know what will be useful to others until someone told you they need it. Get out of your own head and go ask people what they want before spending hours and thousands of dollars building anything.</p>
</li>
<li><p>You can be the boss without having to do bossy things. If you have built a company from scratch and suddenly end up with 50 employees, chances are your responsibilities have changed quite a bit. Maybe you are a maker type of guy and now you spend 100% of your time managing employees. Well if you don’t enjoy it, you don’t have to. If what you like is programming, put someone else in place and isolate yourself to do what you like and where you will be the most useful for the organisation.</p>
</li>
<li><p>Know your north star and what you want to be. Never follow other people’s dream or society’s idea of what’s acceptable. just follow your guts and be who you want to be.</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Big fan of Derek Sivers as I have already mentionned, I really enjoyed this short and super easy to digest book.&lt;br&gt;It is the kind of boo
    
    </summary>
    
    
      <category term="Books" scheme="http://www.codeblocq.com/tags/Books/"/>
    
      <category term="Business" scheme="http://www.codeblocq.com/tags/Business/"/>
    
      <category term="Self-Help" scheme="http://www.codeblocq.com/tags/Self-Help/"/>
    
  </entry>
  
  <entry>
    <title>Quicksort JavaScript Implementation</title>
    <link href="http://www.codeblocq.com/2017/10/Quicksort-JavaScript-Implementation/"/>
    <id>http://www.codeblocq.com/2017/10/Quicksort-JavaScript-Implementation/</id>
    <published>2017-10-24T14:11:32.000Z</published>
    <updated>2017-10-24T14:18:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>Here is my ES6 implementation of the QuickSort Algorithm.</p>
<p>If you need more information on how Quicksort works, check out this <a href="https://www.youtube.com/watch?v=SLauY6PpjW4" target="_blank" rel="external">HackerRank video</a>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> quicksort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</div><div class="line">  quicksortStep(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> quicksortStep = <span class="function">(<span class="params">arr, left, right</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span> (left &gt;= right) &#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">const</span> pivot = <span class="built_in">Math</span>.floor((left + right) / <span class="number">2</span>);</div><div class="line">  <span class="keyword">const</span> index = partition(arr, left, right, arr[pivot]);</div><div class="line">  quicksortStep(arr, left, index - <span class="number">1</span>);</div><div class="line">  quicksortStep(arr, index, right);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> partition = <span class="function">(<span class="params">arr, left, right, pivot</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">while</span> (left &lt;= right) &#123;</div><div class="line">    <span class="keyword">while</span> (arr[left] &lt; pivot) &#123;</div><div class="line">      left = left + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">while</span> (pivot &lt; arr[right]) &#123;</div><div class="line">      right = right - <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (left &lt;= right) &#123;</div><div class="line">      swap(arr, left, right);</div><div class="line">      left = left + <span class="number">1</span>;</div><div class="line">      right = right - <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> left;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> swap = <span class="function">(<span class="params">arr, i, j</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> temp = arr[i];</div><div class="line">  arr[i] = arr[j];</div><div class="line">  arr[j] = temp;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> arr1 = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>];</div><div class="line">quicksort(arr1);</div><div class="line"><span class="built_in">console</span>.log(arr1);</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">const</span> arr2 = [];</div><div class="line">quicksort(arr2);</div><div class="line"><span class="built_in">console</span>.log(arr2);</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">const</span> arr3 = [<span class="number">3</span>];</div><div class="line">quicksort(arr3);</div><div class="line"><span class="built_in">console</span>.log(arr3);</div><div class="line"></div><div class="line"><span class="keyword">const</span> arr4 = [<span class="number">4</span>,<span class="number">3</span>];</div><div class="line">quicksort(arr4);</div><div class="line"><span class="built_in">console</span>.log(arr4);</div><div class="line"></div><div class="line"><span class="keyword">const</span> arr5 = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>];</div><div class="line">quicksort(arr5);</div><div class="line"><span class="built_in">console</span>.log(arr5);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Here is my ES6 implementation of the QuickSort Algorithm.&lt;/p&gt;
&lt;p&gt;If you need more information on how Quicksort works, check out this &lt;a h
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.codeblocq.com/tags/JavaScript/"/>
    
      <category term="leet" scheme="http://www.codeblocq.com/tags/leet/"/>
    
      <category term="Sorting" scheme="http://www.codeblocq.com/tags/Sorting/"/>
    
  </entry>
  
  <entry>
    <title>How to receive messages from web sockets using redux-saga</title>
    <link href="http://www.codeblocq.com/2017/08/How-to-receive-messages-from-web-sockets-using-redux-saga/"/>
    <id>http://www.codeblocq.com/2017/08/How-to-receive-messages-from-web-sockets-using-redux-saga/</id>
    <published>2017-08-02T13:17:33.000Z</published>
    <updated>2017-08-08T13:21:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>I have just had to implement this and found it hard to come across a simple working solution out there.</p>
<p>So here is mine:</p>
<h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>Let’s consider the following <code>WebSocket</code> object:</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> mySocket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://www.xyz.com/socketServer"</span>, <span class="string">"protocol"</span>);</div></pre></td></tr></table></figure>
<p>We can listen to incoming messages with</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mySocket.onmessage = <span class="function"><span class="params">(message)</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(message.data);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>and close the websocket with</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mySocket.close()<span class="comment">;</span></div></pre></td></tr></table></figure>
<h2 id="Setup-redux-saga"><a href="#Setup-redux-saga" class="headerlink" title="Setup redux-saga"></a>Setup redux-saga</h2><p>To listen recurring events, saga provides an <a href="https://github.com/redux-saga/redux-saga/blob/master/docs/advanced/Channels.md" target="_blank" rel="external">eventChannel</a> object.</p>
<h3 id="Basic-usage"><a href="#Basic-usage" class="headerlink" title="Basic usage"></a>Basic usage</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1- Create a channel that listens to messages from the server</span></div><div class="line"><span class="keyword">const</span> channel = <span class="function"><span class="keyword">yield</span> <span class="title">call</span>(<span class="params">createEventChannel</span>)</span>;</div><div class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">  <span class="comment">// 2- wait for the next message from the server</span></div><div class="line">  <span class="keyword">const</span> &#123;message&#125; = <span class="function"><span class="keyword">yield</span> <span class="title">take</span>(<span class="params"> channel</span>)</span>;</div><div class="line">  <span class="comment">// 3- Send the message payload to the reducer</span></div><div class="line">  <span class="function"><span class="keyword">yield</span> <span class="title">put</span>(<span class="params">&#123;type: WEBSOCKET_MESSAGE_RECEIVED, message&#125;</span>)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Once the channel is created (we will get there in a second), we can use <code>yield take(channel)</code> to listen to the message received. By putting that call in a <code>while(true) {...}</code> loop we can be listening to messages forever.</p>
<h3 id="Create-the-Event-Channel"><a href="#Create-the-Event-Channel" class="headerlink" title="Create the Event Channel"></a>Create the Event Channel</h3><p>The eventChannel takes a callback parameter with an emit argument to put messages onto the <code>eventChannel</code>. This callback function should return another function to be executed when the connection is closed.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createEventChannel</span> (<span class="params">socket</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> eventChannel(<span class="function"><span class="params">emit</span> =&gt;</span> &#123;</div><div class="line">    <span class="comment">// call emit when a message is received</span></div><div class="line">    mySocket.onmessage(<span class="function">(<span class="params">message</span>) =&gt;</span> emit(message.data));</div><div class="line"></div><div class="line">    <span class="comment">// Return a function to be called when done listening</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      mySocket.close();</div><div class="line">    &#125;;</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Plug in that function in the example above and you are ready to go.</p>
<h2 id="Full-Working-Example"><a href="#Full-Working-Example" class="headerlink" title="Full Working Example"></a>Full Working Example</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// mySaga.js</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;takeEvery, eventChannel&#125; <span class="keyword">from</span> <span class="string">'redux-saga'</span>;</div><div class="line"><span class="keyword">import</span> &#123;put, call, take&#125; <span class="keyword">from</span> <span class="string">'redux-saga/effects'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;INITIALIZE_WEB_SOCKETS_CHANNEL, WEBSOCKET_MESSAGE_RECEIVED&#125; <span class="keyword">from</span> <span class="string">'../actions'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">createEventChannel</span>(<span class="params">mySocket</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> eventChannel(<span class="function"><span class="params">emit</span> =&gt;</span> &#123;</div><div class="line">    mySocket.onmessage(<span class="function">(<span class="params">message</span>) =&gt;</span> emit(message.data));</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      mySocket.close();</div><div class="line">    &#125;;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">initializeWebSocketsChannel</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> mySocket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://www.xyz.com/socketServer"</span>, <span class="string">"protocol"</span>);</div><div class="line">  <span class="keyword">const</span> channel = <span class="keyword">yield</span> call(createEventChannel, mySocket);</div><div class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">    <span class="keyword">const</span> &#123;message&#125; = <span class="keyword">yield</span> take(channel);</div><div class="line">    <span class="keyword">yield</span> put(&#123;<span class="attr">type</span>: WEBSOCKET_MESSAGE_RECEIVED, message&#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span>* <span class="title">mySaga</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> [</div><div class="line">    takeEvery(<span class="string">'INITIALIZE_WEB_SOCKETS_CHANNEL'</span>, initializeWebSocketsChannel)</div><div class="line">  ];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Hope that helps !</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I have just had to implement this and found it hard to come across a simple working solution out there.&lt;/p&gt;
&lt;p&gt;So here is mine:&lt;/p&gt;
&lt;h2 i
    
    </summary>
    
    
      <category term="redux" scheme="http://www.codeblocq.com/tags/redux/"/>
    
      <category term="saga" scheme="http://www.codeblocq.com/tags/saga/"/>
    
      <category term="websockets" scheme="http://www.codeblocq.com/tags/websockets/"/>
    
  </entry>
  
  <entry>
    <title>Save All by Default in VSCode</title>
    <link href="http://www.codeblocq.com/2017/03/Save-All-by-Default-in-VSCode/"/>
    <id>http://www.codeblocq.com/2017/03/Save-All-by-Default-in-VSCode/</id>
    <published>2017-03-27T14:09:10.000Z</published>
    <updated>2017-03-27T14:14:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>By Default VSCode only saves the current file when hitting Ctrl+S. Over time, I got used to Ctrl+S saving all the modified files in the project. Here is how to setup the same behavior in VSCode.</p>
<p>Go to</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">File</span> &gt; Preferences &gt; <span class="built_in">Keyboard</span> Shortcuts</div></pre></td></tr></table></figure>
<p>In the <code>keybindings.json</code> where you can put your overrides, use the following:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123; <span class="attr">"key"</span>: <span class="string">"ctrl+k s"</span>, <span class="attr">"command"</span>: <span class="string">"workbench.action.files.save"</span> &#125;,</div><div class="line">    &#123; <span class="attr">"key"</span>: <span class="string">"ctrl+s"</span>, <span class="attr">"command"</span>: <span class="string">"workbench.action.files.saveAll"</span> &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>This will invert the shortcuts for the <code>Save</code> and <code>Save All</code> actions. From now on, <code>Ctrl+S</code> will save all the modified files.</p>
<p>Such a time saver when refreshing your build only to realise you forgot to save one of the files ;)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;By Default VSCode only saves the current file when hitting Ctrl+S. Over time, I got used to Ctrl+S saving all the modified files in the p
    
    </summary>
    
    
      <category term="VSCode" scheme="http://www.codeblocq.com/tags/VSCode/"/>
    
      <category term="Tools" scheme="http://www.codeblocq.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Configure Jest Test Location</title>
    <link href="http://www.codeblocq.com/2017/02/Configure-Jest-Test-Location/"/>
    <id>http://www.codeblocq.com/2017/02/Configure-Jest-Test-Location/</id>
    <published>2017-02-25T15:44:03.000Z</published>
    <updated>2017-03-02T13:20:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>Quick article to help look at the right place when configuring your tests in Jest.</p>
<h2 id="Default-test-files-location"><a href="#Default-test-files-location" class="headerlink" title="Default test files location"></a>Default test files location</h2><p>The first time I read through the configuration I thought that the paths to my tests were configured using <a href="https://facebook.github.io/jest/docs/configuration.html#testpathdirs-array-string" target="_blank" rel="external">testPathDirs
</a>. It turns out that this property is only used to restraint the places Jest will look for tests to sub modules.</p>
<p>The important thing to note is that by default:</p>
<p><strong>Jest will look for <code>’js</code> and <code>.jsx</code> files inside of <code>__tests__</code> folders.</strong></p>
<h2 id="Use-a-custom-location"><a href="#Use-a-custom-location" class="headerlink" title="Use a custom location"></a>Use a custom location</h2><p>This is the <em>default</em> that needs to change. To do so, use <a href="https://facebook.github.io/jest/docs/configuration.html#testregex-string" target="_blank" rel="external">testRegex</a>.</p>
<p>For example, if you want to store all your test files inside a <code>./tests</code> folder, the only jest configuration option you are going to need is:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">“jest”: &#123;</div><div class="line">  <span class="string">"testRegex"</span>: <span class="string">"tests/.*\\.(js|jsx)$"</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Quick article to help look at the right place when configuring your tests in Jest.&lt;/p&gt;
&lt;h2 id=&quot;Default-test-files-location&quot;&gt;&lt;a href=&quot;#Def
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.codeblocq.com/tags/JavaScript/"/>
    
      <category term="React" scheme="http://www.codeblocq.com/tags/React/"/>
    
      <category term="Jest" scheme="http://www.codeblocq.com/tags/Jest/"/>
    
      <category term="Unit Tests" scheme="http://www.codeblocq.com/tags/Unit-Tests/"/>
    
  </entry>
  
  <entry>
    <title>Notes on Turning Pro by Steven Pressfield</title>
    <link href="http://www.codeblocq.com/2017/02/Notes-on-Turning-Pro-by-Steven-Pressfield/"/>
    <id>http://www.codeblocq.com/2017/02/Notes-on-Turning-Pro-by-Steven-Pressfield/</id>
    <published>2017-02-23T14:20:36.000Z</published>
    <updated>2017-02-23T15:05:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="First-impressions"><a href="#First-impressions" class="headerlink" title="First impressions"></a>First impressions</h2><p>A while ago I read The <a href="http://www.goodreads.com/book/show/1319.The_War_of_Art" target="_blank" rel="external">War of Art</a> which seems to be Pressfield’s most famous book. It is highly recommended by <a href="https://simpleprogrammer.com/" target="_blank" rel="external">John Sonmez</a>.<br><a id="more"></a></p>
<p>I thought the book was great although not life changing. It explains how to beat <em>Resistance</em>, this force that prevents us from accomplishing our goals. <a href="https://www.amazon.com/Turning-Pro-Inner-Power-Create/dp/1936891034" target="_blank" rel="external">Turning Pro</a> is a follow up on the War of Art and I am happy to say that I found it a lot clearer and motivational. This book details how amateur and pro behaviours differ in all sorts of situations and how both deal with life changing decisions. </p>
<p>It is a quick and easy read but the book packs a huge punch. Worth it.</p>
<blockquote>
<p>The Amateur tweets. The Pro works.</p>
</blockquote>
<h2 id="Notes-and-Takeaways"><a href="#Notes-and-Takeaways" class="headerlink" title="Notes and Takeaways"></a>Notes and Takeaways</h2><h3 id="Don’t-be-a-shadow-of-yourself"><a href="#Don’t-be-a-shadow-of-yourself" class="headerlink" title="Don’t be a shadow of yourself"></a>Don’t be a shadow of yourself</h3><p>Simple yet powerful concept. We all have this image of our perfect self associated with a set of goals we need to achieve in order to reach that ideal.</p>
<p>One way we end up not following that path is by behaving like <em>addicts</em>: we get high in order to fool ourselves in believing that we are amazing or in order to numb the pain.</p>
<blockquote>
<p>The addict seeks to escape the pain of being human in one of two ways–by transcending it or by anesthetizing it.</p>
</blockquote>
<p>Addiction (sex, money, getting in trouble, living in the future/past, ..) is simply a distraction and a materialization of <em>Resistance</em>.</p>
<h3 id="We-are-all-scared"><a href="#We-are-all-scared" class="headerlink" title="We are all scared"></a>We are all scared</h3><p>Pressfield then explains how overcoming addiction is in fact overcoming the fear of becoming who we really are. </p>
<p>It is indeed simpler to be a lesser version of ourselves. That way we can give ourselves (and others) the excuse of simply not being ourselves.</p>
<p>It is typical for amateurs to let others define who they are. The key is to stop being afraid of being judged for who we really are.</p>
<h3 id="There-are-many-ways-remedies-to-Amateurism"><a href="#There-are-many-ways-remedies-to-Amateurism" class="headerlink" title="There are many ways remedies to Amateurism"></a>There are many ways remedies to Amateurism</h3><p>Work everyday, focus on the long term and not the quick wins, be patient, make the complex simple, never show off, never be scared of asking for help … </p>
<p>Many more in the book ;)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;First-impressions&quot;&gt;&lt;a href=&quot;#First-impressions&quot; class=&quot;headerlink&quot; title=&quot;First impressions&quot;&gt;&lt;/a&gt;First impressions&lt;/h2&gt;&lt;p&gt;A while ago I read The &lt;a href=&quot;http://www.goodreads.com/book/show/1319.The_War_of_Art&quot;&gt;War of Art&lt;/a&gt; which seems to be Pressfield’s most famous book. It is highly recommended by &lt;a href=&quot;https://simpleprogrammer.com/&quot;&gt;John Sonmez&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
      <category term="Books" scheme="http://www.codeblocq.com/tags/Books/"/>
    
      <category term="Procrastination" scheme="http://www.codeblocq.com/tags/Procrastination/"/>
    
      <category term="Productivity" scheme="http://www.codeblocq.com/tags/Productivity/"/>
    
  </entry>
  
  <entry>
    <title>Notes on Ego is the enemy by Ryan Holiday</title>
    <link href="http://www.codeblocq.com/2016/10/Notes-on-Ego-is-the-enemy-by-Ryan-Holiday/"/>
    <id>http://www.codeblocq.com/2016/10/Notes-on-Ego-is-the-enemy-by-Ryan-Holiday/</id>
    <published>2016-10-30T13:12:02.000Z</published>
    <updated>2016-11-15T13:15:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="First-Impressions"><a href="#First-Impressions" class="headerlink" title="First Impressions"></a>First Impressions</h2><p><a href="http://www.goodreads.com/book/show/27036528-ego-is-the-enemy" target="_blank" rel="external">Ego is the Enemy</a> is a book that I first heard of while browsing <a href="https://sivers.org/book/EgoEnemy" target="_blank" rel="external">Derek Sivers</a> excellent blog. I just finished it and it is an awesome reminder (for some of it) and eye opener (for a lot of it) of how our ego gets in the way of our work and aspirations and can, if left unchecked, destroy us.</p>
<p>The book is divided in three parts: before, during, failure. Each part is divided in small and easy to digest chapters that give details on how ego can manifest itself. There is some repetition, and I thought the book became more and more predictable as chapters go by, but overall it was an excellent read and I would highly recommend it.</p>
<p>No matter who you are and whether you are currently at the peak of your career and success or at the bottom of the pit, this book will help you look at your life and art differently. It will help you become a happier, more balanced person. It will help you take a deep breath of humility and selflessness.</p>
<h2 id="Notes-and-Takeaways"><a href="#Notes-and-Takeaways" class="headerlink" title="Notes and Takeaways"></a>Notes and Takeaways</h2><p>This is the one passage of the book that resonated the most with me and one that summarizes the book really well.</p>
<p>“Out of the right speaker in your inner ear will come the endless stream of self-aggrandizement, the recitation of one’s specialness, of how much more open and gifted and brilliant and knowing and misunderstood and humble one is. Out of the left speaker will be the rap songs of self-loathing, the lists of all the things one doesn’t do well, of all the mistakes one has made today and over an entire lifetime, the doubt, the assertion that everything that one touches turns to shit, that one doesn’t do relationships well, that one is in every way a fraud, incapable of selfless love, that one had no talent or insight, and on and on and on.”</p>
<p>Ego is that destructive force that exists within us and will force us to become obsessed with our own importance. It creates conflicting thoughts within our head and always tries to bring back the focus on us instead and away from the things we aim to accomplish. It will prevent us from getting started with our work, becoming truly masters of our crafts, working well with others and accepting failure and loss.</p>
<p>A few of the remedies</p>
<ul>
<li>Focus on learning new things</li>
<li>Focus on the ‘what’ and not the ‘who’ &lt;-&gt; Be less and do more.</li>
<li>Keep a healthy distance with your emotions and don’t be driven exclusively by passion</li>
<li>Don’t look down as it will prevent you from seeing what is above you</li>
<li>Stay focused and centered on what really matters</li>
<li>Live hidden</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;First-Impressions&quot;&gt;&lt;a href=&quot;#First-Impressions&quot; class=&quot;headerlink&quot; title=&quot;First Impressions&quot;&gt;&lt;/a&gt;First Impressions&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;h
    
    </summary>
    
    
      <category term="Books" scheme="http://www.codeblocq.com/tags/Books/"/>
    
      <category term="Self-Help" scheme="http://www.codeblocq.com/tags/Self-Help/"/>
    
      <category term="Ego" scheme="http://www.codeblocq.com/tags/Ego/"/>
    
  </entry>
  
  <entry>
    <title>Setup Jest to use an external configuration file</title>
    <link href="http://www.codeblocq.com/2016/10/Setup-Jest-to-use-an-external-configuration-file/"/>
    <id>http://www.codeblocq.com/2016/10/Setup-Jest-to-use-an-external-configuration-file/</id>
    <published>2016-10-26T12:30:36.000Z</published>
    <updated>2016-10-26T12:34:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>The Jest configuration does not have to be in the <code>package.json</code>, it can be put in an external file.<br><a id="more"></a></p>
<h2 id="Create-a-jestrc-file"><a href="#Create-a-jestrc-file" class="headerlink" title="Create a .jestrc file"></a>Create a .jestrc file</h2><p>Create a <code>.jestrc</code> file and put your configuration inside. The format is still JSON but the <code>”jest”: { … }”</code> key at the root is omitted.</p>
<figure class="highlight javascript"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  […],</div><div class="line">  “jest”: &#123;</div><div class="line">    <span class="string">"testRegex"</span>: <span class="string">"tests/.*\\.(js|jsx)$"</span></div><div class="line">  &#125;,</div><div class="line">  […]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>becomes </p>
<figure class="highlight javascript"><figcaption><span>.jestrc</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"testRegex"</span>: <span class="string">"tests/.*\\.(js|jsx)$"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Link-configuration"><a href="#Link-configuration" class="headerlink" title="Link configuration"></a>Link configuration</h2><p>Use the <code>—config</code> option when calling jest to use the <code>.jestrc</code> file in lieu of the package.json section</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">jest </span>—<span class="built_in">config</span> .<span class="keyword">jestrc</span></div></pre></td></tr></table></figure>
<p>Enjoy !</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The Jest configuration does not have to be in the &lt;code&gt;package.json&lt;/code&gt;, it can be put in an external file.&lt;br&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.codeblocq.com/tags/JavaScript/"/>
    
      <category term="Jest" scheme="http://www.codeblocq.com/tags/Jest/"/>
    
      <category term="Unit Tests" scheme="http://www.codeblocq.com/tags/Unit-Tests/"/>
    
  </entry>
  
  <entry>
    <title>8 VSCode Configuration Options you need to know about</title>
    <link href="http://www.codeblocq.com/2016/10/8-VSCode-Configuration-Options-you-need-to-know-about/"/>
    <id>http://www.codeblocq.com/2016/10/8-VSCode-Configuration-Options-you-need-to-know-about/</id>
    <published>2016-10-16T09:40:50.000Z</published>
    <updated>2016-10-16T09:46:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>Improve your VSCode experience with these useful configuration options<br><a id="more"></a></p>
<p>To open the configuration file use <code>Cmd + ,</code> on mac and <code>File -&gt; Preferences -&gt; User Settings</code> on Windows and Linux</p>
<h2 id="Font-Family"><a href="#Font-Family" class="headerlink" title="Font Family"></a>Font Family</h2><p>Change the editor font to your favourite <a href="https://hail2u.github.io/mn/" target="_blank" rel="external">monospace font</a> with <code>editor.fontFamily</code></p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"editor.fontFamily"</span>: <span class="string">"Inconsolata, 'Courier New', monospace"</span>,</div></pre></td></tr></table></figure>
<h2 id="Font-Size"><a href="#Font-Size" class="headerlink" title="Font Size"></a>Font Size</h2><p>I am finding the default font size to be way to small for my liking (and tired programmer’s eyes). Use <code>editor.fontSize</code> to remedy this.</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"editor.fontSize"</span>: <span class="number">16</span>,</div></pre></td></tr></table></figure>
<h2 id="Line-Wrapping"><a href="#Line-Wrapping" class="headerlink" title="Line Wrapping"></a>Line Wrapping</h2><p>By default lines do not wrap. If you are tired of doing so much horizontal scrolling, use <code>editor.wordWrap</code>.</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"editor.wordWrap"</span>: <span class="literal">true</span></div></pre></td></tr></table></figure>
<h2 id="Line-wrap-indentation"><a href="#Line-wrap-indentation" class="headerlink" title="Line wrap indentation"></a>Line wrap indentation</h2><p>Related to the previous item. When doing line wraps, I like to have a small indent to make it more obvious. This can be achieved with <code>editor.wrappingIndent</code></p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"editor.wrappingIndent"</span>: <span class="string">"indent"</span>,</div></pre></td></tr></table></figure>
<h2 id="Cursor-blinking"><a href="#Cursor-blinking" class="headerlink" title="Cursor blinking"></a>Cursor blinking</h2><p>In the pimp my editor category, improve the way your cursor blinks. Totally useless, totally worth it !</p>
<p>Possible values include <code>&#39;blink’</code>, <code>’smooth’</code>, <code>’phase’</code>, <code>’expand’</code> and <code>’solid’</code>. I am rolling with <code>’phase’</code></p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"editor.cursorBlinking"</span>: <span class="string">"phase"</span></div></pre></td></tr></table></figure>
<h2 id="Automatic-formatting"><a href="#Automatic-formatting" class="headerlink" title="Automatic formatting"></a>Automatic formatting</h2><p>This one is a lot more useful. It formats your code automatically as you type. Use <code>editor.formatOnType</code> to enable (off by default).</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"editor.formatOnType"</span>: <span class="literal">true</span>,</div></pre></td></tr></table></figure>
<h2 id="Terminal-Font"><a href="#Terminal-Font" class="headerlink" title="Terminal Font"></a>Terminal Font</h2><p>You know VSCode ships with an integrated Terminal you can open with <code>Ctrl + \</code>. </p>
<p>If you are on a Mac and using a custom shell like <code>zsh</code> you will probably also have to update the Terminal font to a <a href="https://github.com/powerline/fonts" target="_blank" rel="external">Powerline font</a>. Use <code>terminal.integrated.fontFamily</code> to do so.</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"terminal.integrated.fontFamily"</span>: <span class="string">"Meslo LG M DZ for Powerline"</span>,</div></pre></td></tr></table></figure>
<h2 id="Automated-Extensions-Update"><a href="#Automated-Extensions-Update" class="headerlink" title="Automated Extensions Update"></a>Automated Extensions Update</h2><p>I am sure you have quite a few extensions installed by now. Get them to update automatically with <code>extensions.autoUpdate</code> to avoid these pesky notifications.</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"extensions.autoUpdate"</span>: <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>Happy Coding !</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Improve your VSCode experience with these useful configuration options&lt;br&gt;
    
    </summary>
    
    
      <category term="VSCode" scheme="http://www.codeblocq.com/tags/VSCode/"/>
    
      <category term="Tools" scheme="http://www.codeblocq.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Github Avatar not showing on list of commits</title>
    <link href="http://www.codeblocq.com/2016/10/Github-Avatar-not-showing-on-list-of-commits/"/>
    <id>http://www.codeblocq.com/2016/10/Github-Avatar-not-showing-on-list-of-commits/</id>
    <published>2016-10-10T14:10:17.000Z</published>
    <updated>2016-10-13T14:42:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>Your avatar is not showing on the list of commits in github. Here is how to fix it:</p>
<p><img src="/img/github-avatar-missing.png" alt=""></p>
<h2 id="Check-your-account"><a href="#Check-your-account" class="headerlink" title="Check your account"></a>Check your account</h2><p>This should be obvious but let’s start by checking that your profile picture is properly set up. This can be done within the github settings page.</p>
<h2 id="Check-your-git-user-email-config"><a href="#Check-your-git-user-email-config" class="headerlink" title="Check your git user.email config"></a>Check your git user.email config</h2><p>If everything is in order with your account’s settings, there is probably a mismatch between your local computer git config email and the email setup in github.</p>
<p>This can happen for 2 reasons:</p>
<h3 id="You-have-not-set-your-email-in-git"><a href="#You-have-not-set-your-email-in-git" class="headerlink" title="You have not set your email in git"></a>You have not set your email in git</h3><p>If that is the case, you need to <a href="https://help.github.com/articles/setting-your-email-in-git/" target="_blank" rel="external">set your email in your local git config</a>. </p>
<p>Check what is your current email with</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">config</span> user.email</div></pre></td></tr></table></figure>
<p>And set your email with </p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git config user.email “your.email<span class="variable">@example</span>.com<span class="string">"</span></div></pre></td></tr></table></figure>
<p>Note that this will only affect new commits. Past commits will remain the same.</p>
<h3 id="You-are-using-a-different-email-that-what-has-been-configured-in-github"><a href="#You-are-using-a-different-email-that-what-has-been-configured-in-github" class="headerlink" title="You are using a different email that what has been configured in github"></a>You are using a different email that what has been configured in github</h3><p>This happens when you are contributing to a private repository on a work computer for example and you have configured git to use your work email instead of your usual github email.</p>
<p>There are 2 ways to fix this:</p>
<ul>
<li>Go to <code>Github Settings</code> &gt; <code>Emails</code> &gt; <code>Add email address</code></li>
</ul>
<p>And add your work email address here to link commits done from a local git configured with your work email to your normal github account.</p>
<ul>
<li>Change your local git config to use your main github email (cf above)</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Your avatar is not showing on the list of commits in github. Here is how to fix it:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/github-avatar-missing.png&quot; alt=
    
    </summary>
    
    
      <category term="Github" scheme="http://www.codeblocq.com/tags/Github/"/>
    
      <category term="Git" scheme="http://www.codeblocq.com/tags/Git/"/>
    
  </entry>
  
</feed>

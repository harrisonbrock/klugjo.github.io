<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Klughertz Jonathan]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://klugjo.github.io/"/>
  <updated>2015-12-28T09:23:32.000Z</updated>
  <id>http://klugjo.github.io/</id>
  
  <author>
    <name><![CDATA[Klughertz Jonathan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Easy dynamic classes with React]]></title>
    <link href="http://klugjo.github.io/2015/12/Easy-dynamic-classes-with-React/"/>
    <id>http://klugjo.github.io/2015/12/Easy-dynamic-classes-with-React/</id>
    <published>2015-12-28T07:16:03.000Z</published>
    <updated>2015-12-28T09:23:32.000Z</updated>
    <content type="html"><![CDATA[<p>In this article we will see how to generate dynamic classes for React without resorting to obnoxious string manipulations.</p>
<p>We will build a simple app that changes the <code>color</code> and <code>font-style</code> of a div based on a textbox value.</p>
<a id="more"></a> 
<p><br></p>
<h2 id="The_rules">The rules</h2><h3 id="The_text_in_our_div_should_be:">The text in our div should be:</h3><ul>
<li><span style="color: red;">Red</span> when the value is negative</li>
<li><span style="color: blue;">Blue</span> when the value is positive</li>
<li><span style="font-style: italic;">Italic</span> when the value is even</li>
<li><span style="font-style: normal;">Normal</span> when the value is odd</li>
</ul>
<h3 id="Corresponding_css_classes:">Corresponding css classes:</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.blue</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">color</span>:<span class="value"> blue</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.red</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">color</span>:<span class="value"> red</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.italic</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">font-style</span>:<span class="value"> italic</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.normal</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">font-style</span>:<span class="value"> normal</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="The_magic">The magic</h2><p>React now uses the <a href="https://github.com/JedWatson/classnames" target="_blank" rel="external">classNames</a> library to join and manage class names.</p>
<p>You can <a href="https://github.com/JedWatson/classnames#classnames" target="_blank" rel="external">install it with npm or bower</a>.</p>
<p>The <code>classNames</code> library allows you to <strong>declare your classes as a string, an array or an object</strong>. The 3 following declarations are equivalent:</p>
<h3 id="String">String</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elementClass = className(<span class="string">'red italic'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Array">Array</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elementClass = className([<span class="string">'red'</span>, <span class="string">'italic'</span>]);</span><br></pre></td></tr></table></figure>
<h3 id="Object">Object</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elementClass = className(&#123;</span><br><span class="line">    red: <span class="literal">true</span>, <span class="comment">// use true or any truthy value / expression</span></span><br><span class="line">    italic: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Note:"><u>Note:</u></h3><p>You can even use a <a href="https://github.com/JedWatson/classnames#usage-with-reactjs" target="_blank" rel="external">mix of all three</a> as separate parameters:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elementClass = className(<span class="string">"class1 class2"</span>, <span class="comment">// String</span></span><br><span class="line">  [<span class="string">'class3'</span>, <span class="string">'class4'</span>], <span class="comment">// Array</span></span><br><span class="line">  &#123;class5: <span class="literal">true</span>&#125;); <span class="comment">// Object</span></span><br></pre></td></tr></table></figure>
<p>It will <strong>add all 5 classes</strong> to the element.</p>
<p><br></p>
<h2 id="The_example">The example</h2><h3 id="Rendering_the_elements">Rendering the elements</h3><p>Let’s start with the render function. We will need a div with some text and a text input:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;this.state.textClass&#125;</span>&gt;</span>RESULT<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">value</span>=<span class="value">"Hello!"</span> <span class="attribute">value</span>=<span class="value">&#123;this.state.value&#125;</span> <span class="attribute">onChange</span>=<span class="value">&#123;this.handleChange&#125;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  )</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>this.state.value</code>: will hold the number we are going to check</li>
<li><code>this.state.textClass</code>: will hold our classes generated with <strong>className</strong></li>
<li><code>this.handleChange</code>: will regenerate the classes when the textbox value changes</li>
</ul>
<h3 id="Generating_our_css_classes">Generating our css classes</h3><p>We can now create our class generation function based on the example defined above:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">computeClass: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> classNames(&#123;</span><br><span class="line">    blue: val &gt; <span class="number">0</span>, <span class="comment">// positive -&gt; blue</span></span><br><span class="line">    red: val &lt; <span class="number">0</span>, <span class="comment">// negative -&gt; red</span></span><br><span class="line">    italic: val % <span class="number">2</span> === <span class="number">0</span>, <span class="comment">// even -&gt; italic</span></span><br><span class="line">    normal: <span class="built_in">Math</span>.abs(val % <span class="number">2</span>) === <span class="number">1</span> <span class="comment">// odd -&gt; normal</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Consider always using this method in your applications. Conditional blocks used to generate strings are a hell to read and maintain ;)</p>
<h3 id="Full_React_code">Full React code</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Main = React.createClass(&#123;</span><br><span class="line">  getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        value: <span class="number">0</span>,</span><br><span class="line">        textClass: <span class="keyword">this</span>.computeClass(<span class="number">0</span>)</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  computeClass: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> classNames(&#123;</span><br><span class="line">      blue: val &gt; <span class="number">0</span>,</span><br><span class="line">      red: val &lt; <span class="number">0</span>,</span><br><span class="line">      italic: val % <span class="number">2</span> === <span class="number">0</span>,</span><br><span class="line">      normal: <span class="built_in">Math</span>.abs(val % <span class="number">2</span>) === <span class="number">1</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  handleChange: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> val = <span class="built_in">isNaN</span>(event.target.value) ? <span class="number">0</span> : event.target.value,</span><br><span class="line">      textClass = <span class="keyword">this</span>.computeClass(val);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;value: val, textClass: textClass&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;this.state.textClass&#125;</span>&gt;</span>RESULT<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">value</span>=<span class="value">"Hello!"</span> <span class="attribute">value</span>=<span class="value">&#123;this.state.value&#125;</span> <span class="attribute">onChange</span>=<span class="value">&#123;this.handleChange&#125;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    )</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="title">Main</span> /&gt;</span>, document.getElementById("main"));</span></span><br></pre></td></tr></table></figure>
<p>Or check it live here: <a href="https://jsbin.com/kijica/edit?html,output" target="_blank" rel="external">https://jsbin.com/kijica/edit?html,output</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>In this article we will see how to generate dynamic classes for React without resorting to obnoxious string manipulations.</p>
<p>We will build a simple app that changes the <code>color</code> and <code>font-style</code> of a div based on a textbox value.</p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
      <category term="React" scheme="http://klugjo.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Passing arguments to the underlying command in npm scripts]]></title>
    <link href="http://klugjo.github.io/2015/12/Passing-arguments-to-the-underlying-command-in-npm-scripts/"/>
    <id>http://klugjo.github.io/2015/12/Passing-arguments-to-the-underlying-command-in-npm-scripts/</id>
    <published>2015-12-24T01:26:41.000Z</published>
    <updated>2015-12-24T02:13:32.000Z</updated>
    <content type="html"><![CDATA[<p>In this tutorial we will see how to pass arguments to a command when combining <a href="/2015/12/Run-scripts-with-npm/" target="_blank">npm scripts</a>.</p>
<a id="more"></a> 
<p><br></p>
<h2 id="Project_setup">Project setup</h2><p>Let’s assume we have the current script defined in our npm scripts:</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"stylus"</span>: <span class="string">"stylus src/stylus/site.styl --out dist/"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="Watching_for_changes">Watching for changes</h2><p>Now let’s say we want to create a new task that will not only compile our stylus files to css but also watch for changes and recompile when necessary.</p>
<p>Using the command line this can be done with the <code>-w</code> flag:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stylus src/stylus/site<span class="class">.styl</span> -w</span><br></pre></td></tr></table></figure>
<p>We now want to create a new script that watches for stylus changes. We can do:</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"stylus"</span>: <span class="string">"stylus src/stylus/site.styl --out dist/"</span>,</span><br><span class="line">    <span class="string">"watch:stylus"</span>: <span class="string">"stylus src/stylus/site.styl --out dist/ -w"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>See anything ugly ?</p>
<p><br></p>
<h2 id="Reusing_existing_code">Reusing existing code</h2><p>In order to avoid duplicated code, we want to reuse our first command and add the <code>-w</code> flag.</p>
<p>The general syntax is</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="command">run</span> [command] [<span class="comment">-- &lt;args&gt;]</span></span><br></pre></td></tr></table></figure>
<p>With our example it would be:</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"stylus"</span>: <span class="string">"stylus src/stylus/site.styl --out dist/"</span>,</span><br><span class="line">    <span class="string">"watch:stylus"</span>: <span class="string">"npm run stylus -- -w"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>Note the <code>--</code> in between the initial command and the additional arguments.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>In this tutorial we will see how to pass arguments to a command when combining <a href="/2015/12/Run-scripts-with-npm/" target="_blank">npm scripts</a>.</p>]]>
    
    </summary>
    
      <category term="Node" scheme="http://klugjo.github.io/tags/Node/"/>
    
      <category term="npm" scheme="http://klugjo.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Build your first React application]]></title>
    <link href="http://klugjo.github.io/2015/12/Build-your-first-React-application/"/>
    <id>http://klugjo.github.io/2015/12/Build-your-first-React-application/</id>
    <published>2015-12-22T06:44:36.000Z</published>
    <updated>2015-12-23T08:41:46.000Z</updated>
    <content type="html"><![CDATA[<p>This tutorial will walk you through developing your first app with React.<br><a id="more"></a><br><br></p>
<h2 id="1)_Installation">1) Installation</h2><p>This is the app we are going to build. Two buttons that change the case of a text. Pretty simple but good enough to look at a few of React’s basic syntax.</p>
<p><br></p>
<p><hr style="border: 0;height: 1px;background-image: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.75), rgba(0, 0, 0, 0));"></p>
<p><div style="margin-top: 7px; margin-bottom: 15px; text-align:center; width: 100%; padding-bottom: 15px"><br>  <div id="react-tutorial-1-text" style="color:#666666; font-size:20px">Hello from React</div><br>  <button onmouseover="this.style.background = '#f9f9f9'" onmouseout="this.style.background = '#f4f4f4'" style="border-radius:6px; border:1px solid #dcdcdc; color:#666666; background: #f4f4f4; font-size:15px; padding:6px 24px; text-decoration:none; text-shadow:0px 1px 0px #ffffff; margin: 7px; outline: none; cursor: pointer;" onclick="document.getElementById('react-tutorial-1-text').style['text-transform'] = 'lowercase';">Lowercase</button><button onmouseover="this.style.background = '#f9f9f9'" onmouseout="this.style.background = '#f4f4f4'" style="border-radius:6px; border:1px solid #dcdcdc; color:#666666; background: #f4f4f4; font-size:15px; padding:6px 24px; text-decoration:none; text-shadow:0px 1px 0px #ffffff; margin: 7px; outline: none; cursor: pointer;" onclick="document.getElementById('react-tutorial-1-text').style['text-transform'] = 'uppercase';">Uppercase</button><br></div></p>
<p><hr style="border: 0;height: 1px;background-image: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.75), rgba(0, 0, 0, 0));"><br><br><br>Let’s get started by creating a simple HTML document and include the <a href="https://facebook.github.io/react/downloads.html" target="_blank" rel="external">React libraries</a>. You will also need to include a script tag and create div with <code>id=&quot;main&quot;</code> in the the document body.</p>
<p>Make sure you are using the <a href="https://facebook.github.io/react/downloads.html" target="_blank" rel="external">latest version of React</a>. At the time of writing, this is what I have in my index.html:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://fb.me/react-0.14.3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://fb.me/react-dom-0.14.3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"main"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/babel"</span>&gt;</span><span class="1c"></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// Your react code goes here</span></span><br><span class="line">      </span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><u>Note:</u> It is <s>possible</s> <strong>recommended</strong> to use React with a CommonJS module system like browserify or webpack and to <a href="https://facebook.github.io/react/docs/getting-started.html" target="_blank" rel="external">install it with npm</a>.</p>
<p><br></p>
<h2 id="2)_First_component_using_React’s_JSX_syntax">2) First component using React’s JSX syntax</h2><p>React uses a specific syntax, called <a href="https://facebook.github.io/react/docs/jsx-in-depth.html" target="_blank" rel="external">JSX</a>. JSX is a JavaScript syntax extension that looks similar to XML. In your JSX files, you can use any JavaScript you want, but you can also include pieces of HTML/XML without quotes.</p>
<p>(The <a href="https://babeljs.io/" target="_blank" rel="external">babel-core</a> library we have included, allows in browser JSX transformation and the use of <code>&lt;script type=&quot;text/babel&quot;&gt;</code> tags.)</p>
<p>Let’s create a button component on our page with React:</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var UppercaseButton = React.createClass<span class="params">(&#123;</span><br><span class="line">  render: function<span class="params">()</span> &#123;</span><br><span class="line">    return <span class="params">(</span><br><span class="line">      &lt;button&gt;Uppercase&lt;/button&gt;</span><br><span class="line">    )</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.<span class="built_in">render</span><span class="params">(&lt;UppercaseButton /&gt;, document.getElementById<span class="params">(<span class="string">"main"</span>)</span>)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>Use <code>React.createClass()</code> to declare new components.</li>
<li>A React Class should have a <code>render</code> function that returns the element’s HTML. Careful to use <code>return(&lt;HtmlTag /&gt;)</code> and not <code>return{&lt;HtmlTag /&gt;}</code>.</li>
<li>ReactDOM.render() is our app’s main entry point and renders our components. The first argument is the <code>&lt;ReactTag /&gt;</code> that we declared with <code>createClass()</code> and the second is the HTML element that will contain the rendered React component.</li>
<li>React classes should always start with an Capital letter.</li>
</ul>
<p>Check out the code here: <a href="https://jsbin.com/xakiza/edit?html,output" target="_blank" rel="external">https://jsbin.com/xakiza/edit?html,output</a></p>
<p><br></p>
<h2 id="3)_Passing_arguments_to_a_React_component">3) Passing arguments to a React component</h2><p>It is possible to pass arguments to components using components properties.</p>
<p>Change your React code to:</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> UppercaseButton = React.createClass(&#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button&gt;&#123;<span class="keyword">this</span>.props.text&#125;&lt;/button&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;UppercaseButton text=&#123;<span class="string">"Uppercase"</span>&#125; /&gt;, document.getElementById(<span class="string">"main"</span>));</span><br></pre></td></tr></table></figure>
<ul>
<li>Pass an argument by adding a property like you would in HTML. In this example, we added the <code>text={&quot;Uppercase&quot;}</code> property.</li>
<li>Use curly brackets when interpolating JavaScript expressions in your JSX templates.</li>
<li>In the component definition, use <code>this.props.propertyName</code> to access the value passed to that component.</li>
</ul>
<p>Check out the code here: <a href="https://jsbin.com/qakaka/edit?html,output" target="_blank" rel="external">https://jsbin.com/qakaka/edit?html,output</a></p>
<p><br></p>
<h2 id="4)_Composing_components_and_managing_state">4) Composing components and managing state</h2><p>We are now going to create a <code>&lt;Main /&gt;</code> component to hold our button and text. This component will hold our application’s state.</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> UppercaseButton = React.createClass(&#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button onClick=&#123;<span class="keyword">this</span>.props.onButtonClick&#125;&gt;Uppercase&lt;/button&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> HelloText = React.createClass(&#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div style=&#123;<span class="keyword">this</span>.props.textStyle&#125;&gt;Hello from React&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Main = React.createClass(&#123;</span><br><span class="line">  getInitialState: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;textStyle: &#123;</span><br><span class="line">      textTransform: <span class="string">'none'</span></span><br><span class="line">    &#125;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  clickHandler: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;textStyle: &#123;</span><br><span class="line">      textTransform: <span class="string">'uppercase'</span></span><br><span class="line">    &#125;&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;HelloText textStyle=&#123;<span class="keyword">this</span>.state.textStyle&#125; /&gt;</span><br><span class="line">        &lt;UppercaseButton onButtonClick=&#123;<span class="keyword">this</span>.clickHandler&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Main /&gt;, document.getElementById(<span class="string">"main"</span>));</span><br></pre></td></tr></table></figure>
<p>Our code is getting larger, here are the main things to pay attention to:</p>
<ul>
<li>We now have 3 components (Main, UppercaseButton and HelloText). Main holds UppercaseButton and HelloText.</li>
<li><code>getInitialState()</code> is a special React function that will be called once when a component is initialized. Make use of it to return the initial state object.</li>
<li>The component state can be access with <code>this.state</code>.</li>
<li>The component state can be modified using <code>this.setState(newState)</code>.</li>
<li>To set a inline style using the JSX syntax, use <code>style={JavascriptStyleObject}</code>. More info in the <a href="https://facebook.github.io/react/tips/inline-styles.html" target="_blank" rel="external">React inline style documentation</a>. In our example, to set the text to uppercase: style=&lbrace;&lbrace;textTransform: ‘none’&rbrace;&rbrace;</li>
</ul>
<p>Check out the code and play around here: <a href="https://jsbin.com/beheve/edit?html,output" target="_blank" rel="external">https://jsbin.com/beheve/edit?html,output</a></p>
<p><br></p>
<h2 id="5)_Finishing_the_application_and_taking_of_advantage_of_React_modular_approach">5) Finishing the application and taking of advantage of React modular approach</h2><p>Let’s now add our second button by creating a generic button.</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> TextTransformButton = React.createClass(&#123;</span><br><span class="line">  onButtonClick: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.props.onButtonClick(<span class="keyword">this</span>.props.transform);</span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button onClick=&#123;<span class="keyword">this</span>.onButtonClick&#125;&gt;&#123;<span class="keyword">this</span>.props.transform&#125;&lt;/button&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> HelloText = React.createClass(&#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div style=&#123;<span class="keyword">this</span>.props.textStyle&#125;&gt;Hello from React&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Main = React.createClass(&#123;</span><br><span class="line">  getInitialState: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;textStyle: &#123;</span><br><span class="line">      textTransform: <span class="string">'none'</span></span><br><span class="line">    &#125;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  clickHandler: <span class="function"><span class="keyword">function</span> <span class="params">(newCase)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;textStyle: &#123;</span><br><span class="line">      textTransform: newCase</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;HelloText textStyle=&#123;<span class="keyword">this</span>.state.textStyle&#125; /&gt;</span><br><span class="line">        &lt;TextTransformButton onButtonClick=&#123;<span class="keyword">this</span>.clickHandler&#125; transform=&#123;<span class="string">"lowercase"</span>&#125; /&gt;</span><br><span class="line">        &lt;TextTransformButton onButtonClick=&#123;<span class="keyword">this</span>.clickHandler&#125; transform=&#123;<span class="string">"uppercase"</span>&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Main /&gt;, document.getElementById(<span class="string">"main"</span>));</span><br></pre></td></tr></table></figure>
<ul>
<li>The <code>clickHandler</code> function is now generic. </li>
<li>The child components (buttons here) will decide what to send to the <code>clickHandler</code>.</li>
</ul>
<p>Check out the final code here: <a href="https://jsbin.com/bidafa/edit?html,output" target="_blank" rel="external">https://jsbin.com/bidafa/edit?html,output</a></p>
<p>Hopefully this quick first look at React will help you get started and get an idea of the framework’s potential.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This tutorial will walk you through developing your first app with React.<br>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
      <category term="React" scheme="http://klugjo.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Bundle jade templates with browserify transform]]></title>
    <link href="http://klugjo.github.io/2015/12/Bundle-jade-templates-with-browserify-transform/"/>
    <id>http://klugjo.github.io/2015/12/Bundle-jade-templates-with-browserify-transform/</id>
    <published>2015-12-18T02:03:38.000Z</published>
    <updated>2015-12-18T04:06:35.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/substack/node-browserify/wiki/list-of-transforms" target="_blank" rel="external">Browserify transforms</a> can be used to load non Javascript files using the <a href="http://requirejs.org/docs/commonjs.html" target="_blank" rel="external">Common JS</a> syntax. You could for example load <a href="https://github.com/jnordberg/coffeeify" target="_blank" rel="external">CoffeeScript</a>, <a href="https://github.com/guzart/browserify-typescriptifier" target="_blank" rel="external">TypeScript</a> or <a href="https://github.com/babel/babelify" target="_blank" rel="external">compile ES6 to ES5</a> when packaging your JavaScript.</p>
<p>In this example we will look at how to require a jade template directly inside our JS code and have browserify bundle everything up nicely.</p>
<a id="more"></a> 
<p><br></p>
<h2 id="1)_Project_setup">1) Project setup</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|-- dist // Build will end up here</span><br><span class="line">|-- src // All source code <span class="keyword">is</span> <span class="keyword">inside</span> this folder</span><br><span class="line">    |-- templates</span><br><span class="line">        |-- quote.jade // Our jade template</span><br><span class="line">    |-- js</span><br><span class="line">        |-- index.js // Our main JavaScript file</span><br><span class="line">|-- package.json</span><br></pre></td></tr></table></figure>
<p>We have an <code>index.js</code> file in which we will require and render our jade template.</p>
<p><br></p>
<h2 id="2)_Jade_template">2) Jade template</h2><p>Let’s start by setting up a simple <code>quote.jade</code> <a href="http://jade-lang.com/" target="_blank" rel="external">Jade template</a>.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h3 #&#123;quote&#125;&#10;span - #&#123;author&#125;</span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="3)_Javascript">3) Javascript</h2><p>We are now ready to include our template in our Javascript. Require your jade template the same way as you would for a JS file but <strong>add the file extension</strong>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Require our jade template as we would require a Js file</span></span><br><span class="line"><span class="keyword">var</span> quoteTemplate = <span class="built_in">require</span>(<span class="string">'../templates/quote.jade'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Render the template</span></span><br><span class="line"><span class="keyword">var</span> output = quoteTemplate(&#123;</span><br><span class="line">    quote: <span class="string">"Be yourself; everyone else is already taken."</span>,</span><br><span class="line">    author: <span class="string">"Oscar Wilde"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(output);</span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="4)_Bundle_up">4) Bundle up</h2><h3 id="Let’s_start_by_installing_everything_we_need:">Let’s start by installing everything we need:</h3><ul>
<li><p><a href="/2015/11/Your-first-10-minutes-with-Browserify/" target="_blank">Install browserify globally</a></p>
</li>
<li><p>Install <a href="https://github.com/domenic/jadeify" target="_blank" rel="external">jadeify</a>, our jade browserify transform: </p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> jadeify <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>You will also need to install jade locally even if you already have it installed globally. This is because browserify needs to access some of the jade code to include it in the output file.</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> jade <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure>
<h3 id="We_are_now_ready_to_create_our_package:">We are now ready to create our package:</h3><p>To specify a transform when launching browserify, use <code>-transform</code> or <code>-t</code> followed by the plugin name.</p>
<p>So in our case:</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">browserify </span>-t jadeify <span class="string">"src/js/index.js"</span> -o <span class="string">"dist/bundle.js"</span></span><br></pre></td></tr></table></figure>
<p>Your code is all packaged in one Js file. Include the bundle.js file in a simple HTML page and check the console. You should see:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">h3</span>&gt;</span> Be yourself; everyone else is already taken.<span class="tag">&lt;/<span class="title">h3</span>&gt;</span><span class="tag">&lt;<span class="title">span</span>&gt;</span>- Oscar Wilde<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Have fun with browserify transforms !</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://github.com/substack/node-browserify/wiki/list-of-transforms">Browserify transforms</a> can be used to load non Javascript files using the <a href="http://requirejs.org/docs/commonjs.html">Common JS</a> syntax. You could for example load <a href="https://github.com/jnordberg/coffeeify">CoffeeScript</a>, <a href="https://github.com/guzart/browserify-typescriptifier">TypeScript</a> or <a href="https://github.com/babel/babelify">compile ES6 to ES5</a> when packaging your JavaScript.</p>
<p>In this example we will look at how to require a jade template directly inside our JS code and have browserify bundle everything up nicely.</p>]]>
    
    </summary>
    
      <category term="Browserify" scheme="http://klugjo.github.io/tags/Browserify/"/>
    
      <category term="Jade" scheme="http://klugjo.github.io/tags/Jade/"/>
    
      <category term="Node" scheme="http://klugjo.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo deploy your blog to github pages in one command]]></title>
    <link href="http://klugjo.github.io/2015/12/Hexo-deploy-your-blog-to-github-pages-in-one-command/"/>
    <id>http://klugjo.github.io/2015/12/Hexo-deploy-your-blog-to-github-pages-in-one-command/</id>
    <published>2015-12-17T08:12:33.000Z</published>
    <updated>2015-12-17T09:19:40.000Z</updated>
    <content type="html"><![CDATA[<p>Hexo allows you to deploy your blog to github pages or any other git repository pretty much out of the box.</p>
<p>Your hexo can be hosted for free on <a href="https://pages.github.com/" target="_blank" rel="external">github pages</a> but this tutorial would also work for any other git hosting site.</p>
<a id="more"></a> 
<p><br></p>
<h2 id="Hexo-deployer-git">Hexo-deployer-git</h2><p>There is a <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="external">plugin developed by the hexo team</a> that will help do just that, deploy to git in one command.</p>
<p><br></p>
<h3 id="1)_Installation">1) Installation</h3><p>While at the root of your hexo project:</p>
<p><code>npm install hexo-deployer-git --save</code></p>
<p><br></p>
<h3 id="2)_Configuration">2) Configuration</h3><p>Open your <code>_config.yml</code> and edit the Deployment section:</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: <span class="attribute">https</span>:<span class="comment">//github.com/username/your-blog-url.github.io</span></span><br></pre></td></tr></table></figure>
<p>Use your blog github repo URL in the repo property</p>
<p><br></p>
<h3 id="3)_Deploy_!">3) Deploy !</h3><p>Run <code>hexo deploy</code> and your blog is online. Easy, wasn’t it ?</p>
<p><br></p>
<h2 id="Remarks">Remarks</h2><p><br></p>
<h3 id="You_need_to_generate_your_site_first">You need to generate your site first</h3><p><code>hexo deploy</code> will not generate your pages, you need to launch <code>hexo generate</code> first.</p>
<p>If you want an easy way to do both at the same time, you could <a href="/2015/12/Run-scripts-with-npm/" target="_blank">create an npm script</a> to do this:</p>
<p>In your package.json add</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"deploy"</span>: <span class="string">"hexo generate &amp;&amp; hexo deploy"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>then run <code>npm run deploy</code> to first generate and then deploy your blog.</p>
<p><br></p>
<h3 id="You_can_add_several_repos_if_you_want_to_push_your_blog_to_several_places">You can add several repos if you want to push your blog to several places</h3><p>Just duplicated the <code>repo:</code> line:</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: <span class="attribute">https</span>:<span class="comment">//github.com/username/your-blog-url.github.io</span></span><br><span class="line">  <span class="attribute">repo</span>: <span class="attribute">https</span>:<span class="comment">//github.com/username/your-second-blog-url.github.io</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<h3 id="You_can_personalize_the_git_commit_message">You can personalize the git commit message</h3><p>By default the message will be: Site updated: &lbrace;&lbrace; now(“YYYY-MM-DD HH:mm:ss”) &lbrace;&lbrace;</p>
<p>You can add a message property if you want to use your own:</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: <span class="attribute">https</span>:<span class="comment">//github.com/username/your-blog-url.github.io</span></span><br><span class="line">  <span class="attribute">message</span>: New post added</span><br></pre></td></tr></table></figure>
<p>You can use <a href="http://paularmstrong.github.io/swig/" target="_blank" rel="external">SWIG</a> templates in the message although I am not sure how that would help. The <code>now</code> method in the default message is a custom swig helper as you can see in the <a href="https://github.com/hexojs/hexo-deployer-git/blob/master/lib/deployer.js#L10-L14" target="_blank" rel="external">source</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Hexo allows you to deploy your blog to github pages or any other git repository pretty much out of the box.</p>
<p>Your hexo can be hosted for free on <a href="https://pages.github.com/">github pages</a> but this tutorial would also work for any other git hosting site.</p>]]>
    
    </summary>
    
      <category term="GitHub" scheme="http://klugjo.github.io/tags/GitHub/"/>
    
      <category term="Hexo" scheme="http://klugjo.github.io/tags/Hexo/"/>
    
      <category term="Node" scheme="http://klugjo.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Read-Only properties in JavaScript]]></title>
    <link href="http://klugjo.github.io/2015/12/Read-only-properties-in-JavaScript/"/>
    <id>http://klugjo.github.io/2015/12/Read-only-properties-in-JavaScript/</id>
    <published>2015-12-14T03:19:31.000Z</published>
    <updated>2015-12-14T08:02:13.000Z</updated>
    <content type="html"><![CDATA[<p>Let’s look at how we can make a JavaScript object property read-only using little-known built in functions.</p>
<p>JavaScript Object Literals are by dynamic by default. Given the following object:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> movieTicket</span> = &#123;</span><br><span class="line">  movie: <span class="string">"Mad Max"</span>,</span><br><span class="line">  hall: <span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<a id="more"></a> 
<p>It is possible to add, delete and modify properties after object creation:</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">movieTicket.price = <span class="string">'$10.00'</span>;</span><br><span class="line"><span class="keyword">delete</span> movieTicket.hall;</span><br><span class="line">movieTicket.movie = <span class="string">'The Rise And Rise Of Bitcoin'</span>;</span><br></pre></td></tr></table></figure>
<p>The <code>movieTicket</code> will then look like:</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attribute">movie</span>: <span class="string">'The Rise And Rise Of Bitcoin'</span>,</span><br><span class="line">  <span class="attribute">price</span>: <span class="string">'$10.00'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Make_a_property_read-only">Make a property read-only</h2><p>You can make a property read-only by using the <code>Object.defineProperty(obj, prop, descriptor)</code> static function. </p>
<p>Example:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> movieTicket = &#123;</span><br><span class="line">  movie: <span class="string">'Mad Max'</span>,</span><br><span class="line">  hall: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(movieTicket, <span class="string">'movie'</span>, &#123;</span><br><span class="line">  value: <span class="string">'Mad Max'</span>,</span><br><span class="line">  writable: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">movieTicket.movie = <span class="string">'Star Wars'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(movieTicket);</span><br></pre></td></tr></table></figure>
<p>will log <code>Object {movie: &quot;Mad Max&quot;, hall: 1}</code></p>
<h2 id="Notes:">Notes:</h2><h3 id="No_error_thrown_when_accessing_a_read-only_property">No error thrown when accessing a read-only property</h3><p>After using the Object.defineProperty method on the movie property, the movie property can not be changed. But <u>the system will not throw any error if you try to change its value</u>. This can be an issue as, in a larger system, if you forget that a property is read-only, this might create nearly impossible to find bugs.</p>
<p>One workaround for this issue is to use <code>&#39;use strict&#39;;</code>. If you do and try to modify a read-only property, the code will thrown an error:</p>
<p><code>Uncaught TypeError: Cannot assign to read only property &#39;movie&#39; of #&lt;Object&gt;</code></p>
<h3 id="The_property_can_still_be_deleted">The property can still be deleted</h3><p>If you make a property read-only using that method, you can still delete it using <code>delete movieTicket.movie</code>. If you re-add that property after that, the newly added property will <strong>not</strong> be read-only.</p>
<h3 id="Sub_properties_are_still_modifiable">Sub properties are still modifiable</h3><p>If your property points to an object, properties of that object are <strong>not</strong> read-only</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var movieTicket = &#123;</span><br><span class="line">  movie: &#123;</span><br><span class="line">    title: <span class="string">'Mad Max'</span>,</span><br><span class="line">    <span class="built_in">year</span>: <span class="number">2015</span></span><br><span class="line">  &#125;,</span><br><span class="line">  hall: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Object</span>.defineProperty(movieTicket, <span class="string">'movie'</span>, &#123;</span><br><span class="line">  value: &#123;</span><br><span class="line">    title: <span class="string">'Mad Max'</span>,</span><br><span class="line">    <span class="built_in">year</span>: <span class="number">2015</span></span><br><span class="line">  &#125;,</span><br><span class="line">  writable: <span class="keyword">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">movieTicket.movie.title = <span class="string">'Sicario'</span>;</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(movieTicket.movie.title); <span class="comment">// Returns: 'Sicario'</span></span><br></pre></td></tr></table></figure>
<p>In that example, only the pointer to the movie child object is made read-only.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Let’s look at how we can make a JavaScript object property read-only using little-known built in functions.</p>
<p>JavaScript Object Literals are by dynamic by default. Given the following object:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> movieTicket</span> = &#123;</span><br><span class="line">  movie: <span class="string">"Mad Max"</span>,</span><br><span class="line">  hall: <span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
      <category term="OOP" scheme="http://klugjo.github.io/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Requiring external libraries with Browserify]]></title>
    <link href="http://klugjo.github.io/2015/12/Requiring-external-libraries-with-Browserify/"/>
    <id>http://klugjo.github.io/2015/12/Requiring-external-libraries-with-Browserify/</id>
    <published>2015-12-11T05:34:28.000Z</published>
    <updated>2015-12-11T16:50:04.000Z</updated>
    <content type="html"><![CDATA[<p>This post will show you how to easily download and include 3rd party libraries in your Browserify bundle.</p>
<a id="more"></a> 
<p><br></p>
<h2 id="1)_Project_Structure">1) Project Structure</h2><p>Let’s start by assuming the following project structure</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">|-- dist // Build will end up here</span></span><br><span class="line"><span class="string">|-- src </span></span><br><span class="line">    <span class="string">|-- js</span></span><br><span class="line">        <span class="string">|-- main.js // Our main JavaScript file</span></span><br><span class="line">        <span class="string">|-- module.js // Local module</span></span><br><span class="line"><span class="string">|-- package.json</span></span><br></pre></td></tr></table></figure>
<p>We have our <code>main.js</code> file where we will require our local module (<code>module.js</code>) and our jQuery library</p>
<p><br></p>
<h2 id="2)_Requiring_the_jQuery_library">2) Requiring the jQuery library</h2><h3 id="Installing_jQuery">Installing jQuery</h3><p>One of the advantages of using Browserify is that you don’t have to use bower or download your dependencies manually. You can just install everything with npm.</p>
<p>To install jquery:</p>
<p><code>npm install jquery</code></p>
<h3 id="Requiring_jQuery">Requiring jQuery</h3><p>Since jQuery has been installed with npm, we can require it in our client code like we would do in Node: by simply using the name of the library.</p>
<p><code>var $ = require(&#39;jquery&#39;);</code></p>
<p>Browserify makes it easy to reuse server side libraries if you use node and to centralize all your JavaScript libraries in one place. Not to mention that npm is now a mature and solid packet manager.</p>
<p><br></p>
<h2 id="3)_Requiring_local_modules">3) Requiring local modules</h2><p>As a bonus here is the correct way to require local modules.</p>
<p>When requiring a local module, the path should always start with:</p>
<ul>
<li><code>./</code> representing the current directory</li>
<li><code>../</code> representing the parent directory</li>
</ul>
<p>In our project example, to require <code>module.js</code> in <code>main.js</code>, we have to use</p>
<p><code>var module = require(&#39;./module&#39;);</code></p>
<p>Happy bundling !</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This post will show you how to easily download and include 3rd party libraries in your Browserify bundle.</p>]]>
    
    </summary>
    
      <category term="Browserify" scheme="http://klugjo.github.io/tags/Browserify/"/>
    
      <category term="Node" scheme="http://klugjo.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Build and package your client side code using npm]]></title>
    <link href="http://klugjo.github.io/2015/12/Build-and-package-your-client-side-code-using-npm/"/>
    <id>http://klugjo.github.io/2015/12/Build-and-package-your-client-side-code-using-npm/</id>
    <published>2015-12-09T13:54:43.000Z</published>
    <updated>2015-12-11T05:32:16.000Z</updated>
    <content type="html"><![CDATA[<p>In this post we will see how it is possible to configure an entire build sequence <strong>using npm only</strong>.</p>
<h3 id="What_we_want_to_achieve:">What we want to achieve:</h3><p>One command <code>npm run package</code> should:</p>
<ul>
<li>clean our build folder</li>
<li>compile our css from stylus</li>
<li>compile our html from jade</li>
<li>bundle and minify our javascript</li>
</ul>
<a id="more"></a> 
<p><br></p>
<h2 id="1)_Minimal_project_structure">1) Minimal project structure</h2><p>Let’s assume our project is organized as follows:</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">|-- dist // Build will end up here</span><br><span class="line">|-- src // All source code <span class="keyword">is</span> <span class="keyword">inside</span> this folder</span><br><span class="line">    |-- stylus </span><br><span class="line">        |-- site.styl // Our main stylus file</span><br><span class="line">    |-- index.jade // Our jade file</span><br><span class="line">    |-- js</span><br><span class="line">        |-- main.js // Our main JavaScript file</span><br><span class="line">        |-- jquery.js // jQuery library. Required in main.js</span><br><span class="line">|-- package.json // Where our build <span class="keyword">is</span> configured !</span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="2)_Compile_our_CSS_and_HTML">2) Compile our CSS and HTML</h2><h3 id="Stylus_to_CSS">Stylus to CSS</h3><p>We can compile our <a href="https://github.com/stylus/stylus" target="_blank" rel="external">stylus</a> with the following <a href="https://github.com/stylus/stylus/blob/dev/docs/executable.md" target="_blank" rel="external">command</a>:</p>
<p><code>stylus src/stylus/site.styl --out dist/</code></p>
<p>Let’s set this up in the package.json: <a href="/2015/12/Run-scripts-with-npm/">Read this post</a> if you want to know the basics of setting up scripts in npm.</p>
<h3 id="Jade_to_HTML">Jade to HTML</h3><p>In a similar fashion, we can compile our <a href="http://jade-lang.com/" target="_blank" rel="external">Jade templates</a> to HTML using the following <a href="http://jade-lang.com/command-line/" target="_blank" rel="external">command</a>:</p>
<p><code>jade src --out dist/</code></p>
<h3 id="Add_the_npm_tasks">Add the npm tasks</h3><p>In our package.json, we can now create the tow following scripts:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"package:stylus"</span>: <span class="string">"stylus src/stylus/site.styl --out dist/"</span>,</span><br><span class="line">    <span class="string">"package:jade"</span>: <span class="string">"jade src --out dist/"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="3)_Bundle_and_minify_the_JavaScript">3) Bundle and minify the JavaScript</h2><h3 id="Bundle_with_browserify">Bundle with browserify</h3><p>(Here is an <a href="/2015/11/Your-first-10-minutes-with-Browserify/">introduction to browserify</a> if needed)</p>
<p>The command to bundle our JS into one file is <code>browserify ./src/js/main.js -o ./dist/bundle.js</code></p>
<h3 id="Minify_with_uglify">Minify with uglify</h3><p>I am using <a href="https://github.com/mishoo/UglifyJS2" target="_blank" rel="external">uglifyJS2</a> for this task.</p>
<p>The task to minify the bundle.js file is <code>uglifyjs -- compress ./dist/bundle.js -o ./dist/bundle.min.js</code></p>
<h3 id="Piping_the_two">Piping the two</h3><p>Now what we want is to <strong>pipe the output of the browserify task into the uglify task</strong> so that we can combine both into one npm task</p>
<p>To do this, we are going to use a <a href="http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-4.html" target="_blank" rel="external">unix pipe</a> <code>|</code> and connect the STDOUT of the first task with the STDIN of the second.</p>
<p><code>browserify ./src/js/main.js | uglifyjs --compress &gt; ./dist/bundle.min.js</code></p>
<p>Let’s set it up as a npm task:</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attribute">...</span></span><br><span class="line">    <span class="string">"package:js"</span>: <span class="string">"browserify ./src/js/main.js | uglifyjs --compress &gt; ./dist/bundle.min.js"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="4)_Putting_everything_together">4) Putting everything together</h2><p>Now let’s combine all our tasks in one npm <code>package</code> task:</p>
<p><code>&quot;package&quot;: &quot;npm run package:stylus &amp;&amp; npm run package:jade &amp;&amp; npm run package:js&quot;</code></p>
<p>This will run our 3 package tasks in a sequence.</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"package:stylus"</span>: <span class="string">"stylus src/stylus/site.styl --out dist/"</span>,</span><br><span class="line">    <span class="string">"package:jade"</span>: <span class="string">"jade src --out dist/"</span>,</span><br><span class="line">    <span class="string">"package:js"</span>: <span class="string">"browserify ./src/js/main.js | uglifyjs --compress &gt; ./dist/bundle.min.js"</span>,</span><br><span class="line">    <span class="string">"package"</span>: <span class="string">"npm run package:stylus &amp;&amp; npm run package:jade &amp;&amp; npm run package:js"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<p>Run <code>npm run package</code> to test the full build sequence.</p>
<p><br></p>
<h2 id="5)_Cleaning_up_the_output_directory">5) Cleaning up the output directory</h2><p>Before running the build, we would like to clean the output directory.</p>
<p>We will use <a href="https://github.com/isaacs/rimraf#cli" target="_blank" rel="external">rimraf’s CLI</a> like so: <code>rimraf dist/*</code>.</p>
<p>Instead of creating another ‘package:clean’ task, we can use an <a href="http://www.marcusoft.net/2015/08/pre-and-post-hooks-for-npm-scripting.html" target="_blank" rel="external">npm script prehook</a>. By prefixing an existing task (even custom) with <em>pre</em> or <em>post</em>, it will be automatically executed before or after our main task.</p>
<p>In our current project, if we create a task called <code>&lt;b&gt;pre&lt;/b&gt;package</code> it will be executed automatically before our <code>package</code> task. In a similar way, <code>&lt;b&gt;post&lt;/b&gt;package</code> would be executed after <code>package</code>.</p>
<p>Our final task:</p>
<p><code>&quot;prepackage&quot;: &quot;rimraf dist/*&quot;</code></p>
<p>and here is the final scripts object in he package:</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"package:stylus"</span>: <span class="string">"stylus src/stylus/site.styl --out dist/"</span>,</span><br><span class="line">    <span class="string">"package:jade"</span>: <span class="string">"jade src --out dist/"</span>,</span><br><span class="line">    <span class="string">"package:js"</span>: <span class="string">"browserify ./src/js/main.js | uglifyjs --compress &gt; ./dist/bundle.min.js"</span>,</span><br><span class="line">    <span class="string">"package"</span>: <span class="string">"npm run package:stylus &amp;&amp; npm run package:jade &amp;&amp; npm run package:js"</span>,</span><br><span class="line">    <span class="string">"prepackage"</span>: <span class="string">"rimraf dist/*"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>In this post we will see how it is possible to configure an entire build sequence <strong>using npm only</strong>.</p>
<h3 id="What_we_want_to_achieve:">What we want to achieve:</h3><p>One command <code>npm run package</code> should:</p>
<ul>
<li>clean our build folder</li>
<li>compile our css from stylus</li>
<li>compile our html from jade</li>
<li>bundle and minify our javascript</li>
</ul>]]>
    
    </summary>
    
      <category term="Browserify" scheme="http://klugjo.github.io/tags/Browserify/"/>
    
      <category term="Build" scheme="http://klugjo.github.io/tags/Build/"/>
    
      <category term="Jade" scheme="http://klugjo.github.io/tags/Jade/"/>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
      <category term="Stylus" scheme="http://klugjo.github.io/tags/Stylus/"/>
    
      <category term="npm" scheme="http://klugjo.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Run scripts with npm]]></title>
    <link href="http://klugjo.github.io/2015/12/Run-scripts-with-npm/"/>
    <id>http://klugjo.github.io/2015/12/Run-scripts-with-npm/</id>
    <published>2015-12-09T08:34:19.000Z</published>
    <updated>2015-12-17T08:47:52.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a> is an awesome tool built directly inside of Node.js. You can use it to configure and run common scripts like running your unit tests or starting your webserver.</p>
<p>npm has 4 default <a href="https://docs.npmjs.com/misc/scripts" target="_blank" rel="external">npm-scripts commands</a>:</p>
<ul>
<li>test</li>
<li>start</li>
<li>stop</li>
<li>restart</li>
</ul>
<p>We will look into all these and see how to create custom commands.</p>
<a id="more"></a> 
<p><br></p>
<h2 id="1)_Getting_started:">1) Getting started:</h2><p>Let’s start with an empty project folder, cd into it and run <code>npm init</code>. Pick a name for your project and use the defaults for the remaining fields.</p>
<p>Your <code>package.json</code> should look something like:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">name</span>": <span class="value"><span class="string">"npm-scripts"</span></span>,</span><br><span class="line">  "<span class="attribute">version</span>": <span class="value"><span class="string">"1.0.0"</span></span>,</span><br><span class="line">  "<span class="attribute">description</span>": <span class="value"><span class="string">""</span></span>,</span><br><span class="line">  "<span class="attribute">main</span>": <span class="value"><span class="string">"index.js"</span></span>,</span><br><span class="line">  "<span class="attribute">scripts</span>": <span class="value">&#123;</span><br><span class="line">    "<span class="attribute">test</span>": <span class="value"><span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  </span>&#125;</span>,</span><br><span class="line">  "<span class="attribute">author</span>": <span class="value"><span class="string">"Klughertz Jonathan (http://klugjo.github.io/)"</span></span>,</span><br><span class="line">  "<span class="attribute">license</span>": <span class="value"><span class="string">"ISC"</span></span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="2)_npm_test:">2) npm test:</h2><p>The default <code>package.json</code> comes with a <code>scripts</code> object and a <code>test</code> command:</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"</span><span class="keyword">Error</span>: <span class="keyword">no</span> <span class="keyword">test</span> specified\<span class="string">" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<p>Our <a href="https://docs.npmjs.com/cli/test" target="_blank" rel="external">npm-test</a> command is already good to go.</p>
<p>To run an npm script:</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="command">run</span>-<span class="keyword">script</span> &lt;command&gt; [<span class="comment">-- &lt;args&gt;...]</span></span><br><span class="line"></span><br><span class="line"><span class="type">alias</span>: npm <span class="command">run</span></span><br></pre></td></tr></table></figure>
<p>Back to your terminal, type <code>npm run-script test</code> or <code>npm run test</code> to run the test command.</p>
<p>At the moment it will return an error so remove the <code>exit 1</code> portion of the script to make it work:</p>
<p><code>&quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot;&quot;</code></p>
<h3 id="Hint:">Hint:</h3><p>Typing <code>npm run-script test</code> is a bit lengthy. Fortunately, there are shortcuts built into NPM.</p>
<p>You can use any of the following commands, they are all equivalent:</p>
<ul>
<li><code>npm run-script test</code></li>
<li><code>npm run test</code></li>
<li><code>npm test</code></li>
<li><code>npm tst</code></li>
<li><code>npm t</code></li>
</ul>
<p><br><br>In a real world project, you would use that command to run your unit test script command. By setting the test command to <code>mocha test</code> for example.</p>
<p><br></p>
<h2 id="3)_npm_start_and_stop:">3) npm start and stop:</h2><p>The <a href="https://docs.npmjs.com/cli/start" target="_blank" rel="external">npm-start</a> and <a href="https://docs.npmjs.com/cli/stop" target="_blank" rel="external">npm-stop</a> commands work the same way as the npm-test command. They are typically used to start and stop the application.</p>
<p>Edit your package.json to include the start and stop commands:</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"</span><span class="keyword">Error</span>: <span class="keyword">no</span> <span class="keyword">test</span> specified\<span class="string">""</span>,</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"echo \"</span><span class="keyword">Error</span>: <span class="keyword">no</span> start command specified\<span class="string">""</span>,</span><br><span class="line">    <span class="string">"stop"</span>: <span class="string">"echo \"</span><span class="keyword">Error</span>: <span class="keyword">no</span> stop command specified\<span class="string">""</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>As before, you can use <code>npm run start</code> or the shorter versions:</p>
<ul>
<li><code>npm start</code></li>
<li><code>npm stop</code></li>
</ul>
<p><br></p>
<h2 id="4)_npm_restart:">4) npm restart:</h2><p>If no <code>restart command is specified</code>, <strong>the <a href="https://docs.npmjs.com/cli/restart" target="_blank" rel="external">npm-restart</a> runs a package’s “stop” and “start” consecutively.</strong></p>
<p>At the moment if you run <code>npm restart</code>, you will get:</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm scripts jonathan$ npm restart</span><br><span class="line"></span><br><span class="line">Error: no <span class="built_in">stop</span> <span class="command"><span class="keyword">command</span> <span class="title">specified</span></span></span><br><span class="line"></span><br><span class="line">Error: no <span class="built_in">start</span> <span class="command"><span class="keyword">command</span> <span class="title">specified</span></span></span><br></pre></td></tr></table></figure>
<p>If you add the following <code>restart</code> command in your package: <code>&quot;restart&quot;: &quot;echo \&quot;Error: no restart command specified\&quot;&quot;</code> and run <code>npm restart</code>, you will get:</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> scripts jonathan$ <span class="built_in">npm</span> restart</span><br><span class="line"></span><br><span class="line"><span class="attribute">Error</span>: <span class="literal">no</span> restart command specified</span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="5)_Custom_scripts">5) Custom scripts</h2><p>On top of these defaults, you can of course add your own commands.</p>
<p>For example, add <code>&quot;custom&quot;: &quot;echo \&quot;Running custom command\&quot;&quot;</code> to your package.</p>
<p>And run it using <code>npm run custom</code>.</p>
<p>All custom commands have to be run using the <code>npm run &lt;command&gt;</code> or <code>npm run-script &lt;command&gt;</code> syntax.</p>
<p>Happy scripting !</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://www.npmjs.com/">npm</a> is an awesome tool built directly inside of Node.js. You can use it to configure and run common scripts like running your unit tests or starting your webserver.</p>
<p>npm has 4 default <a href="https://docs.npmjs.com/misc/scripts">npm-scripts commands</a>:</p>
<ul>
<li>test</li>
<li>start</li>
<li>stop</li>
<li>restart</li>
</ul>
<p>We will look into all these and see how to create custom commands.</p>]]>
    
    </summary>
    
      <category term="Node" scheme="http://klugjo.github.io/tags/Node/"/>
    
      <category term="npm" scheme="http://klugjo.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Add Google Analytics to your hexo blog]]></title>
    <link href="http://klugjo.github.io/2015/12/Add-Google-Analytics-to-your-hexo-blog/"/>
    <id>http://klugjo.github.io/2015/12/Add-Google-Analytics-to-your-hexo-blog/</id>
    <published>2015-12-06T00:51:43.000Z</published>
    <updated>2015-12-06T01:09:22.000Z</updated>
    <content type="html"><![CDATA[<p>This post will show you how to integrate <a href="https://www.google.com/analytics/" target="_blank" rel="external">Google Analytics</a> to your <a href="https://hexo.io/" target="_blank" rel="external">Hexo blog</a>.</p>
<a id="more"></a> 
<p><br></p>
<h2 id="1)_The_easy_way-_When_your_theme_already_supports_Google_Analytics-">1) The easy way. When your theme already supports Google Analytics.</h2><p>If you are lucky, your theme already support Google Analytics. This is the case for the <a href="https://github.com/tommy351/hexo-theme-landscape" target="_blank" rel="external">default theme</a> and <a href="https://github.com/hexojs/hexo-theme-light" target="_blank" rel="external">Light</a>, the theme I started with.</p>
<p>Grab your site’s Google Analytics tracking ID. It should look something like <strong>UA-83746351-2</strong></p>
<p>Then go to your theme’s main <code>_config.yml</code> and look for a property called <code>google_analytics</code>. Fill in your tracking ID.</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">google_analytics</span>: <span class="string">UA-83746351-2</span></span><br></pre></td></tr></table></figure>
<p>Google Analytics has been added to your site !</p>
<p><br></p>
<h2 id="2)_The_not_so_difficult_way-_When_you_have_to_implement_the_tracking_code_yourself-">2) The not so difficult way. When you have to implement the tracking code yourself.</h2><p>Following 1), prepare your Google Analytics tracking ID and add the following property to your theme’s <code>_config.yml</code>:</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">google_analytics</span>: <span class="string">UA-83746351-2</span></span><br></pre></td></tr></table></figure>
<p>Once this is done, let’s add the Analytics code to each page. </p>
<p>Create a new <code>google_analytics.ejs</code> file with the following code: (I am using EJS so adapt the code to the templating engine you are using)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.google_analytics)&#123; %&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="scheme"></span><br><span class="line">	<span class="list">(<span class="keyword">function</span><span class="list">(<span class="keyword">i</span>,s,o,g,r,a,m)</span>&#123;i<span class="list">[<span class="variable">'GoogleAnalyticsObject</span>']=r<span class="comment">;i[r]=i[r]||function()&#123;</span></span><br><span class="line">		<span class="list">(<span class="keyword">i</span><span class="list">[<span class="keyword">r</span>].q=i<span class="list">[<span class="keyword">r</span>].q||<span class="list">[]).push<span class="list">(<span class="keyword">arguments</span>)</span>&#125;,i<span class="list">[<span class="keyword">r</span>].l=1*new Date<span class="list">()</span><span class="comment">;a=s.createElement(o),</span></span><br><span class="line">			m=s.getElementsByTagName<span class="list">(<span class="keyword">o</span>)</span><span class="list">[<span class="keyword">0</span>]<span class="comment">;a.async=1;a.src=g;m.parentNode.insertBefore(a,m)</span></span><br><span class="line">	&#125;)<span class="list">(<span class="keyword">window</span>,document,<span class="variable">'script</span>',<span class="variable">'//www.google-analytics.com/analytics.js</span>',<span class="variable">'ga</span>')</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">	ga<span class="list">(<span class="variable">'create</span>', <span class="variable">'&lt;%=</span> theme.google_analytics %&gt;', <span class="variable">'auto</span>')</span><span class="comment">;</span></span><br><span class="line">	ga<span class="list">(<span class="variable">'send</span>', <span class="variable">'pageview</span>')</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line"></span></span></span></span></span></span></span></span></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">%</span> &#125; %&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>This code is the Universal Analytics tracking code with a parameterized tracking ID.</p>
<p>Integrate this template to your theme so that it is included in the <code>&lt;head&gt;</code> tag of each page once the site is generated. Done !</p>
<p>Happy analyzing !</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This post will show you how to integrate <a href="https://www.google.com/analytics/">Google Analytics</a> to your <a href="https://hexo.io/">Hexo blog</a>.</p>]]>
    
    </summary>
    
      <category term="Analytics" scheme="http://klugjo.github.io/tags/Analytics/"/>
    
      <category term="Hexo" scheme="http://klugjo.github.io/tags/Hexo/"/>
    
      <category term="Node" scheme="http://klugjo.github.io/tags/Node/"/>
    
  </entry>
  
</feed>

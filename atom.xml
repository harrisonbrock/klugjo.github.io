<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[CodeBlocQ]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://klugjo.github.io/"/>
  <updated>2016-03-08T14:25:02.000Z</updated>
  <id>http://klugjo.github.io/</id>
  
  <author>
    <name><![CDATA[Klughertz Jonathan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Create an Hexo Theme - Part 1: Index]]></title>
    <link href="http://klugjo.github.io/2016/03/Create-an-Hexo-Theme-Part-1-Index/"/>
    <id>http://klugjo.github.io/2016/03/Create-an-Hexo-Theme-Part-1-Index/</id>
    <published>2016-03-08T04:17:41.000Z</published>
    <updated>2016-03-08T14:25:02.000Z</updated>
    <content type="html"><![CDATA[<p>In this multi part tutorial, you will learn how to create an <a href="https://hexo.io/docs/themes.html" target="_blank" rel="external">Hexo Theme</a> from scratch. I really love Hexo and use it everyday; unfortunately, as of today, the documentation for theme creation is seriously lacking. Here is my attempt at fixing that.</p>
<a id="more"></a>
<h2 id="Links_to_other_sections">Links to other sections</h2><ul>
<li><a href="/2016/03/Create-an-Hexo-Theme-Part-1-Index/">Part 1: Setting up the project and creating the blog’s main index page</a></li>
</ul>
<h2 id="Project_Description">Project Description</h2><p>This project will focus on how Hexo generates HTML files based on the theme’s template file. </p>
<p>Since I don’t want to lose too much time on the HTML and CSS parts we are going to recreate the following theme in Hexo: <a href="http://getbootstrap.com/examples/blog/" target="_blank" rel="external">http://getbootstrap.com/examples/blog/</a>. It is one of the standard <a href="http://getbootstrap.com/getting-started/#examples-custom" target="_blank" rel="external">Getting Started Template Examples</a> in the Boostrap documentation.</p>
<p>We are going to reuse the CSS and copy paste the HTML, piece by piece, until we have achieved what we want.</p>
<h2 id="Project_setup">Project setup</h2><h3 id="Create_a_new_hexo_blog">Create a new hexo blog</h3><p>Let’s get started with a brand new hexo installation.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create a new folder</span></span><br><span class="line">mkdir hexo-theme-creation </span><br><span class="line"><span class="built_in">cd</span> hexo-theme-creation</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialise Hexo</span></span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<h3 id="Create_the_theme_folder">Create the theme folder</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Enter the theme folder</span></span><br><span class="line"><span class="built_in">cd</span> themes</span><br><span class="line"></span><br><span class="line"><span class="comment"># bootstrap-blog-hexo is also going to be the name of our theme</span></span><br><span class="line">mkdir bootstrap-blog-hexo</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong> If you want to save the theme to git (as you should), initialise git inside <code>/themes/bootstrap-blog-hexo/</code>. </p>
<h3 id="Folder_structure">Folder structure</h3><p>Here are the files and folders we will need to get started:</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|-- <span class="keyword">layout</span> <span class="comment">// .ejs templates </span></span><br><span class="line">|-- <span class="keyword">source</span> <span class="comment">// source files (CSS, scripts)</span></span><br><span class="line">|-- _config.yml</span><br></pre></td></tr></table></figure>
<p>Create these 2 folders and the <code>_config.yml</code> file.</p>
<ul>
<li><code>/layout/</code> will <a href="https://hexo.io/docs/themes.html#layout" target="_blank" rel="external">contain all our EJS templates</a></li>
<li><code>/source/</code> will <a href="https://hexo.io/docs/themes.html#source" target="_blank" rel="external">contain our assets</a> (CSS files, external scripts and libraries)</li>
<li><code>_config.yml</code> contains our <a href="https://hexo.io/docs/themes.html#config-yml" target="_blank" rel="external">theme configuration</a>. Leave it empty for now.</li>
</ul>
<h3 id="Copy_the_bootstrap_blog_assets_over">Copy the bootstrap blog assets over</h3><p>In our source folder, copy all the assets we need from the <a href="http://getbootstrap.com/examples/blog/" target="_blank" rel="external">bootstrap blog template</a>. View source from your browser and copy everything over or <a href="https://s3.amazonaws.com/klugjo.github.io/source-hex-blog-creation.zip" target="_blank" rel="external">download this package</a> and extract it in your source folder.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">|-- layout </span><br><span class="line">|-- source </span><br><span class="line">    |-- bootstrap <span class="comment">// Copy the boostrap library files here </span></span><br><span class="line">    |-- css <span class="comment">// Copy the blog's css file here</span></span><br><span class="line">    |-- favicon</span><br><span class="line">        |-- favicon.ico <span class="comment">// Your choice of favicon</span></span><br><span class="line">    |-- js <span class="comment">// Copy the blog's js file here</span></span><br><span class="line">|-- _config.yml</span><br></pre></td></tr></table></figure>
<h2 id="Basics_of_Hexo">Basics of Hexo</h2><p>Before we write our first template file, let’s look at the basic of Hexo blog generation.</p>
<h3 id="Page_types">Page types</h3><p>Corresponds to the <a href="https://hexo.io/docs/templates.html" target="_blank" rel="external">6 types of pages</a> we can define in our theme, every singe HTML page generated in the public folder belongs to one of these templates:</p>
<table>
<thead>
<tr>
<th>Template</th>
<th>Fallback</th>
<th>Page Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>index</code></td>
<td>None</td>
<td>This the home page of the blog, the main entry point. In our case it will display a list of blog excerpts.</td>
</tr>
<tr>
<td><code>post</code></td>
<td><code>index</code></td>
<td>This is the detail page for posts. Here we will display only one post in full, with a comment section.</td>
</tr>
<tr>
<td><code>page</code></td>
<td><code>index</code></td>
<td>This is the detail page for pages. Same as post but for ‘page type’ posts. </td>
</tr>
<tr>
<td><code>archive</code></td>
<td><code>index</code></td>
<td>This is the archive page. It will display a list of all the posts in our blog with just titles and links to the detail page.</td>
</tr>
<tr>
<td><code>category</code></td>
<td><code>archive</code></td>
<td>This is the category page. Similar to the archive page but filtered for one category.</td>
</tr>
<tr>
<td><code>tag</code></td>
<td><code>archive</code></td>
<td>This is the tag page. Similar to the archive page page but filtered for one tag.</td>
</tr>
</tbody>
</table>
<p>In this part of the tutorial we will build the <code>index</code>.</p>
<p>During the generation is Hexo will look for files named <code>index.ejs</code>, <code>post.ejs</code>, <code>page.ejs</code> and so on. These templates are then rendered to create the static HTML pages.</p>
<h3 id="Common_Layout">Common Layout</h3><p>Hexo supports the use of a <a href="https://hexo.io/docs/templates.html#Layouts" target="_blank" rel="external">common layout file</a> that will be used by all the templates above.</p>
<p>This file has to be named <code>layout.ejs</code>. It acts as a wrapper around the content rendered by the different page type templates above.</p>
<p>In our theme, the <code>layout</code> will contain: the <code>&lt;html&gt;</code> and <code>&lt;head&gt;</code> tags, the header and menu as well as the footer and the sidebar. Basically all the elements that are common to all pages.</p>
<p>The different page templates will only be responsible for creating the actual content, that will be placed inside our main container.</p>
<h3 id="Variables">Variables</h3><p>Inside all our templates, we have access to some <a href="https://hexo.io/docs/variables.html" target="_blank" rel="external">variables that are injected by the hexo engine</a>. Here are some of them:</p>
<h4 id="-_Site">- Site</h4><p><code>site</code> contains site wide information. For example, with <code>site.posts</code> we can access all the posts in the blog. Useful if we want to display statistics in a widget for example. </p>
<h4 id="-_Page">- Page</h4><p><code>page</code> is the main variable and contains a lot of information related to the current page, including all the post titles, dates, content and so on.</p>
<p>The properties of that object depend on which page template (index, post, archives) we are on. The full list <a href="https://hexo.io/docs/variables.html" target="_blank" rel="external">is available here</a>; but let’s look at them as we go.</p>
<h4 id="-_Config">- Config</h4><p><code>config</code> is a JavaScript object representation of the main <code>_config.yml</code> of the blog.</p>
<h4 id="-_Theme">- Theme</h4><p><code>theme</code> is a JavaScript object representation of the theme’s <code>_config.yml</code>.</p>
<h2 id="Theme’s_layout_creation">Theme’s layout creation</h2><p>We will start by creating the <code>/layout/layout.ejs</code> file discussed above.</p>
<h3 id="The_head_section">The head section</h3><p>Let’s start by creating a layout.ejs file and inserting the <code>&lt;html&gt;&lt;/html&gt;</code> </p>
<figure class="highlight html"><figcaption><span>layout/layout.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Head tag --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">head</span>') %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Here we are extracting all the <code>&lt;head&gt;</code> code into a <a href="https://hexo.io/docs/templates.html#Partials" target="_blank" rel="external">partial view</a>. Partial views promote separation of concern and reusability in our code. </p>
<p>The syntax is <code>partial(&#39;path&#39; [, arguments])</code></p>
<p>After creating that <code>layout/_partial/head.ejs</code> file, we are going to copy the head code from the bootstrap source code:</p>
<figure class="highlight html"><figcaption><span>layout/_partial/head.ejs </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"favicon/favicon.ico"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Blog Template for Bootstrap<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">css</span>('<span class="attr">bootstrap</span>/<span class="attr">css</span>/<span class="attr">bootstrap.min.css</span>') %&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- IE10 viewport hack for Surface/desktop Windows 8 bug --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">css</span>('<span class="attr">css</span>/<span class="attr">ie10-viewport-bug-workaround.css</span>') %&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Custom styles for this template --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">css</span>('<span class="attr">css</span>/<span class="attr">blog.css</span>') %&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--[if lt IE 9]&gt;</span><br><span class="line">        &lt;script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;![endif]--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Pretty straightforward. All we have done is use <a href="https://hexo.io/docs/helpers.html#css" target="_blank" rel="external">a CSS helper</a> to insert our style sheets.</p>
<p>The files in our <code>source</code> folder will be copied at the root of our generated site, so <code>source/</code> should not be included in the paths.</p>
<p>We will make the <code>&lt;title&gt;</code> and meta tags dynamic down the line but let’s leave it like so for now.</p>
<h3 id="The_after_footer_section">The after footer section</h3><p>The after footer section will be included just before the end of our <code>&lt;body&gt;</code> section. In that partial view, we will include all our scripts.</p>
<p>Let’s modify the layout:</p>
<figure class="highlight html"><figcaption><span>layout/layout.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Head tag --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">head</span>') %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- After footer scripts --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">after-footer</span>') %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>And create the content of the new <code>layout/_partial/after-footer.ejs</code> partial:</p>
<figure class="highlight html"><figcaption><span>layout/_partial/after-footer.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">js</span>('<span class="attr">bootstrap</span>/<span class="attr">js</span>/<span class="attr">bootstrap.min.js</span>') %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- IE10 viewport hack for Surface/desktop Windows 8 bug --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">js</span>('<span class="attr">js</span>/<span class="attr">ie10-viewport-bug-workaround.js</span>') %&gt;</span></span><br></pre></td></tr></table></figure>
<p>Notice the use of <a href="https://hexo.io/docs/helpers.html#js" target="_blank" rel="external">a JS helper function</a> for our local js files.</p>
<h3 id="Top_Menu">Top Menu</h3><p>In a similar fashion, let’s create the top menu just after the opening <code>&lt;body&gt;</code> tag.</p>
<figure class="highlight html"><figcaption><span>layout/layout.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// [...]</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Menu --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">menu</span>') %&gt;</span></span><br><span class="line">    </span><br><span class="line">// [...]</span><br></pre></td></tr></table></figure>
<p><code>layout/_partial/menu.ejs</code> partial content:</p>
<figure class="highlight html"><figcaption><span>layout/_partial/menu.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blog-masthead"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"blog-nav"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%</span> <span class="attr">for</span> (<span class="attr">var</span> <span class="attr">i</span> <span class="attr">in</span> <span class="attr">theme.menu</span>)&#123; %&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"blog-nav-item"</span> <span class="attr">href</span>=<span class="string">"&lt;%- url_for(theme.menu[i]) %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">i</span> %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Note the use of the <code>theme</code> global variable. <code>theme</code> is the JS equivalent to the theme’s <code>_config.yml</code>.</p>
<p>Here we are making the menu configurable in the theme’s configuration.</p>
<p>For this to work we will then need to add the config in <code>_config.yml</code>:</p>
<figure class="highlight bash"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Header</span></span><br><span class="line">menu:</span><br><span class="line">  Home: /</span><br><span class="line">  Archives: /archives</span><br></pre></td></tr></table></figure>
<p>In <code>menu.ejs</code> we enumerate through all the menu items in the config and create the corresponding links.</p>
<h3 id="Header">Header</h3><p>The header will be placed just below the menu and contain the blog title and subtitle:</p>
<figure class="highlight html"><figcaption><span>layout/_partial/header.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blog-header"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"blog-title"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">config.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"lead blog-description"</span>&gt;</span><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">config.subtitle</span>)&#123; %&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">config.subtitle</span> %&gt;</span><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>In here, we make use of the <code>config</code> variable which corresponds to the main <code>_config.yml</code> of the blog. It should have a title and subtitle properties configured.</p>
<p>When inserting the header in the layout, beware of the <code>&lt;div class=&quot;container&quot;&gt;&lt;/div&gt;</code> wrapper:</p>
<figure class="highlight html"><figcaption><span>layout/layout.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Head tag --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">head</span>') %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Menu --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">menu</span>') %&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Blog Header: title and subtitle --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">header</span>') %&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">// [...]</span><br></pre></td></tr></table></figure>
<h3 id="Footer">Footer</h3><p>The footer is all static for now, here is the content of the partial view:</p>
<figure class="highlight html"><figcaption><span>layout/_partial/footer.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"blog-footer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Blog template built for <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://getbootstrap.com"</span>&gt;</span>Bootstrap<span class="tag">&lt;/<span class="name">a</span>&gt;</span> by <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://twitter.com/mdo"</span>&gt;</span>@mdo<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Adapted to Hexo by <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.codeblocq.com/"</span>&gt;</span>klugjo<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Back to top<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Main_content_and_sidebar">Main content and sidebar</h3><p>At this point, we are ready to wrap things up and add the main content as well as the sidebar.</p>
<p>Here is the final <code>layout.ejs</code>:</p>
<figure class="highlight html"><figcaption><span>layout/layout.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Head tag --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">head</span>') %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Menu --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">menu</span>') %&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Blog Header: title and subtitle --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">header</span>') %&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- Main Content --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-8 blog-main"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">%-</span> <span class="attr">body</span> %&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- Sidebar --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-3 col-sm-offset-1 blog-sidebar"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">sidebar</span>') %&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Footer --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">footer</span>') %&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- After footer scripts --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">after-footer</span>') %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>The <code>body</code> variable corresponds to the content rendered from the different page type templates (cf above).</p>
<p>For the sidebar partial, we are simply going to hardcode the bootstrap template code for now:</p>
<figure class="highlight html"><figcaption><span>layout/_partial/sidebar.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar-module sidebar-module-inset"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>About<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Etiam porta <span class="tag">&lt;<span class="name">em</span>&gt;</span>sem malesuada magna<span class="tag">&lt;/<span class="name">em</span>&gt;</span> mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar-module"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Archives<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"list-unstyled"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>March 2014<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>February 2014<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>January 2014<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>December 2013<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>November 2013<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar-module"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Elsewhere<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"list-unstyled"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>GitHub<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Twitter<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Facebook<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="The_index_file">The index file</h2><p>Now that our layout is in place, we are ready to create the first page type template: index.ejs.</p>
<p>Here is a trivial first version:</p>
<figure class="highlight html"><figcaption><span>layout/index.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Useless ? Well, this allows us to test out theme in browser:</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Verify that everything is alright</span></span><br><span class="line">hexo generate</span><br><span class="line"></span><br><span class="line"><span class="meta"># Start hexo server</span></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p>And open your browser at <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>. Tada !</p>
<p><strong>Note: Don’t forget to update the theme in your blog’s config:</strong></p>
<figure class="highlight bash"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: http://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: http://hexo.io/themes/</span></span><br><span class="line">theme: bootstrap-blog-hexo</span><br></pre></td></tr></table></figure>
<h3 id="Enumerate_through_blog_posts">Enumerate through blog posts</h3><p>On the home page we want to display post excerpts.</p>
<p>First of all, let’s enumerate through the posts in our index.ejs:</p>
<figure class="highlight html"><figcaption><span>layout.index.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">page.posts.each</span>(<span class="attr">function</span>(<span class="attr">item</span>)&#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">article-excerpt</span>', &#123;<span class="attr">item:</span> <span class="attr">item</span>&#125;) %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125;); %&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Get a list of posts for that page with <code>page.posts</code></li>
<li>Pass an argument in a partial by using <code>&lt;%- partial(&#39;name&#39;, args) %&gt;</code></li>
</ul>
<h3 id="Article_layout">Article layout</h3><p>Let’s create the <code>article-excerpt.ejs</code> partial and adapt the code to our theme. Here is what I came up with:</p>
<figure class="highlight html"><figcaption><span>layout/_partial/article-excerpt.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blog-post"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Title --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"blog-post-title"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- config.root %&gt;&lt;%- item.path %&gt;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%-</span> <span class="attr">item.title</span> %&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Date and Author --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"blog-post-meta"</span>&gt;</span></span><br><span class="line">        January 1, 2014</span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">item.author</span>) &#123; %&gt;</span></span><br><span class="line">            by <span class="tag">&lt;<span class="name">%-</span> <span class="attr">item.author</span> %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">item.excerpt</span> || <span class="attr">item.content</span> %&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Only display the Read More link if we are displaying an excerpt --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">item.excerpt</span>) &#123; %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- config.root %&gt;&lt;%- item.path %&gt;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">%=</span> <span class="attr">theme.excerpt_link</span> %&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="-_Link_to_the_full_post:">- Link to the full post:</h3><p>The link to the full post is created by concatenating <code>config.root</code> (config option which really shoud be equal to <code>/</code>) and <code>item.path</code> which is the relative path or link to the full post.</p>
<h3 id="-_Post_author">- Post author</h3><p>By default, Hexo does not have any author property in it’s post variable. But we can add whatever variable we want to the <a href="https://hexo.io/docs/front-matter.html" target="_blank" rel="external">front matter</a>. </p>
<p>If you want an author name to be displayed for a post, the front matter for your post should look something like</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> Hello World</span><br><span class="line"><span class="attr">author:</span> Klughertz Jonathan</span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<h3 id="-_Item_excerpt_vs-_Item_content">- Item excerpt vs. Item content</h3><p>When writing a post with Hexo, you can use a <code>&lt;!-- more --&gt;</code> tag to delimit the excerpt from the content. In our case, we are displaying the excerpt since this is a list of posts.</p>
<p>The user then has the possibility to click on a post’s title or on the read more link to view the entire post.</p>
<h3 id="-_Read_More_text">- Read More text</h3><p>I have added a new property to my theme’s config, do not forget to add it to yours:</p>
<figure class="highlight bash"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Read More text</span></span><br><span class="line">excerpt_link: Read More</span><br></pre></td></tr></table></figure>
<p>Hopefully the rest of the code is easy enough to understand. At this point, I suggest you write a few additional posts than the default Hello World and play around with the results.</p>
<h2 id="Pagination">Pagination</h2><p>The last thing we are going to tackle in this section is the pagination for the home page</p>
<p>Let’s start by including yet another partial to our <code>index.ejs</code>:</p>
<figure class="highlight html"><figcaption><span>layout/index.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">page.posts.each</span>(<span class="attr">function</span>(<span class="attr">item</span>)&#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">article-excerpt</span>', &#123;<span class="attr">item:</span> <span class="attr">item</span>&#125;) %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125;); %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">pagination</span>') %&gt;</span></span><br></pre></td></tr></table></figure>
<p>And finish by writing our pagination partial view, <code>layout/_partial/pagination.ejs</code>:</p>
<figure class="highlight html"><figcaption><span>layout/_partial/pagination.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">page.prev</span>)&#123; %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- config.root %&gt;&lt;%- page.prev_link %&gt;"</span>&gt;</span>Previous<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">page.next</span>)&#123; %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- config.root %&gt;&lt;%- page.next_link %&gt;"</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>page.prev</code>: Previous page number. 0 if the current page is the first.</li>
<li><code>page.next</code>: Next page number. 0 if the current page is the last.</li>
<li><code>page.next_link</code> and <code>page.prev_link</code> are self explanatory.</li>
</ul>
<p>You can adjust the post per page in the main config (<code>per_page</code> property) if you don’t have enough posts to see the pagination in action.</p>
<p>That’s it for today, in the next section of this tutorial, we will finish the remaining pages of the blog.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>In this multi part tutorial, you will learn how to create an <a href="https://hexo.io/docs/themes.html">Hexo Theme</a> from scratch. I really love Hexo and use it everyday; unfortunately, as of today, the documentation for theme creation is seriously lacking. Here is my attempt at fixing that.</p>]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://klugjo.github.io/tags/Hexo/"/>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
      <category term="Theme" scheme="http://klugjo.github.io/tags/Theme/"/>
    
      <category term="Bootstrap" scheme="http://klugjo.github.io/tags/Bootstrap/"/>
    
      <category term="Template" scheme="http://klugjo.github.io/tags/Template/"/>
    
      <category term="EJS" scheme="http://klugjo.github.io/tags/EJS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Setup Gulp to compile ES6 ES2015 code]]></title>
    <link href="http://klugjo.github.io/2016/03/Setup-Gulp-to-compile-ES6-ES2015-code/"/>
    <id>http://klugjo.github.io/2016/03/Setup-Gulp-to-compile-ES6-ES2015-code/</id>
    <published>2016-03-07T09:20:16.000Z</published>
    <updated>2016-03-07T09:45:59.000Z</updated>
    <content type="html"><![CDATA[<p>Basics of setting yourself up with Gulp and Babel. </p>
<p>In this example I am going to look at compiling ES6 to ES5 using Babel, but this example will work with compiling your React jsx code as well. As long a you know how to configure Babel.</p>
<a id="more"></a>
<h2 id="Project_Structure">Project Structure</h2><p>This is what my project folder structure looks like:</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|<span class="comment">-- dist // Build will end up here</span></span><br><span class="line">|<span class="comment">-- src // All source code should be inside this folder</span></span><br><span class="line">    |<span class="comment">-- index.js </span></span><br><span class="line">|<span class="comment">-- gulpfile.js</span></span><br></pre></td></tr></table></figure>
<p>Our <code>src/index.js</code> contains the ES6 code and gulp will create a compiled version inside the <code>/dist</code> folder.</p>
<p>The ES2015 code I am using to test is</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(() =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">"ES2015 FTW"</span>); &#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<h2 id="npm_install">npm install</h2><p>Let’s install everything we need</p>
<h3 id="Babel">Babel</h3><p>We need the babel core, CLI and es2015 preset:</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install </span>--save-dev <span class="keyword">babel-cli </span><span class="keyword">babel-core </span><span class="keyword">babel-preset-es2015</span></span><br></pre></td></tr></table></figure>
<h3 id="Gulp">Gulp</h3><p>We need gulp and the <a href="https://github.com/babel/gulp-babel" target="_blank" rel="external">babel module for gulp</a>.</p>
<figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> gulp gulp-babel</span><br></pre></td></tr></table></figure>
<p>Also make sure you have <code>gulp</code> installed globally.</p>
<h2 id="Configuration">Configuration</h2><h3 id="Babel-1">Babel</h3><p>Configure babel to use the es2015 plugin in your package.json (or .babelrc if you prefer).</p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"babel"</span>: &#123;</span><br><span class="line">    <span class="string">"presets"</span>: [<span class="string">"es2015"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Gulp-1">Gulp</h3><p>Create your <code>gulpfile.js</code> and require the two gulp libs:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>);</span><br></pre></td></tr></table></figure>
<p>Then declare our default task:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Then for our task content: </p>
<ul>
<li>Pick up the js files in <code>/src</code></li>
<li>Compile it with babel</li>
<li>Put everything in <code>/dist</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'src/**/*.js'</span>)</span><br><span class="line">        .pipe(babel())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'dist'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Run_the_build_script">Run the build script</h2><p>Run the build script using </p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>gulp</span><br></pre></td></tr></table></figure>
<p>And your compiled files will be in the output folder.</p>
<p>This is what my <code>index.js</code> looks like after being transpiled:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"ES6 FTW"</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Note">Note</h3><p>If you want to write your <code>gulpfile.js</code> in ES2015 and your version of node does not support it, <a href="https://markgoodyear.com/2015/06/using-es6-with-gulp/" target="_blank" rel="external">follow the instructions in this article</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Basics of setting yourself up with Gulp and Babel. </p>
<p>In this example I am going to look at compiling ES6 to ES5 using Babel, but this example will work with compiling your React jsx code as well. As long a you know how to configure Babel.</p>]]>
    
    </summary>
    
      <category term="Babel" scheme="http://klugjo.github.io/tags/Babel/"/>
    
      <category term="ES2015" scheme="http://klugjo.github.io/tags/ES2015/"/>
    
      <category term="ES6" scheme="http://klugjo.github.io/tags/ES6/"/>
    
      <category term="Gulp" scheme="http://klugjo.github.io/tags/Gulp/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Unit Test React Components]]></title>
    <link href="http://klugjo.github.io/2016/03/Unit-Test-React-Components/"/>
    <id>http://klugjo.github.io/2016/03/Unit-Test-React-Components/</id>
    <published>2016-03-02T06:04:35.000Z</published>
    <updated>2016-03-03T03:46:46.000Z</updated>
    <content type="html"><![CDATA[<p>In this article you will learn how to setup your environment and get started with React Unit Testing. The setup I am detailing here is inspired by <a href="http://teropa.info/blog/2015/09/10/full-stack-redux-tutorial.html#the-client-application" target="_blank" rel="external">this much longer yet amazing tutorial</a>.</p>
<p>To get the most out of this post, it’s best if you have had some exposure to at least some of these frameworks/tools:</p>
<ul>
<li><strong>Node.js and NPM:</strong> install packages and <a href="/2015/12/Run-scripts-with-npm/">run custom scripts</a></li>
<li><strong>webpack:</strong> Basic configuration to compile code and launch a web server</li>
<li><strong>React:</strong> <a href="/2015/12/Build-your-first-React-application/">Basics of writing components</a></li>
<li><strong>mocha:</strong> Run unit tests with mocha</li>
<li><strong>chai:</strong> Basics of writing unit tests with chai</li>
<li><strong>Babel:</strong> <a href="/2016/02/How-to-setup-Babel6-for-NodeJs/">Compile ES6</a> and React code with Babel</li>
<li><strong>ES6:</strong> <a href="/2016/02/Babel-and-Node-Module-Loader/">Import statement</a> and some of the new additions to the language</li>
</ul>
<a id="more"></a>
<h2 id="Project_Setup">Project Setup</h2><p>Everything we need to write our first React component.</p>
<h3 id="NPM">NPM</h3><p>Let’s get started with a new NPM project</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">npm</span> init -y</span><br></pre></td></tr></table></figure>
<h3 id="Dist_Folder">Dist Folder</h3><p>Create a <code>dist</code> folder and an <code>dist/index.html</code> file that will be the shell for our React code.</p>
<p>Here is the HTML code we will use:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>We will use <code>webpack</code> to generate <code>bundle.js</code> from the React code will write later on.</p>
<h3 id="Webpack_&amp;_Babel">Webpack &amp; Babel</h3><h4 id="Install_Webpack_and_Webpack’s_local_web_server_module-">Install Webpack and Webpack’s local web server module.</h4><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> webpack webpack-<span class="built_in">dev</span>-server</span><br></pre></td></tr></table></figure>
<p>If you have not done so, install these modules globally as well: </p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> -g webpack webpack-dev-<span class="keyword">server</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>webpack</code>: base webpack module</li>
<li><code>webpack-dev-server</code>: easy web server with webpack (defaults to <a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a>)</li>
</ul>
<h4 id="We_will_also_need_all_the_Babel_compilers:">We will also need all the Babel compilers:</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install </span>--save-dev <span class="keyword">babel-core </span><span class="keyword">babel-loader </span><span class="keyword">babel-preset-react </span><span class="keyword">babel-preset-es2015</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>babel-core</code>: needed to do anything with babel. Install this globally if you have not already done so.</li>
<li><code>babel-loader</code>: <a href="https://github.com/babel/babel-loader" target="_blank" rel="external">babel plugin for webpack</a>.</li>
<li><code>babel-preset-react</code>: babel plugin to compile our React JSX files.</li>
<li><code>babel-preset-es2015</code>: babel plugin to compile our ES6/ES2015 code.</li>
</ul>
<h4 id="We_are_now_ready_to_write_the_first_version_of_webpack’s_configuration:_webpack-config-js">We are now ready to write the first version of webpack’s configuration: <code>webpack.config.js</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: [</span><br><span class="line">        <span class="string">'./src/index.jsx'</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">            loaders: [&#123;</span><br><span class="line">                test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                loader: <span class="string">'babel'</span></span><br><span class="line">            &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.jsx'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.join(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        publicPath: <span class="string">'/'</span>,</span><br><span class="line">        filename: <span class="string">'bundle.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: <span class="string">'./dist'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>module</code> and <code>resolve</code> contain the Babel configuration.</li>
<li><code>output</code> contains the output <code>bundle.js</code> configuration.</li>
<li><code>devserver</code> indicates which folder should be used as the root for <code>webpack-dev-server</code>.</li>
</ul>
<h3 id="React_libraries">React libraries</h3><p>The start of the show:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save react react-dom</span><br></pre></td></tr></table></figure>
<ul>
<li><code>react</code>: React base module</li>
<li><code>react-dom</code>: to render React component to the DOM</li>
</ul>
<h3 id="Package-json_-_Babel_configuration">Package.json - Babel configuration</h3><p>In your package.json, add the following section to tell Babel to use the ES6 and React plugins. This is usually done in a <code>.babelrc</code> file but <a href="/2016/02/How-to-setup-Babel6-for-NodeJs/">I find it cleaner</a> to put it in <code>package.json</code></p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"babel"</span>: &#123;</span><br><span class="line">    <span class="string">"presets"</span>: [</span><br><span class="line">      <span class="string">"es2015"</span>,</span><br><span class="line">      <span class="string">"react"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<h2 id="App_code">App code</h2><p>Let’s start building !</p>
<h3 id="App_requirements">App requirements</h3><p>This is what our app does. Starting with an array of strings, our component will generate one button for each of these strings. A click on any of the generated buttons should display the button text in a label.</p>
<h3 id="src/index-jsx">src/index.jsx</h3><p>Let’s start with a <code>src/index.jsx</code> file that will hold our component:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> Component <span class="keyword">from</span> <span class="string">'./component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = [<span class="string">'OK'</span>, <span class="string">'No'</span>, <span class="string">'Cancel'</span>];</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Component</span> <span class="attr">options</span>=<span class="string">&#123;options&#125;</span> /&gt;</span>,</span><br><span class="line">    document.getElementById('app')</span><br><span class="line">);</span></span><br></pre></td></tr></table></figure>
<p>We have a <code>Component</code> React class with an <code>options</code> property that will hold our string array.</p>
<h3 id="src/Component-jsx">src/Component.jsx</h3><p>Here is the code for that component, put it in <code>src/Component.jsx</code>:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</span><br><span class="line">    getOptions: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.props.options || [];</span><br><span class="line">    &#125;,</span><br><span class="line">    getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            displayText: <span class="string">"Click on a button"</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    clickHandler: <span class="function"><span class="keyword">function</span> (<span class="params">displayText</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;displayText: displayText&#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;"display-text"&#125;</span>&gt;</span>&#123;this.state.displayText&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            &#123;</span><br><span class="line">                this.getOptions().map(option =&gt;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">key</span>=<span class="string">&#123;option&#125;</span></span><br><span class="line">                            <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.clickHandler(option)&#125;&gt;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;option&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>The initial text in our <code>div.display-text</code> label is <code>&quot;Click on a button&quot;</code>.</li>
<li>We are generating buttons for each string in <code>this.props.options</code>.</li>
<li>A click on one of these buttons will update the state and the label’s text.</li>
</ul>
<p>Pretty straightforward. At this stage, you can to run the app with:</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ webpack-dev-<span class="keyword">server</span></span><br></pre></td></tr></table></figure>
<p>and open your browser at <a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a>.</p>
<h2 id="Unit_testing">Unit testing</h2><p>Let’s now look at why we are here in the first place. Unit testing our newly created <code>Component</code>.</p>
<h3 id="Unit_testing_libraries">Unit testing libraries</h3><p>Let’s start by installing and configuring our Unit testing environment. We will be using:</p>
<ul>
<li><p><code>mocha</code> to run our tests and <code>chai</code> to write them. </p>
</li>
<li><p><code>jsdom</code> to emulate a web browser so that we won’t need a real browser to run our tests.</p>
</li>
<li><p><code>react-addons-test-utils</code> which is the official React test helper library.</p>
</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install </span>--save-dev mocha chai <span class="keyword">jsdom </span>react-<span class="keyword">addons-test-utils</span></span><br></pre></td></tr></table></figure>
<h3 id="Configure_jsdom">Configure <code>jsdom</code></h3><p><a href="https://github.com/tmpvar/jsdom" target="_blank" rel="external">jsdom</a> requires some configuration that we will put in a <code>test/test-helper.js</code> file. Later, <code>mocha</code> will run this file before running any test.</p>
<p>We need to set up a basic HTML environment for <code>jsdom</code> and transfers the <code>window</code> object and all its properties to Node’s global object so that mocha can access them seamlessly.</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import jsdom from 'jsdom';</span><br><span class="line"></span><br><span class="line"><span class="comment">// Setup a basic HTML document</span></span><br><span class="line"><span class="keyword">const</span> doc = jsdom.jsdom('&lt;!doctype html&gt;&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;');</span><br><span class="line"></span><br><span class="line"><span class="comment">// Extract the window element from the document</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">win</span> = doc.defaultView;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Insert these objects in Node's global object.</span></span><br><span class="line"><span class="keyword">global</span>.document = doc;</span><br><span class="line"><span class="keyword">global</span>.<span class="keyword">window</span> = <span class="keyword">win</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Take out all the properties from the window object and add them to global</span></span><br><span class="line">Object.keys(<span class="keyword">window</span>).<span class="keyword">forEach</span>((key) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(key <span class="keyword">in</span> <span class="keyword">global</span>)) &#123;</span><br><span class="line">        <span class="keyword">global</span>[key] = <span class="keyword">window</span>[key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="package-json_-_Test_script">package.json - Test script</h3><p>Our Mocha command is pretty complex so let’s add a script in the the package.json.</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"mocha --compilers js:babel-core/register --require ./test/test-helper.js 'test/**/*.@(js|jsx)'"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>Now we can simply type <code>npm run test</code> to run our tests.</p>
<p>Details on that command:</p>
<ul>
<li><code>&#39;test/**/*.@(js|jsx)&#39;</code>: It runs all mocha unit tests in <code>.js</code> and <code>.jsx</code> files in the <code>/test/</code> folder.</li>
<li><code>--compilers js:babel-core/register</code>: It compiles the ES6 and React code with Babel. You might have to install <code>babel-core</code> globally to execute that command. Do so if you run into problems.</li>
<li><code>--require ./test/test-helper.js</code>: It executes our jsdom configuration in <code>test/test-helper.js</code> before running the tests.</li>
</ul>
<h3 id="Writing_the_first_test">Writing the first test</h3><p>And the moment we have all been waiting for: our first test in <code>test/Component-spec.jsx</code>.</p>
<p>Let’s start bu testing the button generation:</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    renderIntoDocument,</span><br><span class="line">    scryRenderedDOMComponentsWithTag</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-addons-test-utils'</span>;</span><br><span class="line"><span class="keyword">import</span> Component <span class="keyword">from</span> <span class="string">'../src/Component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;expect&#125; <span class="keyword">from</span> <span class="string">'chai'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'Component'</span>, () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="literal">it</span>(<span class="string">'renders as many buttons as stated in the options property'</span>, () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> component = renderIntoDocument(</span><br><span class="line">            &lt;Component options=&#123;[<span class="string">'Bleach'</span>, <span class="string">'Nevermind'</span>, <span class="string">'In Utero'</span>]&#125; /&gt;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> buttons = scryRenderedDOMComponentsWithTag(component, <span class="string">'button'</span>);</span><br><span class="line"></span><br><span class="line">        expect(buttons.length).<span class="keyword">to</span>.equal(<span class="number">3</span>);</span><br><span class="line">        expect(buttons[<span class="number">0</span>].textContent).<span class="keyword">to</span>.equal(<span class="string">'Bleach'</span>);</span><br><span class="line">        expect(buttons[<span class="number">1</span>].textContent).<span class="keyword">to</span>.equal(<span class="string">'Nevermind'</span>);</span><br><span class="line">        expect(buttons[<span class="number">2</span>].textContent).<span class="keyword">to</span>.equal(<span class="string">'In Utero'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Imports">Imports</h3><p>We are going to use some of the <a href="https://facebook.github.io/react/docs/test-utils.html" target="_blank" rel="external">react test utils methods</a>:</p>
<ul>
<li><code>renderIntoDocument</code>: renders a component into a detached DOM.</li>
<li><code>scryRenderedDOMComponentsWithTag</code>: finds all instances of components based on tag name</li>
</ul>
<h3 id="Test_Flow">Test Flow</h3><p>We start by rendering our <code>Component</code>, then retrieve all the <buttons> and test that the button’s text is what we set in the <code>options</code> property.</buttons></p>
<h3 id="Run_the_tests">Run the tests</h3><p>Run this test using</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="built_in">run</span> test</span><br><span class="line"><span class="comment"># 1 passing (43ms)</span></span><br></pre></td></tr></table></figure>
<h3 id="Writing_a_second_test">Writing a second test</h3><p>Before we go, let’s write a second test that check that the test has changed when a button is clicked:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    renderIntoDocument,</span><br><span class="line">    scryRenderedDOMComponentsWithTag,</span><br><span class="line">    findRenderedDOMComponentWithClass,</span><br><span class="line">    Simulate</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-addons-test-utils'</span>;</span><br><span class="line"><span class="keyword">import</span> Component <span class="keyword">from</span> <span class="string">'../src/Component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;expect&#125; <span class="keyword">from</span> <span class="string">'chai'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'Component'</span>, () =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// [...]</span></span><br><span class="line"></span><br><span class="line">    it(<span class="string">'changes the displayed text when button is clicked'</span>, () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> component = renderIntoDocument(</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">Component</span> <span class="attr">options</span>=<span class="string">&#123;['Bleach',</span> '<span class="attr">Nevermind</span>', '<span class="attr">In</span> <span class="attr">Utero</span>']&#125; /&gt;</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        const displayText = findRenderedDOMComponentWithClass(component, 'display-text');</span><br><span class="line">        const buttons = scryRenderedDOMComponentsWithTag(component, 'button');</span><br><span class="line"></span><br><span class="line">        Simulate.click(buttons[0]);</span><br><span class="line">        expect(displayText.textContent).to.equal('Bleach');</span><br><span class="line"></span><br><span class="line">        Simulate.click(buttons[1]);</span><br><span class="line">        expect(displayText.textContent).to.equal('Nevermind');</span><br><span class="line"></span><br><span class="line">        Simulate.click(buttons[2]);</span><br><span class="line">        expect(displayText.textContent).to.equal('In Utero');</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span></span><br></pre></td></tr></table></figure>
<h3 id="Imports-1">Imports</h3><p>Check the imports: we have added two more <a href="https://facebook.github.io/react/docs/test-utils.html" target="_blank" rel="external">react test utils methods</a>:</p>
<ul>
<li><code>findRenderedDOMComponentWithClass</code>: which finds one unique instance of an element based on its css class.</li>
<li><code>Simulate</code>: simulate user interaction, here <code>Simulate.click</code>.</li>
</ul>
<h3 id="Test_Flow-1">Test Flow</h3><p>We start by rendering our <code>Component</code>, then retrieve all the <code>&lt;buttons&gt;</code> and the label with the display text.<br>For each button we simulate a click and check that the text content of the label has changed and matched the button’s text.</p>
<h3 id="Run_the_tests-1">Run the tests</h3><p>Run both our tests using:</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="built_in">run</span> test</span><br><span class="line"><span class="comment"># 2 passing (50ms)</span></span><br></pre></td></tr></table></figure>
<p>Hope you found this tutorial useful, I sure had a great time writing it :)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>In this article you will learn how to setup your environment and get started with React Unit Testing. The setup I am detailing here is inspired by <a href="http://teropa.info/blog/2015/09/10/full-stack-redux-tutorial.html#the-client-application">this much longer yet amazing tutorial</a>.</p>
<p>To get the most out of this post, it’s best if you have had some exposure to at least some of these frameworks/tools:</p>
<ul>
<li><strong>Node.js and NPM:</strong> install packages and <a href="/2015/12/Run-scripts-with-npm/">run custom scripts</a></li>
<li><strong>webpack:</strong> Basic configuration to compile code and launch a web server</li>
<li><strong>React:</strong> <a href="/2015/12/Build-your-first-React-application/">Basics of writing components</a></li>
<li><strong>mocha:</strong> Run unit tests with mocha</li>
<li><strong>chai:</strong> Basics of writing unit tests with chai</li>
<li><strong>Babel:</strong> <a href="/2016/02/How-to-setup-Babel6-for-NodeJs/">Compile ES6</a> and React code with Babel</li>
<li><strong>ES6:</strong> <a href="/2016/02/Babel-and-Node-Module-Loader/">Import statement</a> and some of the new additions to the language</li>
</ul>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
      <category term="Babel" scheme="http://klugjo.github.io/tags/Babel/"/>
    
      <category term="ES2015" scheme="http://klugjo.github.io/tags/ES2015/"/>
    
      <category term="ES6" scheme="http://klugjo.github.io/tags/ES6/"/>
    
      <category term="React" scheme="http://klugjo.github.io/tags/React/"/>
    
      <category term="TDD" scheme="http://klugjo.github.io/tags/TDD/"/>
    
      <category term="Webpack" scheme="http://klugjo.github.io/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Best git log aliases]]></title>
    <link href="http://klugjo.github.io/2016/02/Best-git-log-aliases/"/>
    <id>http://klugjo.github.io/2016/02/Best-git-log-aliases/</id>
    <published>2016-02-29T08:38:44.000Z</published>
    <updated>2016-02-29T09:57:16.000Z</updated>
    <content type="html"><![CDATA[<p>This article looks at the best log aliases I use. Some I have found, some I have created and after reading you should be able to create your own easily.</p>
<p>Please feel free to submit your own in the comments below.<br><a id="more"></a></p>
<h2 id="Add_an_alias">Add an alias</h2><p>To add aliases, open your <code>.gitconfig</code> file and you will see an alias section:</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">alias</span>]</span><br><span class="line">	ac = !git <span class="keyword">add </span>. &amp;&amp; git commit -am</span><br></pre></td></tr></table></figure>
<p>If you are on OSX, open a new command prompt and type:</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span> .gitconfig</span><br></pre></td></tr></table></figure>
<p>To use the alias, simply type:</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git</span> aliasname</span><br></pre></td></tr></table></figure>
<h2 id="Log_aliases">Log aliases</h2><p>In no particular order:</p>
<h3 id="1_-_One_liner_with_colors">1 - One liner with colors</h3><p>Will log a list of commits, all on one line with customisable colours. Useful to know who has changed what on the repo recently.</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l1 = <span class="keyword">log</span> --pretty=<span class="keyword">format</span>:<span class="string">"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]"</span> --decorate --date=short</span><br></pre></td></tr></table></figure>
<p><a href="https://gist.github.com/mwhite/6887990" target="_blank" rel="external">Source</a></p>
<h3 id="2_-_Graph_one_liner">2 - Graph one liner</h3><p>Will log a list of commits with only the commit name and SHA. Useful to have a quick overview of the branches on the repo. I usually use the web UI for this, but this can be quicker if all you need is to refresh your memory.</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">l2</span> <span class="comment">=</span> <span class="comment">log</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">graph</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oneline</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">decorate</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">all</span></span><br></pre></td></tr></table></figure>
<p><a href="http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/" target="_blank" rel="external">Source</a> (first comment)</p>
<h3 id="3_-_Search_commit_name_history">3 - Search commit name history</h3><p>Will search previous commits for a specific term. Useful if you want to find a specific comment based on the comment.</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">l3</span> = !git log --<span class="literal">on</span>eline | grep</span><br></pre></td></tr></table></figure>
<p>Use it like this</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> l3 JIRA <span class="comment"># Will display all commits with 'JIRA' in the description</span></span><br></pre></td></tr></table></figure>
<h3 id="4_-_Details_about_the_last_commit">4 - Details about the last commit</h3><p>Will show all the differences introduced in the last commit.</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">l4</span> = log -p -<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="5_-_Get_commits_for_n_days_before_today">5 - Get commits for n days before today</h3><p>Another one by myself. It makes use of functions and displays the list of commits made before X days ago.</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l5 = <span class="string">"!f() &#123; \</span><br><span class="line">        git log --after=\"</span>$(date -j -v-$1d +<span class="meta">%Y</span>-<span class="meta">%m</span>-<span class="meta">%d</span>)\<span class="string">" --oneline; \</span><br><span class="line">    &#125;; f"</span></span><br></pre></td></tr></table></figure>
<p>Use it like this</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git l5 15 <span class="comment"># Get the commits made in the last 15 days</span></span><br></pre></td></tr></table></figure>
<h2 id="Summary">Summary</h2><p>I hope you found these useful, I will add more as I go.</p>
<p>Here is the list so far:</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">l1 = <span class="keyword">log</span> --pretty=<span class="keyword">format</span>:<span class="string">"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]"</span> --decorate --date=short</span><br><span class="line">l2 = <span class="keyword">log</span> --graph --oneline --decorate --all</span><br><span class="line">l3 = !git <span class="keyword">log</span> --oneline | <span class="keyword">grep</span></span><br><span class="line">l4 = <span class="keyword">log</span> -p -<span class="number">1</span></span><br><span class="line">l5 = <span class="string">"!f() &#123; \</span><br><span class="line">        git log --after=\"$(date -j -v-$1d +%Y-%m-%d)\" --oneline; \</span><br><span class="line">    &#125;; f"</span></span><br></pre></td></tr></table></figure>
<p>Thanks for reading !</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This article looks at the best log aliases I use. Some I have found, some I have created and after reading you should be able to create your own easily.</p>
<p>Please feel free to submit your own in the comments below.<br>]]>
    
    </summary>
    
      <category term="Git" scheme="http://klugjo.github.io/tags/Git/"/>
    
      <category term="Log" scheme="http://klugjo.github.io/tags/Log/"/>
    
      <category term="Alias" scheme="http://klugjo.github.io/tags/Alias/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Copy an Array into itself in JavaScript ES6/2015]]></title>
    <link href="http://klugjo.github.io/2016/02/Copy-an-Array-into-itself-in-JavaScript-ES6-2015/"/>
    <id>http://klugjo.github.io/2016/02/Copy-an-Array-into-itself-in-JavaScript-ES6-2015/</id>
    <published>2016-02-24T09:42:32.000Z</published>
    <updated>2016-02-26T00:58:11.000Z</updated>
    <content type="html"><![CDATA[<p>Part of the additions to ES6 is an array method called <code>copyWithin</code>:<br><a id="more"></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.copyWithin(target, start[, end = <span class="keyword">this</span>.length])</span><br></pre></td></tr></table></figure>
<p>The function takes a section of the array and copies it to another place within the array.</p>
<ul>
<li><code>target</code>: index where to copy the elements</li>
<li><code>start</code>: beginning of section to copy</li>
<li><code>end</code>: end of section to copy. Optional, if not specified the section will go to the end of the array</li>
</ul>
<h3 id="Example">Example</h3><p>m<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].copyWithin(<span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// Result: [0, 1, 2, 3, 1, 2]</span></span><br></pre></td></tr></table></figure></p>
<p>Here is a visual representation of what happens:</p>
<p><img src="https://s3.amazonaws.com/klugjo.github.io/array-copywithin-es6-explanation.png" alt="Array copyWithin visual explanation"></p>
<h3 id="Remarks">Remarks</h3><ul>
<li>As expected parameters are 0 based indexes.</li>
<li>The <code>copyWithin</code> modifies the array itself, it does not return a copy of it.</li>
<li>The array size if not modified, <code>copyWithin</code> only copies what fits.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Part of the additions to ES6 is an array method called <code>copyWithin</code>:<br>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
      <category term="ES2015" scheme="http://klugjo.github.io/tags/ES2015/"/>
    
      <category term="ES6" scheme="http://klugjo.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Basic git log commands]]></title>
    <link href="http://klugjo.github.io/2016/02/Basic-git-log-commands/"/>
    <id>http://klugjo.github.io/2016/02/Basic-git-log-commands/</id>
    <published>2016-02-23T13:56:49.000Z</published>
    <updated>2016-02-23T13:58:31.000Z</updated>
    <content type="html"><![CDATA[<p>In this article you will learn a few useful commands to check the activity on your repo.</p>
<a id="more"></a>
<h2 id="git_log">git log</h2><p>Get your repo history by using </p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<h2 id="Get_more_commit_details">Get more commit details</h2><p>In certain circumstances, you might want to get more detail on some commits.</p>
<p>Use the <code>-p</code> flag to see all the differences introduced in each commit</p>
<p>Use the <code>-2</code> to see the last 2 commits only</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log -<span class="selector-tag">p</span> -<span class="number">2</span></span><br></pre></td></tr></table></figure>
<h2 id="Get_less_commit_details">Get less commit details</h2><p>In other situations, you want to have less commit details and more of an overview of what is going on in your repo.</p>
<p>The <code>--oneline</code> flag will help you get a list of commits on one line</p>
<p>The <code>--graph</code> flag will display a graph that shows to which branches the commits were made</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> <span class="comment">--oneline --graph</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>In this article you will learn a few useful commands to check the activity on your repo.</p>]]>
    
    </summary>
    
      <category term="Git" scheme="http://klugjo.github.io/tags/Git/"/>
    
      <category term="Bash" scheme="http://klugjo.github.io/tags/Bash/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How to use a custom domain with your github pages site]]></title>
    <link href="http://klugjo.github.io/2016/02/How-to-use-a-custom-domain-with-your-github-pages-site/"/>
    <id>http://klugjo.github.io/2016/02/How-to-use-a-custom-domain-with-your-github-pages-site/</id>
    <published>2016-02-22T10:39:16.000Z</published>
    <updated>2016-02-22T11:29:30.000Z</updated>
    <content type="html"><![CDATA[<p>This article goes through the process of setting up a custom domain for a github pages website.</p>
<a id="more"></a>
<h2 id="Pre_requisites">Pre requisites</h2><p>This article assumes that you already have a github pages website up and running. Mine is <a href="https://github.com/klugjo/klugjo.github.io" target="_blank" rel="external">klugjo.github.io</a>.</p>
<h2 id="Create_the_github_CNAME_file">Create the github CNAME file</h2><p>In order to use a custom domain, you need to let Github know about it with the help of a CNAME file:</p>
<ul>
<li>Create a file names <code>CNAME</code> at the root of your website. The file name has to be all Caps.</li>
<li>Inside that file, input your custom domain name <u>without</u> <code>http(s)://</code>.<br><a href="https://github.com/klugjo/klugjo.github.io/blob/master/CNAME" target="_blank" rel="external">My CNAME file</a> contains: </li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www<span class="selector-class">.codeblocq</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Commit and push your changes</li>
</ul>
<p>That is it for the configuration on the github side.</p>
<h2 id="Setup_the_DNS_provider">Setup the DNS provider</h2><p>You can contact your DNS provider for help on how to configure an A record but this is how I configured mine:</p>
<p><img src="https://s3.amazonaws.com/klugjo.github.io/github-pages-custom-domain.png" alt="DNS provider configuration github pages custom domain"></p>
<p>The <code>CNAME</code> record for www is set to <strong>klugjo.github.io</strong>. The role of a CNAME record is to map a name to another name. Useful when the IP address of the host is not know or not stable.</p>
<p>The URL record is set to <a href="http://www.codeblocq.com" target="_blank" rel="external">http://www.codeblocq.com</a> in order to redirect all traffic to the www site.</p>
<h2 id="Notes">Notes</h2><ul>
<li>You can only setup one custom domain in the CNAME file on github. <a href="https://help.github.com/articles/about-supported-custom-domains/" target="_blank" rel="external">See what are the supported custom domains</a>.</li>
<li>Read <a href="https://help.github.com/articles/setting-up-an-apex-domain/" target="_blank" rel="external">this article</a> if you need to configure an A record with your DNS provider.</li>
<li>If you still can’t get it right, check out <a href="https://help.github.com/articles/troubleshooting-custom-domains/" target="_blank" rel="external">this troubleshooting guide</a>.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>This article goes through the process of setting up a custom domain for a github pages website.</p>]]>
    
    </summary>
    
      <category term="Github" scheme="http://klugjo.github.io/tags/Github/"/>
    
      <category term="Custom Domain" scheme="http://klugjo.github.io/tags/Custom-Domain/"/>
    
      <category term="DNS Provider" scheme="http://klugjo.github.io/tags/DNS-Provider/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Babel and Node Module Loader]]></title>
    <link href="http://klugjo.github.io/2016/02/Babel-and-Node-Module-Loader/"/>
    <id>http://klugjo.github.io/2016/02/Babel-and-Node-Module-Loader/</id>
    <published>2016-02-20T01:26:03.000Z</published>
    <updated>2016-03-03T07:36:30.000Z</updated>
    <content type="html"><![CDATA[<p>This article will show you how to get started with ES6 modules in node with Babel.<br><a id="more"></a><br>If you need to setup your environment, check out <a href="/2016/02/How-to-setup-Babel6-for-NodeJs/">this article</a>.</p>
<h2 id="Exports">Exports</h2><p>In your library, export functions and classes this way:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ----------</span></span><br><span class="line"><span class="comment">// module1.js</span></span><br><span class="line"><span class="comment">// ----------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> life = <span class="string">"42"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(color) &#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getCarColor() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Imports">Imports</h2><h3 id="Import_specific">Import specific</h3><p>You can specify which value you wish to import using the following syntax:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;life, add <span class="keyword">as</span> addition&#125; <span class="keyword">from</span> <span class="string">'./module1'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(life); <span class="comment">// 42</span></span><br><span class="line"><span class="built_in">console</span>.log(addition(<span class="number">1</span>,<span class="number">1</span>)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>Note how you can use <code>as</code> to change the name of some of the values.</p>
<h3 id="Import_all">Import all</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module1 <span class="keyword">from</span> <span class="string">'./module1'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car = <span class="keyword">new</span> module1.Car(<span class="string">"blue"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(car.getCarColor()); <span class="comment">// blue</span></span><br></pre></td></tr></table></figure>
<h2 id="Default_export">Default export</h2><p>If your module only has one value to export, use <code>default</code> when exporting that value.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Export - myModule.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Import</span></span><br><span class="line"><span class="keyword">import</span> myFunc <span class="keyword">from</span> <span class="string">'./myModule'</span>;</span><br><span class="line">myFunc();</span><br></pre></td></tr></table></figure>
<p>This information should be enough for you to get started with ES6/ES2015 modules. If you need to know more, I would recommend <a href="http://exploringjs.com/es6/ch_modules.html" target="_blank" rel="external">this article</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This article will show you how to get started with ES6 modules in node with Babel.<br>]]>
    
    </summary>
    
      <category term="Node" scheme="http://klugjo.github.io/tags/Node/"/>
    
      <category term="Babel" scheme="http://klugjo.github.io/tags/Babel/"/>
    
      <category term="ES2015" scheme="http://klugjo.github.io/tags/ES2015/"/>
    
      <category term="ES6" scheme="http://klugjo.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How to setup Babel6 for NodeJs]]></title>
    <link href="http://klugjo.github.io/2016/02/How-to-setup-Babel6-for-NodeJs/"/>
    <id>http://klugjo.github.io/2016/02/How-to-setup-Babel6-for-NodeJs/</id>
    <published>2016-02-16T11:58:08.000Z</published>
    <updated>2016-02-20T03:06:48.000Z</updated>
    <content type="html"><![CDATA[<p>This article gives you a basic way of setting up your environment if you want to use ES2015 with Node (using v4.3.0 in this tutorial).<br><a id="more"></a> </p>
<h2 id="Babel_libraries">Babel libraries</h2><p>You will first need:</p>
<ul>
<li><a href="https://babeljs.io/docs/usage/cli/" target="_blank" rel="external">babel-cli</a>: Used to compile files from the command line</li>
<li><a href="http://babeljs.io/docs/usage/api/" target="_blank" rel="external">babel-core</a>: Core API</li>
<li><a href="https://babeljs.io/docs/plugins/preset-es2015/" target="_blank" rel="external">babel-preset-es2015</a>: Collection of all the plugins needed to write ES2015 JavaScript.</li>
</ul>
<p>(Babel in itself does not do anything and it is the plugins that will define what it does.)</p>
<h3 id="Installation">Installation</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev babel-cli babel-core babel-preset-es2015</span><br></pre></td></tr></table></figure>
<h2 id="Babel_configuration">Babel configuration</h2><p>The standard way of configuring Babel is to use a <a href="https://babeljs.io/docs/usage/babelrc/" target="_blank" rel="external">.babelrc</a> file:</p>
<p>Put a <code>.babelrc</code> configuration file at the root of your project. I don’t like to have too much stuff in there and <a href="http://babeljs.io/docs/usage/babelrc/" target="_blank" rel="external">thankfully you can also put your config in <code>package.json</code></a>.</p>
<p>Whichever way you choose, inside your configuration put:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [<span class="string">"es2015"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Testing">Testing</h2><p>Create an <code>index.js</code> file with the following ES2015 code:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> doubles = numbers.map(num =&gt; num * <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(doubles); <span class="comment">//  [2, 8, 18 ]</span></span><br></pre></td></tr></table></figure>
<p>Run it with <code>node index.js</code> and check that everything is working.</p>
<h2 id="Create_a_launcher">Create a launcher</h2><p>When using certain features of ES6, you might encounter an error of type:</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">SyntaxError:</span> Unexpected token</span><br></pre></td></tr></table></figure>
<p>This means you will need to create a launcher for your app that loads <code>&#39;babel-core/register&#39;</code> ahead of your code.</p>
<p>Assuming your entry point is <code>index.js</code>, create the following launcher:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// -----------</span></span><br><span class="line"><span class="comment">// launcher.js</span></span><br><span class="line"><span class="comment">// -----------</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'babel-core/register'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./index'</span>);</span><br></pre></td></tr></table></figure>
<p>Start your app with <code>node launcher.js</code></p>
<p>This will clear the errors.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This article gives you a basic way of setting up your environment if you want to use ES2015 with Node (using v4.3.0 in this tutorial).<br>]]>
    
    </summary>
    
      <category term="Node" scheme="http://klugjo.github.io/tags/Node/"/>
    
      <category term="Babel" scheme="http://klugjo.github.io/tags/Babel/"/>
    
      <category term="ES2015" scheme="http://klugjo.github.io/tags/ES2015/"/>
    
      <category term="ES6" scheme="http://klugjo.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Further minify your CSS with CSSO]]></title>
    <link href="http://klugjo.github.io/2016/02/Further-minify-your-CSS-with-CSSO/"/>
    <id>http://klugjo.github.io/2016/02/Further-minify-your-CSS-with-CSSO/</id>
    <published>2016-02-15T06:44:48.000Z</published>
    <updated>2016-02-15T08:21:53.000Z</updated>
    <content type="html"><![CDATA[<p>Hi there, I just discovered <a href="https://github.com/css/csso" target="_blank" rel="external">CSSO – CSS Optimizer</a> and I thought I would check out how it compares to other css minification tools like <a href="https://github.com/jbleuzen/node-cssmin" target="_blank" rel="external">cssmin</a> which is based on YUI compressor.</p>
<a id="more"></a> 
<h2 id="Installation">Installation</h2><p>Its a node package, installation is as straight forward as:</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> -g csso</span><br></pre></td></tr></table></figure>
<h2 id="Usage">Usage</h2><p>You can minify your CSS by using <code>csso.minify(yourCss)</code>.</p>
<p>Example:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> csso = <span class="built_in">require</span>(<span class="string">'csso'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> compressed = csso.minify(<span class="string">'.test &#123; color: #000000; &#125;'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(compressed); <span class="comment">// .test&#123;color:black&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="Basic_comparison_with_cssmin">Basic comparison with cssmin</h2><p>CSSO does more than just <a href="http://yui.github.io/yuicompressor/css.html" target="_blank" rel="external">remove whitespaces and line breaks</a> which is what cssmin based on YUI compressor does. In my opinion that’s already good enough of a reason to use it. </p>
<p>Let’s look at how good of a job it does.</p>
<h3 id="For_my_quick_test,_I_have_used_2_css_files-">For my quick test, I have used 2 css files.</h3><ul>
<li>Simple CSS File: My blog’s CSS at time of writing is a pretty simple 900 lines css file.</li>
<li>Complex CSS File: <a href="https://github.com/Dogfalo/materialize" target="_blank" rel="external">Materialize</a> main CSS which is a fairly complex 11256 lines stylesheet.</li>
</ul>
<h3 id="Here_are_the_results:">Here are the results:</h3><table>
<thead>
<tr>
<th>Metric</th>
<th style="text-align:center">Simple CSS File</th>
<th style="text-align:center">Complex CSS File</th>
</tr>
</thead>
<tbody>
<tr>
<td>Lines</td>
<td style="text-align:center">842</td>
<td style="text-align:center">11256</td>
</tr>
<tr>
<td>Length</td>
<td style="text-align:center">19133</td>
<td style="text-align:center">201025</td>
</tr>
<tr>
<td>cssmin length (characters)</td>
<td style="text-align:center">15431</td>
<td style="text-align:center">147778</td>
</tr>
<tr>
<td>csso length (characters)</td>
<td style="text-align:center">15405</td>
<td style="text-align:center">145423</td>
</tr>
<tr>
<td>cssmin compression (%)</td>
<td style="text-align:center">19.3%</td>
<td style="text-align:center">26.5%</td>
</tr>
<tr>
<td>csso compression (%)</td>
<td style="text-align:center">19.5%</td>
<td style="text-align:center">27.7%</td>
</tr>
</tbody>
</table>
<p>CSSO does a bit better than cssmin but the difference is negligible. I certainly wouldn’t go ahead and change my current projects over to CSSO but I will give CSSO a try for my next project.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Hi there, I just discovered <a href="https://github.com/css/csso">CSSO – CSS Optimizer</a> and I thought I would check out how it compares to other css minification tools like <a href="https://github.com/jbleuzen/node-cssmin">cssmin</a> which is based on YUI compressor.</p>]]>
    
    </summary>
    
      <category term="Build" scheme="http://klugjo.github.io/tags/Build/"/>
    
      <category term="CSS" scheme="http://klugjo.github.io/tags/CSS/"/>
    
      <category term="node" scheme="http://klugjo.github.io/tags/node/"/>
    
      <category term="CssMin" scheme="http://klugjo.github.io/tags/CssMin/"/>
    
      <category term="CSSO" scheme="http://klugjo.github.io/tags/CSSO/"/>
    
  </entry>
  
</feed>

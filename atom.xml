<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[CodeBlocQ]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.codeblocq.com/"/>
  <updated>2016-05-27T06:47:56.000Z</updated>
  <id>http://www.codeblocq.com/</id>
  
  <author>
    <name><![CDATA[Jonathan Klughertz]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Performance Comparison: ES6 Template Literals vs HandleBars in Node]]></title>
    <link href="http://www.codeblocq.com/2016/05/Performance-Comparison-ES6-Template-Literals-vs-HandleBars-in-Node/"/>
    <id>http://www.codeblocq.com/2016/05/Performance-Comparison-ES6-Template-Literals-vs-HandleBars-in-Node/</id>
    <published>2016-05-27T06:11:31.000Z</published>
    <updated>2016-05-27T06:47:56.000Z</updated>
    <content type="html"><![CDATA[<p>This article looks at which is the fastest in between <a href="http://handlebarsjs.com/" target="_blank" rel="external">Handlebars</a> and <a href="http://exploringjs.com/es6/ch_template-literals.html#_text-templating-via-untagged-template-literals" target="_blank" rel="external">ES6 Template Literals</a>.</p>
<h2 id="TL;DR">TL;DR</h2><p>For my simple example and with node v5.6.0, I have found that <strong>ES6 Template literals are up to 4 times faster than Handlebars</strong>.</p>
<h2 id="Code">Code</h2><h3 id="Test_Template">Test Template</h3><p>For these tests, I have chosen to use the basic example from the <a href="http://handlebarsjs.com/" target="_blank" rel="external">Handlebars</a> website.</p>
<p>The aim is to compile:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entry"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body"</span>&gt;</span></span><br><span class="line">    &#123;&#123;body&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>With the data being:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attribute">title</span>: <span class="string">"My New Post"</span>, body: <span class="string">"This is my first post!"</span>&#125;</span><br></pre></td></tr></table></figure>
<p>We will then compare the execution time when compiling this template 10000 times.</p>
<h3 id="Handlebars_code">Handlebars code</h3><p>Install Handlebars with npm:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> <span class="comment">--save handlebars</span></span><br></pre></td></tr></table></figure>
<p>Full test code:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Handlebars = <span class="built_in">require</span>(<span class="string">'handlebars'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a string with the Template</span></span><br><span class="line"><span class="keyword">const</span> handlebarsTemplateSource = <span class="string">"&lt;div class=\"entry\"&gt;/n&lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;/h1&gt;/n&lt;div class=\"body\"&gt;/n&#123;&#123;&#123;body&#125;&#125;&#125;/n&lt;/div&gt;/n&lt;/div&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Compile the template source to create the template function</span></span><br><span class="line"><span class="keyword">const</span> handlebarsTemplate = Handlebars.compile(handlebarsTemplateSource);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize the data</span></span><br><span class="line"><span class="keyword">const</span> data = &#123;title: <span class="string">"My New Post"</span>, body: <span class="string">"This is my first post!"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> results = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Perf test start</span></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"Handlebars"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">// Evaluate the template</span></span><br><span class="line">  results.push(handlebarsTemplate(data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Perf test end</span></span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"Handlebars"</span>);</span><br></pre></td></tr></table></figure>
<p>On my machine the code executes at an average speed of <strong>20.113ms</strong>.</p>
<h3 id="ES6_Template_Literals">ES6 Template Literals</h3><p>The idea of a literal template is to use an arrow function with ES6’s string interpolation capabilities.</p>
<p>Here is an example of a simple ES6 template literal</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> template = data =&gt; <span class="string">`&lt;div&gt;<span class="subst">$&#123;data&#125;</span>&lt;/div&gt;`</span>;</span><br></pre></td></tr></table></figure>
<p>The Handlebars equivalent would be:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> source = <span class="string">"&lt;div&gt;&#123;&#123;data&#125;&#125;&lt;/div&gt;"</span>;</span><br><span class="line"><span class="keyword">var</span> template = Handlebars.compile(source);</span><br></pre></td></tr></table></figure>
<p>You can read more about ES6 Template literals <a href="http://exploringjs.com/es6/ch_template-literals.html#_text-templating-via-untagged-template-literals" target="_blank" rel="external">here</a>. But in the meantime here is the full performance test code:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6 Template Literal Definition</span></span><br><span class="line"><span class="keyword">const</span> template = data =&gt; <span class="string">`&lt;div class="entry"&gt;</span><br><span class="line">  &lt;h1&gt;<span class="subst">$&#123;data.title&#125;</span>&lt;/h1&gt;</span><br><span class="line">  &lt;div class="body"&gt;</span><br><span class="line">    <span class="subst">$&#123;data.body&#125;</span></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize the data</span></span><br><span class="line"><span class="keyword">const</span> data = &#123;title: <span class="string">"My New Post"</span>, body: <span class="string">"This is my first post!"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> results = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Perf test start</span></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"Handlebars"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">// Evaluate the template</span></span><br><span class="line">  results.push(template(data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Perf test end</span></span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"Handlebars"</span>);</span><br></pre></td></tr></table></figure>
<p>On my machine the code executes at an average speed of <strong>5.007ms</strong>. That is <strong>4 time faster</strong> than Handlebars. </p>
<p>This is quite good news I think as it means I will now start using this native ES6 feature instead of an external library. Have you experienced something similar ? Let me know in the comments.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This article looks at which is the fastest in between <a href="http://handlebarsjs.com/" target="_blank" rel="external">Handlebars</a> an]]>
    </summary>
    
      <category term="JavaScript" scheme="http://www.codeblocq.com/tags/JavaScript/"/>
    
      <category term="ES6" scheme="http://www.codeblocq.com/tags/ES6/"/>
    
      <category term="Templating" scheme="http://www.codeblocq.com/tags/Templating/"/>
    
      <category term="Handlebars" scheme="http://www.codeblocq.com/tags/Handlebars/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Blur Image on Hover with CSS]]></title>
    <link href="http://www.codeblocq.com/2016/05/Blur-Image-on-Hover-with-CSS/"/>
    <id>http://www.codeblocq.com/2016/05/Blur-Image-on-Hover-with-CSS/</id>
    <published>2016-05-25T08:02:47.000Z</published>
    <updated>2016-05-25T08:18:19.000Z</updated>
    <content type="html"><![CDATA[<p>Quick little trick to blur an image on mouse hover.<br><a id="more"></a></p>
<h2 id="Demo">Demo</h2><p></p><p data-height="265" data-theme-id="light" data-slug-hash="vKBGBY" data-default-tab="result" data-user="klugjo" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/klugjo/pen/vKBGBY/" target="_blank" rel="external">Hover Image Blur</a> by Jonathan klughertz (<a href="http://codepen.io/klugjo" target="_blank" rel="external">@klugjo</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<h2 id="Gist">Gist</h2><p>To add blur to an image on mouse, use the following CSS properties:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">webkit-filter</span>: <span class="built_in">blur</span>(4px); <span class="comment">/* Chrome, Safari, Opera */</span></span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">blur</span>(4px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The <code>webkit-filter</code> and <code>filter</code> CSS properties can be used with the blur <a href="https://developer.mozilla.org/en/docs/Web/CSS/filter" target="_blank" rel="external">filter function</a><br>The <code>:hover</code> pseudo class is used to apply the filter on mouse over</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Quick little trick to blur an image on mouse hover.<br>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://www.codeblocq.com/tags/CSS/"/>
    
      <category term="Hover" scheme="http://www.codeblocq.com/tags/Hover/"/>
    
      <category term="Blur" scheme="http://www.codeblocq.com/tags/Blur/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Expose your local website to the world with ngrok]]></title>
    <link href="http://www.codeblocq.com/2016/05/Expose-your-local-website-to-the-world-with-ngrok/"/>
    <id>http://www.codeblocq.com/2016/05/Expose-your-local-website-to-the-world-with-ngrok/</id>
    <published>2016-05-24T08:13:18.000Z</published>
    <updated>2016-05-24T08:52:40.000Z</updated>
    <content type="html"><![CDATA[<p>This article will show you how to tunnel your locally running website out to the world using <a href="https://ngrok.com/" target="_blank" rel="external">ngrok</a>.<br><a id="more"></a></p>
<h2 id="Introduction">Introduction</h2><p>You have been working on a local version of your express app that runs smoothly on your <a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a>. Your client is asking to see what progress has been made to the website and you don’t necessarily have hours to set it up on a cloud service provider.</p>
<p>This is one of the cases where ngrok comes in handy. It allows you to redirect your local traffic to a public URL accesible anywhere in the world. Let’s get started.</p>
<h2 id="Installation">Installation</h2><p>I have tried to install <a href="https://ngrok.com/" target="_blank" rel="external">ngrok</a> with brew, but it didn’t work (I ended up with an old version). <a href="https://ngrok.com/download" target="_blank" rel="external">Download it from the website</a>.<br><br><br>Unzip the package and put it somewhere where ou can easily access it. I am on OS X and I have put it in my <code>Applications</code> folder so I can access it with:</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /Applications/ngrok -<span class="built_in">help</span></span><br></pre></td></tr></table></figure>
<h2 id="Sign_up_and_get_a_authentication_token">Sign up and get a authentication token</h2><p><a href="https://dashboard.ngrok.com/user/signup" target="_blank" rel="external">Sign up</a> for a free account with ngrok and get your auth token. Install the token with <code>authtoken</code>:</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>./ngrok authtoken abcde1234</span><br></pre></td></tr></table></figure>
<h2 id="Create_your_first_tunnel">Create your first tunnel</h2><p>I am testing mine with my hexo blog running on <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> but you can use whichever port you want, even your standard port 80.</p>
<p>Run this command (replace the port number with yours)</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>/Applications/ngrok http <span class="number">4000</span></span><br></pre></td></tr></table></figure>
<p><img src="/img/ngrok-status-online.png" alt=""></p>
<p>The <code>Tunnel Status</code> should say <code>online</code> and you will get a <code>Forwarding</code> URL that looks something like <a href="http://c9de2896.ngrok.io" target="_blank" rel="external">http://c9de2896.ngrok.io</a>.</p>
<p>Open that URL in your browser and look at all your website’s ressources being redirected from your local through ngrok.io.</p>
<p>You can now use that URL and share it with you friends and clients.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This article will show you how to tunnel your locally running website out to the world using <a href="https://ngrok.com/">ngrok</a>.<br>]]>
    
    </summary>
    
      <category term="ngrok" scheme="http://www.codeblocq.com/tags/ngrok/"/>
    
      <category term="localhost" scheme="http://www.codeblocq.com/tags/localhost/"/>
    
      <category term="http" scheme="http://www.codeblocq.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Automatically extract interesting quotes from a text with Node JS]]></title>
    <link href="http://www.codeblocq.com/2016/05/Automatically-extract-interesting-quotes-from-a-text-with-Node-JS/"/>
    <id>http://www.codeblocq.com/2016/05/Automatically-extract-interesting-quotes-from-a-text-with-Node-JS/</id>
    <published>2016-05-19T22:36:31.000Z</published>
    <updated>2016-05-24T08:11:30.000Z</updated>
    <content type="html"><![CDATA[<p>Getting start with pull-quoter and quote extraction in Node.<br><a id="more"></a><br>The pull-quoter library allows you to extract interesting quotes from a text.</p>
<h3 id="Installation">Installation</h3><p>Easy with npm:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save pull-quoter</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Usage">Usage</h3><p>Load the module and simply use it as a function.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pullquoter = <span class="built_in">require</span>(<span class="string">'pullquoter'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> text = <span class="string">"Something I notice every time I get really [...] higher quality sleep every night."</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(pullquoter(text)); <span class="comment">// [ 'It’s not just our thinking that’s affected by being tired.' ]</span></span><br></pre></td></tr></table></figure>
<p><code>pull-quoter</code> will return an Array of Strings.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Getting start with pull-quoter and quote extraction in Node.<br>]]>
    
    </summary>
    
      <category term="Node" scheme="http://www.codeblocq.com/tags/Node/"/>
    
      <category term="JavaScript" scheme="http://www.codeblocq.com/tags/JavaScript/"/>
    
      <category term="Quotes" scheme="http://www.codeblocq.com/tags/Quotes/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Get the Current Wifi Password with Node]]></title>
    <link href="http://www.codeblocq.com/2016/05/Get-the-Current-Wifi-Password-with-Node/"/>
    <id>http://www.codeblocq.com/2016/05/Get-the-Current-Wifi-Password-with-Node/</id>
    <published>2016-05-18T01:44:55.000Z</published>
    <updated>2016-05-18T03:14:28.000Z</updated>
    <content type="html"><![CDATA[<p>Here is a library to retrieve some of your known wifi passwords in Node.<br><a id="more"></a></p>
<h2 id="Installation">Installation</h2><p>Install the <a href="https://github.com/kevva/wifi-password" target="_blank" rel="external">wifi-password</a> library like so:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> wifi-<span class="keyword">password</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<h2 id="Usage">Usage</h2><h3 id="Get_your_current_Wifi_password">Get your current Wifi password</h3><p>Pretty straightforward:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wifiPassword = <span class="built_in">require</span>(<span class="string">'wifi-password'</span>);</span><br><span class="line"></span><br><span class="line">wifiPassword().then(password =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(password);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Get_another_known_Wifi_password">Get another known Wifi password</h3><p>Simply pass the Wifi SSID as a parameter:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wifiPassword = <span class="built_in">require</span>(<span class="string">'wifi-password'</span>);</span><br><span class="line"></span><br><span class="line">wifiPassword(<span class="string">'Wireless@CodeBlocQ'</span>).then(password =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(password);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>Here is a library to retrieve some of your known wifi passwords in Node.<br>]]>
    
    </summary>
    
      <category term="Node" scheme="http://www.codeblocq.com/tags/Node/"/>
    
      <category term="JavaScript" scheme="http://www.codeblocq.com/tags/JavaScript/"/>
    
      <category term="Wifi" scheme="http://www.codeblocq.com/tags/Wifi/"/>
    
      <category term="Password" scheme="http://www.codeblocq.com/tags/Password/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PDF Generation with Node JS]]></title>
    <link href="http://www.codeblocq.com/2016/05/PDF-Generation-with-Node-JS/"/>
    <id>http://www.codeblocq.com/2016/05/PDF-Generation-with-Node-JS/</id>
    <published>2016-05-17T09:03:59.000Z</published>
    <updated>2016-05-17T09:35:06.000Z</updated>
    <content type="html"><![CDATA[<p>Get started creating PDF file with Node and <a href="http://pdfkit.org/" target="_blank" rel="external">PDFKit</a>.<br><a id="more"></a></p>
<h2 id="Installation">Installation</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> pdfkit <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<h2 id="PDF_Creation">PDF Creation</h2><h3 id="Setup">Setup</h3><p>Import the library and create the pdfKit document</p>
<figure class="highlight javascript"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> PDFDocument, doc;</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">PDFDocument = <span class="built_in">require</span>(<span class="string">'pdfkit'</span>);</span><br><span class="line"></span><br><span class="line">doc = <span class="keyword">new</span> PDFDocument;</span><br><span class="line"></span><br><span class="line">doc.pipe(fs.createWriteStream(<span class="string">'output.pdf'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// PDF Creation logic goes here</span></span><br><span class="line"></span><br><span class="line">doc.end();</span><br></pre></td></tr></table></figure>
<h3 id="Insert_some_text">Insert some text</h3><figure class="highlight javascript"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set a title and pass the X and Y coordinates</span></span><br><span class="line">doc.fontSize(<span class="number">15</span>).text(<span class="string">'Wally Gator !'</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the paragraph width and align direction</span></span><br><span class="line">doc.text(<span class="string">'Wally Gator is a swinging alligator in the swamp. He\'s the greatest percolator when he really starts to romp. There has never been a greater operator in the swamp. See ya later, Wally Gator.'</span>, &#123;</span><br><span class="line">    width: <span class="number">410</span>,</span><br><span class="line">    align: <span class="string">'left'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Check out the <a href="http://pdfkit.org/docs/text.html" target="_blank" rel="external">documentation</a> for more options, including fonts, colors, text decorations and more !</p>
<h3 id="Insert_an_image">Insert an image</h3><figure class="highlight javascript"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doc.image(<span class="string">'wally.jpg'</span>, <span class="number">50</span>, <span class="number">150</span>, &#123;width: <span class="number">300</span>&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Result">Result</h3><p>Run the script as usual with</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">node</span> <span class="title">index</span>.js</span><br></pre></td></tr></table></figure>
<p>And open the output.pdf file. You can check my <a href="/img/output.pdf">result here</a>. Once again, don’t forget to check out the <a href="http://pdfkit.org/index.html" target="_blank" rel="external">official documentation</a> for more examples and information.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Get started creating PDF file with Node and <a href="http://pdfkit.org/">PDFKit</a>.<br>]]>
    
    </summary>
    
      <category term="Node" scheme="http://www.codeblocq.com/tags/Node/"/>
    
      <category term="JavaScript" scheme="http://www.codeblocq.com/tags/JavaScript/"/>
    
      <category term="PDF" scheme="http://www.codeblocq.com/tags/PDF/"/>
    
      <category term="PDFKit" scheme="http://www.codeblocq.com/tags/PDFKit/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SHA-256 in Node]]></title>
    <link href="http://www.codeblocq.com/2016/05/SHA-256-in-Node/"/>
    <id>http://www.codeblocq.com/2016/05/SHA-256-in-Node/</id>
    <published>2016-05-14T07:25:59.000Z</published>
    <updated>2016-05-14T08:03:09.000Z</updated>
    <content type="html"><![CDATA[<p>Useful piece of code to produce a 256-bit hash value with SHA-256:<br><a id="more"></a></p>
<p>There a few JavaScript implementation of the SHA-256 hash function out there. But the easiest is usually to use Node’s built in <a href="https://nodejs.org/api/crypto.html#crypto_class_hash" target="_blank" rel="external">cryptography</a> module.</p>
<h2 id="The_Code">The Code</h2><p>If you just need the code, here it is:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hash = crypto.createHash(<span class="string">'sha256'</span>)</span><br><span class="line">   .update(inputString)</span><br><span class="line">   .digest(<span class="string">'hex'</span>);</span><br></pre></td></tr></table></figure>
<h2 id="Details">Details</h2><h3 id="Generate_the_hash">Generate the hash</h3><p>Import the <code>crypto</code> module and use the <code>createHash</code> function to generate the hash.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hash = crypto.createHash(<span class="string">'sha256'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Hash_your_value">Hash your value</h3><p>Use the <code>update</code> function on the <code>hash</code> object instance to process your input.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash.update(<span class="string">'CodeBlocQ'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Output">Output</h3><p>Use the <code>digest</code> function on the <code>hash</code> to ouput the value. You can pass ‘hex’, ‘binary’ or ‘base64’ to get the result in the desired encoding.</p>
<p><strong>Hex</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hex = hash.digest(<span class="string">'hex'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(hex); <span class="comment">// c5d44424ef47ab9e1806d9c1a3045942cfd06e0ec5e798449c02e44e9ae38292</span></span><br></pre></td></tr></table></figure></p>
<p><strong>Binary</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bin = hash.digest(<span class="string">'binary'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bin); <span class="comment">// ÅÔD$ïG«ÙÁ£YBÏÐnÅçDäNã</span></span><br></pre></td></tr></table></figure></p>
<p><strong>Base64</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> base64 = hash.digest(<span class="string">'base64'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(base64); <span class="comment">// xdREJO9Hq54YBtnBowRZQs/Qbg7F55hEnALkTprjgpI=</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Useful piece of code to produce a 256-bit hash value with SHA-256:<br>]]>
    
    </summary>
    
      <category term="Node" scheme="http://www.codeblocq.com/tags/Node/"/>
    
      <category term="JavaScript" scheme="http://www.codeblocq.com/tags/JavaScript/"/>
    
      <category term="Cryptography" scheme="http://www.codeblocq.com/tags/Cryptography/"/>
    
      <category term="SHA256" scheme="http://www.codeblocq.com/tags/SHA256/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Factory Pattern in JavaScript]]></title>
    <link href="http://www.codeblocq.com/2016/05/Factory-Pattern-in-JavaScript/"/>
    <id>http://www.codeblocq.com/2016/05/Factory-Pattern-in-JavaScript/</id>
    <published>2016-05-12T07:18:46.000Z</published>
    <updated>2016-05-12T09:10:39.000Z</updated>
    <content type="html"><![CDATA[<p>Details on how to implement a simple Factory  Pattern in JavaScript.<br><a id="more"></a></p>
<h2 id="Problem">Problem</h2><p>Here is an example of code that could use some refactoring.</p>
<p>Let’s say we have 4 plugins (plugin1, plugin2, ..) which all have different methods (exec1, exec2, ..).</p>
<figure class="highlight javascript"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> plugin1 = <span class="built_in">require</span>(<span class="string">'./plugin1'</span>);</span><br><span class="line"><span class="keyword">var</span> plugin2 = <span class="built_in">require</span>(<span class="string">'./plugin2'</span>);</span><br><span class="line"><span class="keyword">var</span> plugin3 = <span class="built_in">require</span>(<span class="string">'./plugin3'</span>);</span><br><span class="line"><span class="keyword">var</span> plugin4 = <span class="built_in">require</span>(<span class="string">'./plugin4'</span>);</span><br><span class="line"></span><br><span class="line">plugin1.exec1();</span><br><span class="line">plugin1.exec2();</span><br><span class="line">plugin1.exec3();</span><br><span class="line">plugin1.exec4();</span><br></pre></td></tr></table></figure>
<p>We are loading 4 plugins and call methods on these plugins. The problem comes from all the duplicated require statements at the beginning.</p>
<h2 id="Factory_Pattern">Factory Pattern</h2><p>Our Factory pattern can help us encapsulate the creation of all these objects.</p>
<p>Meet the <code>pluginFactory</code>:</p>
<figure class="highlight javascript"><figcaption><span>pluginFactory.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Plugin Factory Object</span></span><br><span class="line"><span class="keyword">var</span> PluginFactory = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Plugin List</span></span><br><span class="line">    <span class="keyword">var</span> plugins = [</span><br><span class="line">        &#123;propertyName: <span class="string">'plugin1'</span>, path: <span class="string">'./plugin1'</span>&#125;,</span><br><span class="line">        &#123;propertyName: <span class="string">'plugin2'</span>, path: <span class="string">'./plugin2'</span>&#125;,</span><br><span class="line">        &#123;propertyName: <span class="string">'plugin3'</span>, path: <span class="string">'./plugin3'</span>&#125;,</span><br><span class="line">        &#123;propertyName: <span class="string">'plugin4'</span>, path: <span class="string">'./plugin4'</span>&#125;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Enumerate through plugins and assign them to Object Properties</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; plugins.length; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>[plugins[i].propertyName] = <span class="built_in">require</span>(plugins[i].path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Export an instance of the Factory</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">new</span> PluginFactory();</span><br></pre></td></tr></table></figure>
<p>In our client code (<code>index.js</code>), we can write:</p>
<figure class="highlight javascript"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pluginFactory = <span class="built_in">require</span>(<span class="string">'./pluginFactory'</span>);</span><br><span class="line"></span><br><span class="line">pluginFactory.plugin1.exec1();</span><br><span class="line">pluginFactory.plugin2.exec2();</span><br><span class="line">pluginFactory.plugin3.exec3();</span><br><span class="line">pluginFactory.plugin4.exec4();</span><br></pre></td></tr></table></figure>
<p>We have direct access to the plugins and their methods. This is great because we have replaced all the require statements with one and we don’t need our client code (<code>index.js</code>) to know about the plugins path anymore.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Details on how to implement a simple Factory  Pattern in JavaScript.<br>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.codeblocq.com/tags/JavaScript/"/>
    
      <category term="Design Pattern" scheme="http://www.codeblocq.com/tags/Design-Pattern/"/>
    
      <category term="Factory" scheme="http://www.codeblocq.com/tags/Factory/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Craft meaningful git commits]]></title>
    <link href="http://www.codeblocq.com/2016/05/Craft-meaningful-git-commits/"/>
    <id>http://www.codeblocq.com/2016/05/Craft-meaningful-git-commits/</id>
    <published>2016-05-09T05:11:03.000Z</published>
    <updated>2016-05-09T05:35:48.000Z</updated>
    <content type="html"><![CDATA[<p>Here are a few rules to follow in order to craft meaningful git commits.</p>
<a id="more"></a>
<h3 id="1-_Coherence">1. Coherence</h3><p>Each commit should encapsulate all the code modifications necessary to produce a feature or fix a bug. This means that the code fix for a bug for example, should not be spread over multiple commits.</p>
<h3 id="2-_Small">2. Small</h3><p>Try to keep all your commits as small as possible. If you try to do too much in a single commit, split it up.</p>
<p>You could say this contradicts <strong>1.</strong> but the idea here is to find the right balance. You want to produce commits that encapsulate as small as possible units of business logic.</p>
<h3 id="3-_Consistent">3. Consistent</h3><p>Each commit should leave the system in a stable state (no broken build, compilation errors or broken Unit tests).</p>
<h3 id="4-_Ordered">4. Ordered</h3><p>Commits should be done in order. When looking at the history, the comments should tell a story. As a result, pay attention to the commits order.</p>
<h3 id="5-_Documented">5. Documented</h3><p>The message should make sense and be detailed enough.<br>Write it in imperative form (fix bug and not fixes bug or fixed bug).<br>Provide a link to a user story or bug when possible.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Here are a few rules to follow in order to craft meaningful git commits.</p>]]>
    
    </summary>
    
      <category term="Git" scheme="http://www.codeblocq.com/tags/Git/"/>
    
      <category term="Software Practices" scheme="http://www.codeblocq.com/tags/Software-Practices/"/>
    
      <category term="ACID" scheme="http://www.codeblocq.com/tags/ACID/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Convert a putty .ppk key to an Amazon .pem file on OSX]]></title>
    <link href="http://www.codeblocq.com/2016/05/Convert-a-putty-ppk-key-to-a-pem-file-on-OSX/"/>
    <id>http://www.codeblocq.com/2016/05/Convert-a-putty-ppk-key-to-a-pem-file-on-OSX/</id>
    <published>2016-05-09T03:28:51.000Z</published>
    <updated>2016-05-09T04:35:45.000Z</updated>
    <content type="html"><![CDATA[<p>This article will show you how to generate a <code>.pem</code> file from an existing <code>.ppk</code> key.</p>
<a id="more"></a>
<h3 id="1-_Install_putty_on_your_mac">1. Install putty on your mac</h3><p>Done easily with <a href="http://brew.sh/" target="_blank" rel="external">homebrew</a>.</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span><span class="keyword">install </span>putty</span><br></pre></td></tr></table></figure>
<h3 id="2-_Generate_the_key">2. Generate the key</h3><p>We will use <a href="http://linux.die.net/man/1/puttygen" target="_blank" rel="external">puttygen</a> to generate the key.</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ puttygen <span class="built_in">key</span>.ppk -O <span class="keyword">private</span>-openssh -o <span class="built_in">key</span>.pem</span><br></pre></td></tr></table></figure>
<ul>
<li><code>key.ppk</code>: the original file name/path.</li>
<li><code>-O private-openssh</code>: the output type. <code>private-openssh</code> is used to save an SSH-2 private key in OpenSSH’s format.</li>
<li><code>-o key.pem</code>: the output file name/path.</li>
</ul>
<h3 id="3-_Install_the_key">3. Install the key</h3><p>Installing the key is equivalent to copying it in your <code>~/.ssh</code> directory.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This article will show you how to generate a <code>.pem</code> file from an existing <code>.ppk</code> key.</p>]]>
    
    </summary>
    
      <category term="EC2" scheme="http://www.codeblocq.com/tags/EC2/"/>
    
      <category term="ppk" scheme="http://www.codeblocq.com/tags/ppk/"/>
    
      <category term="pem" scheme="http://www.codeblocq.com/tags/pem/"/>
    
  </entry>
  
</feed>

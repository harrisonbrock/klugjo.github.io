<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[CodeBlocQ]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.codeblocq.com/"/>
  <updated>2016-05-12T09:10:39.000Z</updated>
  <id>http://www.codeblocq.com/</id>
  
  <author>
    <name><![CDATA[Jonathan Klughertz]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Factory Pattern in JavaScript]]></title>
    <link href="http://www.codeblocq.com/2016/05/Factory-Pattern-in-JavaScript/"/>
    <id>http://www.codeblocq.com/2016/05/Factory-Pattern-in-JavaScript/</id>
    <published>2016-05-12T07:18:46.000Z</published>
    <updated>2016-05-12T09:10:39.000Z</updated>
    <content type="html"><![CDATA[<p>Details on how to implement a simple Factory  Pattern in JavaScript.<br><a id="more"></a></p>
<h2 id="Problem">Problem</h2><p>Here is an example of code that could use some refactoring.</p>
<p>Let’s say we have 4 plugins (plugin1, plugin2, ..) which all have different methods (exec1, exec2, ..).</p>
<figure class="highlight javascript"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> plugin1 = <span class="built_in">require</span>(<span class="string">'./plugin1'</span>);</span><br><span class="line"><span class="keyword">var</span> plugin2 = <span class="built_in">require</span>(<span class="string">'./plugin2'</span>);</span><br><span class="line"><span class="keyword">var</span> plugin3 = <span class="built_in">require</span>(<span class="string">'./plugin3'</span>);</span><br><span class="line"><span class="keyword">var</span> plugin4 = <span class="built_in">require</span>(<span class="string">'./plugin4'</span>);</span><br><span class="line"></span><br><span class="line">plugin1.exec1();</span><br><span class="line">plugin1.exec2();</span><br><span class="line">plugin1.exec3();</span><br><span class="line">plugin1.exec4();</span><br></pre></td></tr></table></figure>
<p>We are loading 4 plugins and call methods on these plugins. The problem comes from all the duplicated require statements at the beginning.</p>
<h2 id="Factory_Pattern">Factory Pattern</h2><p>Our Factory pattern can help us encapsulate the creation of all these objects.</p>
<p>Meet the <code>pluginFactory</code>:</p>
<figure class="highlight javascript"><figcaption><span>pluginFactory.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Plugin Factory Object</span></span><br><span class="line"><span class="keyword">var</span> PluginFactory = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Plugin List</span></span><br><span class="line">    <span class="keyword">var</span> plugins = [</span><br><span class="line">        &#123;propertyName: <span class="string">'plugin1'</span>, path: <span class="string">'./plugin1'</span>&#125;,</span><br><span class="line">        &#123;propertyName: <span class="string">'plugin2'</span>, path: <span class="string">'./plugin2'</span>&#125;,</span><br><span class="line">        &#123;propertyName: <span class="string">'plugin3'</span>, path: <span class="string">'./plugin3'</span>&#125;,</span><br><span class="line">        &#123;propertyName: <span class="string">'plugin4'</span>, path: <span class="string">'./plugin4'</span>&#125;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Enumerate through plugins and assign them to Object Properties</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; plugins.length; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>[plugins[i].propertyName] = <span class="built_in">require</span>(plugins[i].path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Export an instance of the Factory</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">new</span> PluginFactory();</span><br></pre></td></tr></table></figure>
<p>In our client code (<code>index.js</code>), we can write:</p>
<figure class="highlight javascript"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pluginFactory = <span class="built_in">require</span>(<span class="string">'./pluginFactory'</span>);</span><br><span class="line"></span><br><span class="line">pluginFactory.plugin1.exec1();</span><br><span class="line">pluginFactory.plugin2.exec2();</span><br><span class="line">pluginFactory.plugin3.exec3();</span><br><span class="line">pluginFactory.plugin4.exec4();</span><br></pre></td></tr></table></figure>
<p>We have direct access to the plugins and their methods. This is great because we have replaced all the require statements with one and we don’t need our client code (<code>index.js</code>) to know about the plugins path anymore.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Details on how to implement a simple Factory  Pattern in JavaScript.<br>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.codeblocq.com/tags/JavaScript/"/>
    
      <category term="Design Pattern" scheme="http://www.codeblocq.com/tags/Design-Pattern/"/>
    
      <category term="Factory" scheme="http://www.codeblocq.com/tags/Factory/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Craft meaningful git commits]]></title>
    <link href="http://www.codeblocq.com/2016/05/Craft-meaningful-git-commits/"/>
    <id>http://www.codeblocq.com/2016/05/Craft-meaningful-git-commits/</id>
    <published>2016-05-09T05:11:03.000Z</published>
    <updated>2016-05-09T05:35:48.000Z</updated>
    <content type="html"><![CDATA[<p>Here are a few rules to follow in order to craft meaningful git commits.</p>
<a id="more"></a>
<h3 id="1-_Coherence">1. Coherence</h3><p>Each commit should encapsulate all the code modifications necessary to produce a feature or fix a bug. This means that the code fix for a bug for example, should not be spread over multiple commits.</p>
<h3 id="2-_Small">2. Small</h3><p>Try to keep all your commits as small as possible. If you try to do too much in a single commit, split it up.</p>
<p>You could say this contradicts <strong>1.</strong> but the idea here is to find the right balance. You want to produce commits that encapsulate as small as possible units of business logic.</p>
<h3 id="3-_Consistent">3. Consistent</h3><p>Each commit should leave the system in a stable state (no broken build, compilation errors or broken Unit tests).</p>
<h3 id="4-_Ordered">4. Ordered</h3><p>Commits should be done in order. When looking at the history, the comments should tell a story. As a result, pay attention to the commits order.</p>
<h3 id="5-_Documented">5. Documented</h3><p>The message should make sense and be detailed enough.<br>Write it in imperative form (fix bug and not fixes bug or fixed bug).<br>Provide a link to a user story or bug when possible.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Here are a few rules to follow in order to craft meaningful git commits.</p>]]>
    
    </summary>
    
      <category term="Git" scheme="http://www.codeblocq.com/tags/Git/"/>
    
      <category term="Software Practices" scheme="http://www.codeblocq.com/tags/Software-Practices/"/>
    
      <category term="ACID" scheme="http://www.codeblocq.com/tags/ACID/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Convert a putty .ppk key to an Amazon .pem file on OSX]]></title>
    <link href="http://www.codeblocq.com/2016/05/Convert-a-putty-ppk-key-to-a-pem-file-on-OSX/"/>
    <id>http://www.codeblocq.com/2016/05/Convert-a-putty-ppk-key-to-a-pem-file-on-OSX/</id>
    <published>2016-05-09T03:28:51.000Z</published>
    <updated>2016-05-09T04:35:45.000Z</updated>
    <content type="html"><![CDATA[<p>This article will show you how to generate a <code>.pem</code> file from an existing <code>.ppk</code> key.</p>
<a id="more"></a>
<h3 id="1-_Install_putty_on_your_mac">1. Install putty on your mac</h3><p>Done easily with <a href="http://brew.sh/" target="_blank" rel="external">homebrew</a>.</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span><span class="keyword">install </span>putty</span><br></pre></td></tr></table></figure>
<h3 id="2-_Generate_the_key">2. Generate the key</h3><p>We will use <a href="http://linux.die.net/man/1/puttygen" target="_blank" rel="external">puttygen</a> to generate the key.</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ puttygen <span class="built_in">key</span>.ppk -O <span class="keyword">private</span>-openssh -o <span class="built_in">key</span>.pem</span><br></pre></td></tr></table></figure>
<ul>
<li><code>key.ppk</code>: the original file name/path.</li>
<li><code>-O private-openssh</code>: the output type. <code>private-openssh</code> is used to save an SSH-2 private key in OpenSSH’s format.</li>
<li><code>-o key.pem</code>: the output file name/path.</li>
</ul>
<h3 id="3-_Install_the_key">3. Install the key</h3><p>Installing the key is equivalent to copying it in your <code>~/.ssh</code> directory.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This article will show you how to generate a <code>.pem</code> file from an existing <code>.ppk</code> key.</p>]]>
    
    </summary>
    
      <category term="EC2" scheme="http://www.codeblocq.com/tags/EC2/"/>
    
      <category term="ppk" scheme="http://www.codeblocq.com/tags/ppk/"/>
    
      <category term="pem" scheme="http://www.codeblocq.com/tags/pem/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ES6/ES2015 Stack Implementation]]></title>
    <link href="http://www.codeblocq.com/2016/05/ES6-ES2015-Stack-Implementation/"/>
    <id>http://www.codeblocq.com/2016/05/ES6-ES2015-Stack-Implementation/</id>
    <published>2016-05-04T00:57:03.000Z</published>
    <updated>2016-05-09T03:00:38.000Z</updated>
    <content type="html"><![CDATA[<p>JavaScript ES6/ES2015 Implementation of a Stack.</p>
<a id="more"></a>
<h2 id="Definition">Definition</h2><p>A stack is a data structure in which items are retrieved in the reverse order that they were added. If you add an item, this item will also be the first one to be removed. This is sometimes abbreviated as LIFO – Last In First Out.</p>
<p>This stack implementation will have 3 methods:</p>
<ul>
<li><strong>push</strong>: Add a new item on top of the stack</li>
<li><strong>pop</strong>: Remove the item on top of the stack</li>
<li><strong>peek</strong>: Get the value of the item on top of the stack</li>
</ul>
<h2 id="Array_Implementation">Array Implementation</h2><p>Let’s start with using an Array as the underlying structure for our Stack. Since the Array in JavaScript already behaves like a stack, the implementation is trivial.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = [];</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  getLength() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  push(item) &#123;</span><br><span class="line">    <span class="keyword">this</span>.items.push(item);</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="keyword">this</span>.count + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.count = <span class="keyword">this</span>.count - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.pop();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.slice(<span class="number">-1</span>)[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>See it in action <a href="https://jsbin.com/toyore/edit?js,console" target="_blank" rel="external">here</a>;</p>
<h3 id="LinkedList_Implementation">LinkedList Implementation</h3><p>Another way of implementing the stack is by using a LinkedList. I am going to be using <a href="/2016/05/ES6-ES2015-LinkedList-Implementation/">my LinkedList implementation</a> for this.</p>
<p>Although not as trivial as with using an Array, it is pretty straightforward with the LinkedList:</p>
<ul>
<li>Push adds the element at the beginning of the list</li>
<li>Pop returns the first element of the list and removes it at the same time.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.list = <span class="keyword">new</span> LinkedList();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  push(item) &#123;</span><br><span class="line">    <span class="keyword">this</span>.list.addFirst(item);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.list.length) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> val = <span class="keyword">this</span>.list.head.data;</span><br><span class="line">    <span class="keyword">this</span>.list.removeFirst();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.list.head) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.list.head.data;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  get length() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.list.length;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>See it in Action <a href="https://jsbin.com/gohuha/edit?js,console" target="_blank" rel="external">here</a>;</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>JavaScript ES6/ES2015 Implementation of a Stack.</p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.codeblocq.com/tags/JavaScript/"/>
    
      <category term="ES2015" scheme="http://www.codeblocq.com/tags/ES2015/"/>
    
      <category term="ES6" scheme="http://www.codeblocq.com/tags/ES6/"/>
    
      <category term="Algorithm" scheme="http://www.codeblocq.com/tags/Algorithm/"/>
    
      <category term="Data Structure" scheme="http://www.codeblocq.com/tags/Data-Structure/"/>
    
      <category term="Stack" scheme="http://www.codeblocq.com/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Get the last element of an Array in JavaScript]]></title>
    <link href="http://www.codeblocq.com/2016/05/Get-the-last-element-of-an-Array-in-JavaScript/"/>
    <id>http://www.codeblocq.com/2016/05/Get-the-last-element-of-an-Array-in-JavaScript/</id>
    <published>2016-05-03T03:17:45.000Z</published>
    <updated>2016-05-07T03:42:41.000Z</updated>
    <content type="html"><![CDATA[<p>This article discusses the preferred way to retrieve the last element of an Array in JavaScript.</p>
<a id="more"></a>
<p><strong>Tip 7</strong> in this <a href="https://blog.jscrambler.com/12-extremely-useful-hacks-for-javascript/" target="_blank" rel="external">Useful JavaScript Hacks Article</a> proposes the following method to get the last item in an array.</p>
<figure class="highlight javascript"><figcaption><span>syntax1.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="built_in">console</span>.log(array.slice(<span class="number">-1</span>)[<span class="number">0</span>]); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>
<p>It is a very neat and readable alternative to the often seen:</p>
<figure class="highlight javascript"><figcaption><span>syntax2.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">var</span> val = array[array.length - <span class="number">1</span>]; <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>
<h2 id="Performance">Performance</h2><p>I created the following quick performance test in Node (v5.6.0) to see how this syntax (<code>syntax1.js</code>) compares to the more traditional one (<code>syntax2.js</code>):</p>
<figure class="highlight javascript"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">'array slice'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">  <span class="keyword">var</span> val = array.slice(<span class="number">-1</span>)[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'array slice'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'array index'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">  <span class="keyword">var</span> val = array[array.length - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'array index'</span>);</span><br></pre></td></tr></table></figure>
<p>Here are the results:</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ node index.js</span><br><span class="line">&gt;<span class="built_in"> array </span>slice: 92.430ms</span><br><span class="line">&gt;<span class="built_in"> array </span>index: 4.820ms</span><br></pre></td></tr></table></figure>
<p>Slicing the array is 20 times more taxing than accessing the last item directly.</p>
<h2 id="Simplicity">Simplicity</h2><p>The syntax1 is a lot simpler to write and read and I will certainly start using it when performance is not a concern:</p>
<h3 id="Empty_array">Empty array</h3><p>It works well when the array is empty:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [];</span><br><span class="line"><span class="built_in">console</span>.log(array.slice(<span class="number">-1</span>)); <span class="comment">// return []</span></span><br><span class="line"><span class="built_in">console</span>.log(array.slice(<span class="number">-1</span>)[<span class="number">0</span>]); <span class="comment">// returns undefined</span></span><br></pre></td></tr></table></figure>
<h3 id="Get_the_last_few_elements_in_the_array">Get the last few elements in the array</h3><p>You can use the same technique to slice the array starting from the end of it. Pretty cool.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="built_in">console</span>.log(array.slice(<span class="number">-1</span>)); <span class="comment">// [6]</span></span><br><span class="line"><span class="built_in">console</span>.log(array.slice(<span class="number">-2</span>)); <span class="comment">// [5,6]</span></span><br><span class="line"><span class="built_in">console</span>.log(array.slice(<span class="number">-3</span>)); <span class="comment">// [4,5,6]</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>This article discusses the preferred way to retrieve the last element of an Array in JavaScript.</p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.codeblocq.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ES6/ES2015 LinkedList Implementation]]></title>
    <link href="http://www.codeblocq.com/2016/05/ES6-ES2015-LinkedList-Implementation/"/>
    <id>http://www.codeblocq.com/2016/05/ES6-ES2015-LinkedList-Implementation/</id>
    <published>2016-05-01T07:31:45.000Z</published>
    <updated>2016-05-09T03:01:02.000Z</updated>
    <content type="html"><![CDATA[<p>JavaScript ES6/ES2015 Implementation of a LinkedList.</p>
<a id="more"></a>
<h2 id="Definition">Definition</h2><p>A LinkedList is a list of Node. A Node is the most basic building block for many Data Structures.</p>
<p>A Node does two things:</p>
<ul>
<li>Contain a Value</li>
<li>Connect itself to other Nodes via an object reference pointer</li>
</ul>
<p>In a LinkedList, all Nodes can only have one Child Node.</p>
<p><img src="/img/linkedlist-nodes.png" alt=""></p>
<h2 id="Implementation">Implementation</h2><h3 id="Nodes">Nodes</h3><p>For our Node, we will use a simple JavaScript Object</p>
<p>Example</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> node1 = &#123;</span><br><span class="line">    data: <span class="number">5</span>,</span><br><span class="line">    next <span class="literal">null</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>This node does not point to anything at the moment. Let’s create a second Node and have it point to the first Node:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> node2 = &#123;</span><br><span class="line">    data: <span class="number">7</span>,</span><br><span class="line">    next: node1</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="LinkedList">LinkedList</h3><p><strong>A LinkedList is a class that encapsulated the Nodes</strong>. It will contain </p>
<ul>
<li>a <code>head</code> property that is a pointer to the first Node.</li>
<li>a <code>tail</code> property that is a pointer to the last Node.</li>
<li>a <code>count</code> property that keeps track of node count.</li>
<li>Add and Remove methods to manipulate the nodes in the list.</li>
</ul>
<h3 id="1)_Base">1) Base</h3><p>For the LinkedList, we will use a <code>class</code> and store the head Node and Tail Node as class property as well as a count variable that stores the number of Nodes.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.tail = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  get length() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2)_Add_functions">2) Add functions</h3><p>We will now create two <code>add</code> functions. A <code>addFirst</code> to add at the start of the list and <code>addLast</code> to add at the end of the list.</p>
<p>Here is the <code>addLast</code> method:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">addLast(data) &#123;</span><br><span class="line">  <span class="comment">// Create a new Node</span></span><br><span class="line">  <span class="keyword">const</span> node = &#123;</span><br><span class="line">    data: data,</span><br><span class="line">    next: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.count === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// If this is the first Node, assign it to head</span></span><br><span class="line">    <span class="keyword">this</span>.head = node;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// If not the first node, link it to the last node</span></span><br><span class="line">    <span class="keyword">this</span>.tail.next = node;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">this</span>.tail = node;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">this</span>.count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Here is the <code>addFirst</code> method:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">addFirst(data) &#123;</span><br><span class="line">  <span class="comment">// Create a new Node</span></span><br><span class="line">  <span class="keyword">const</span> node = &#123;</span><br><span class="line">    data: data,</span><br><span class="line">    next: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Save the first Node</span></span><br><span class="line">  <span class="keyword">const</span> temp = <span class="keyword">this</span>.head;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Point head to the new Node</span></span><br><span class="line">  <span class="keyword">this</span>.head = node;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Add the rest of node behind the new first Node</span></span><br><span class="line">  <span class="keyword">this</span>.head.next = temp;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">this</span>.count++;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.count === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// If first node, </span></span><br><span class="line">    <span class="comment">// point tail to it as well</span></span><br><span class="line">    <span class="keyword">this</span>.tail = <span class="keyword">this</span>.head;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3)_Remove_functions">3) Remove functions</h3><p>Likewise, we will create a <code>removeFirst</code> and <code>removeLast</code> functions.</p>
<p>Here is the <code>removeFirst</code> method:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">removeFirst(data) &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// The head should point to the second element</span></span><br><span class="line">    <span class="keyword">this</span>.head = <span class="keyword">this</span>.head.next;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.count--;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.count === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// If list empty, set tail to null</span></span><br><span class="line">      <span class="keyword">this</span>.tail = <span class="literal">null</span>;  </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Here is the <code>removeLast</code> method:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">removeLast(data) &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.count === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">this</span>.tail = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Find the Node right before the last Node</span></span><br><span class="line">      <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">      <span class="keyword">while</span>(current.next !== <span class="keyword">this</span>.tail) &#123;</span><br><span class="line">        current = current.next;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      current.next = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">this</span>.tail = current;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.count--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>And that’s it, our LinkedList is ready.</p>
<p>See it in action <a href="https://jsbin.com/letita/edit?js,console" target="_blank" rel="external">here</a>.</p>
<p>Here is the full code</p>
<script src="https://gist.github.com/klugjo/a9e9ef98fe879bc2b19b5a2e5947204c.js"></script>
]]></content>
    <summary type="html">
    <![CDATA[<p>JavaScript ES6/ES2015 Implementation of a LinkedList.</p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.codeblocq.com/tags/JavaScript/"/>
    
      <category term="ES2015" scheme="http://www.codeblocq.com/tags/ES2015/"/>
    
      <category term="ES6" scheme="http://www.codeblocq.com/tags/ES6/"/>
    
      <category term="Algorithm" scheme="http://www.codeblocq.com/tags/Algorithm/"/>
    
      <category term="Data Structure" scheme="http://www.codeblocq.com/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Big O Notation for algorithms]]></title>
    <link href="http://www.codeblocq.com/2016/04/Big-O-Notation-for-algorithms/"/>
    <id>http://www.codeblocq.com/2016/04/Big-O-Notation-for-algorithms/</id>
    <published>2016-04-26T01:59:51.000Z</published>
    <updated>2016-04-26T07:03:07.000Z</updated>
    <content type="html"><![CDATA[<p>This article will give you a brief and simple explanation of what the Big-O Notation does.</p>
<a id="more"></a>
<h2 id="Introduction">Introduction</h2><p>The Big-O notation is a way to describe how efficient a piece of code is. More precisely, it defines how the execution time is affected by a growth of the input.</p>
<p><strong>For Example:</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">Code</th>
<th style="text-align:center">Input Size</th>
<th style="text-align:center">Execution time</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">A</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1 sec</td>
</tr>
<tr>
<td style="text-align:center">A</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3 sec</td>
</tr>
<tr>
<td style="text-align:center">A</td>
<td style="text-align:center">6</td>
<td style="text-align:center">6 sec</td>
</tr>
<tr>
<td style="text-align:center">B</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1 sec</td>
</tr>
<tr>
<td style="text-align:center">B</td>
<td style="text-align:center">3</td>
<td style="text-align:center">9 sec</td>
</tr>
<tr>
<td style="text-align:center">B</td>
<td style="text-align:center">6</td>
<td style="text-align:center">36 sec</td>
</tr>
</tbody>
</table>
<p>In this example, code A is more efficient. When the input size increases, the time increases in a linear fashion. For code B, the time increases in a quadratic fashion.</p>
<p>In that example, we can say that if <code>N</code> is the size of the input: </p>
<ul>
<li>code A is a big-O of N: <code>O(N)</code></li>
<li>code B is a big-O of N<sup>2</sup>: <code>O(N^2)</code></li>
</ul>
<h2 id="More_examples">More examples</h2><p>In JavaScript.</p>
<h3 id="Constant_complexity">Constant complexity</h3><p>If the time complexity for an algorithm is <code>O(1)</code>, it is said to be constant. No matter how big the input, the execution time will always be the same.</p>
<p><strong>Example:</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFirstElement</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> array[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>No matter how big the array, the execution time remains the same as we are simply return the first element.</p>
<h3 id="Linear_complexity">Linear complexity</h3><p>If the time complexity for an algorithm is <code>O(N)</code>, it is said to be linear. The execution times increases linearly with the input size.</p>
<p><strong>Example:</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findMax</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> length = array.length;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (++index &lt; length) &#123;</span><br><span class="line">        <span class="keyword">var</span> currentValue = array[index];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(currentValue != <span class="literal">null</span> &amp;&amp; (currentMax === <span class="literal">undefined</span> || currentValue &gt; currentMax)) &#123;</span><br><span class="line">            <span class="keyword">var</span> currentMax = currentValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> currentMax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In this code, we iterate through the array only once, so the time needed to complete the operation is directly proportional to the array length.</p>
<h3 id="Quadratic_complexity">Quadratic complexity</h3><p>If the time complexity for an algorithm is <code>O(N^2)</code>, it is said to be of quadratic growth. The execution time increases linearly with the square of the input size.</p>
<p><strong>Example:</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> array1 = [<span class="string">'M'</span>, <span class="string">'a'</span>, <span class="string">'r'</span>, <span class="string">'y'</span>];</span><br><span class="line"><span class="keyword">var</span> array2 = [<span class="string">'J'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'k'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array1.length; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; array2.length; j = j + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(array1[i] + array2[j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In this, for each element in array1, we go through all the elements of array2. The time needed to complete the operation is proportional to the square of the arrays’s length.</p>
<p>Note:</p>
<ul>
<li>If both array have the same size, the time complexity is <code>O(N^2)</code></li>
<li>If both array have a different size, the time complexity is <code>O(N.M)</code> (as in N times M, where N and M are the array sizes)</li>
</ul>
<h2 id="Conclusion">Conclusion</h2><p>I hope this gives you an idea of what the big-O notation means and is used for. </p>
<p>In our example, we have used it to measure the time complexity, in some cases in can also be used to measure the space complexity (the space used in memory).</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This article will give you a brief and simple explanation of what the Big-O Notation does.</p>]]>
    
    </summary>
    
      <category term="Algorithm" scheme="http://www.codeblocq.com/tags/Algorithm/"/>
    
      <category term="Performance" scheme="http://www.codeblocq.com/tags/Performance/"/>
    
      <category term="Big-O" scheme="http://www.codeblocq.com/tags/Big-O/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Create a Pie Chart with HTML5 canvas]]></title>
    <link href="http://www.codeblocq.com/2016/04/Create-a-Pie-Chart-with-HTML5-canvas/"/>
    <id>http://www.codeblocq.com/2016/04/Create-a-Pie-Chart-with-HTML5-canvas/</id>
    <published>2016-04-25T03:37:56.000Z</published>
    <updated>2016-04-27T01:23:14.000Z</updated>
    <content type="html"><![CDATA[<p>This article will show you how to build a Pie Chart using the HTML5 canvas</p>
<a id="more"></a>
<h3 id="Final_Result">Final Result</h3><p></p><p data-height="425" data-theme-id="dark" data-slug-hash="yOxBdm" data-default-tab="js,result" data-user="klugjo" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/klugjo/pen/yOxBdm/" target="_blank" rel="external">Pie Chart Canvas HTML5</a> by Jonathan klughertz (<a href="http://codepen.io/klugjo" target="_blank" rel="external">@klugjo</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<h2 id="Project_Description">Project Description</h2><p>This mini project / tutorial will give you an introduction on how to <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Drawing_shapes" target="_blank" rel="external">draw shapes</a> in the canvas.</p>
<h2 id="HTML">HTML</h2><p>In our HTML file, we will simply insert a <code>&lt;canvas&gt;</code> element and specify a width and height.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">height</span>=<span class="string">"600"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Draw_a_pie_slice">Draw a pie slice</h2><p>Let’s start by drawing a single Pie slice.</p>
<h3 id="Canvas_initialization">Canvas initialization</h3><p>Let’s create a <code>draw()</code> function that will be executed on a <code>window.onload</code>. We can then retrieve our canvas by it’s <code>id</code> and create our context. The context objet is what will be used to draw our lines.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">  <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// code goes here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = draw;</span><br></pre></td></tr></table></figure>
<h3 id="Draw_a_Pie_Slice">Draw a Pie Slice</h3><p>To draw a Pie slice, we will:</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/moveTo" target="_blank" rel="external">Move to</a> the (200, 200) coordinates</li>
<li>Start <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc" target="_blank" rel="external">drawing an Arc</a> with 120 radius and the center at (200, 200) and an angle of 0.3 PI</li>
<li>Continue <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineTo" target="_blank" rel="external">tracing a line</a> all the way back to the center</li>
</ul>
<p>Here is the code</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">  <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Our angle</span></span><br><span class="line">  <span class="keyword">var</span> angle = <span class="built_in">Math</span>.PI * <span class="number">0.3</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Start a new path</span></span><br><span class="line">  ctx.beginPath();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Go to center of the Chart</span></span><br><span class="line">  ctx.moveTo(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Draw an Arc</span></span><br><span class="line">  <span class="comment">// arc(centerX, centerY, radius, angleStart, angleEnd)</span></span><br><span class="line">  ctx.arc(<span class="number">200</span>, <span class="number">200</span>, <span class="number">120</span>, <span class="number">0</span>, angle);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Draw a line to close the pie slice</span></span><br><span class="line">  ctx.lineTo(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Print the path</span></span><br><span class="line">  ctx.stroke();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>You might have realised that the initial line is drawn automatically: when we start drawing the arc, the path will automatically be linked from the initial position.</p>
<p>Here is what we have so far:</p>
<p><img src="/img/html5-canvas-slice.png" alt=""></p>
<h2 id="Draw_the_entire_Pie">Draw the entire Pie</h2><p>We will start with an array of angles which sum equals 2 PI and draw the all the slices.</p>
<p>We will also add a list of colours and for each slice, pick one and <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fill" target="_blank" rel="external">fill the slice</a> with that color.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">  <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Colors</span></span><br><span class="line">  <span class="keyword">var</span> colors = [<span class="string">'#4CAF50'</span>, <span class="string">'#00BCD4'</span>, <span class="string">'#E91E63'</span>, <span class="string">'#FFC107'</span>, <span class="string">'#9E9E9E'</span>, <span class="string">'#CDDC39'</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// List of Angles</span></span><br><span class="line">  <span class="keyword">var</span> angles = [<span class="built_in">Math</span>.PI * <span class="number">0.3</span>, <span class="built_in">Math</span>.PI * <span class="number">0.7</span>, <span class="built_in">Math</span>.PI * <span class="number">0.2</span>, <span class="built_in">Math</span>.PI * <span class="number">0.4</span>, <span class="built_in">Math</span>.PI * <span class="number">0.4</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Temporary variables, to store each arc angles</span></span><br><span class="line">  <span class="keyword">var</span> beginAngle = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> endAngle = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Iterate through the angles</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; angles.length; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// Begin where we left off</span></span><br><span class="line">    beginAngle = endAngle;</span><br><span class="line">    <span class="comment">// End Angle</span></span><br><span class="line">    endAngle = endAngle + angles[i];</span><br><span class="line">    </span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    <span class="comment">// Fill color</span></span><br><span class="line">    ctx.fillStyle = colors[i % colors.length];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Same code as before</span></span><br><span class="line">    ctx.moveTo(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">    ctx.arc(<span class="number">200</span>, <span class="number">200</span>, <span class="number">120</span>, beginAngle, endAngle);</span><br><span class="line">    ctx.lineTo(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">    ctx.stroke();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Fill</span></span><br><span class="line">    ctx.fill();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = draw;</span><br></pre></td></tr></table></figure>
<p>And this is where we are at:</p>
<p><img src="/img/html5-canvas-pie-chart1.png" alt=""></p>
<h2 id="Separate_the_slices">Separate the slices</h2><p>The last step consists of creating space in between the pie slices.</p>
<p>For each slice, the center has to be offset by <code>(cos(mediumAngle) * offset, sin(mediumAngle) * offset)</code> where:</p>
<ul>
<li><code>mediumAngle</code> is the angle formed by the origin and the slice bisector</li>
<li><code>offset</code> is the base offset</li>
</ul>
<p>All that is left to do is to implement that change:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">  <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> colors = [<span class="string">'#4CAF50'</span>, <span class="string">'#00BCD4'</span>, <span class="string">'#E91E63'</span>, <span class="string">'#FFC107'</span>, <span class="string">'#9E9E9E'</span>, <span class="string">'#CDDC39'</span>, <span class="string">'#18FFFF'</span>, <span class="string">'#F44336'</span>, <span class="string">'#FFF59D'</span>, <span class="string">'#6D4C41'</span>];</span><br><span class="line">  <span class="keyword">var</span> angles = [<span class="built_in">Math</span>.PI * <span class="number">0.3</span>, <span class="built_in">Math</span>.PI * <span class="number">0.7</span>, <span class="built_in">Math</span>.PI * <span class="number">0.2</span>, <span class="built_in">Math</span>.PI * <span class="number">0.4</span>, <span class="built_in">Math</span>.PI * <span class="number">0.4</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Base offset distance of 10</span></span><br><span class="line">  <span class="keyword">var</span> offset = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> beginAngle = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> endAngle = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Used to calculate the X and Y offset</span></span><br><span class="line">  <span class="keyword">var</span> offsetX, offsetY, medianAngle;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; angles.length; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">    beginAngle = endAngle;</span><br><span class="line">    endAngle = endAngle + angles[i];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// The medium angle is the average of two consecutive angles</span></span><br><span class="line">    medianAngle = (endAngle + beginAngle) / <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// X and Y calculations</span></span><br><span class="line">    offsetX = <span class="built_in">Math</span>.cos(medianAngle) * offset;</span><br><span class="line">    offsetY = <span class="built_in">Math</span>.sin(medianAngle) * offset;</span><br><span class="line">    </span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.fillStyle = colors[i % colors.length];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Adding the offsetX and offsetY to the center of the arc</span></span><br><span class="line">    ctx.moveTo(<span class="number">200</span> + offsetX, <span class="number">200</span> + offsetY);</span><br><span class="line">    ctx.arc(<span class="number">200</span> + offsetX, <span class="number">200</span> + offsetY, <span class="number">120</span>, beginAngle, endAngle);</span><br><span class="line">    ctx.lineTo(<span class="number">200</span> + offsetX, <span class="number">200</span> + offsetY);</span><br><span class="line">    ctx.stroke();</span><br><span class="line">    ctx.fill();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = draw;</span><br></pre></td></tr></table></figure>
<p>And this is the final result:</p>
<p></p><p data-height="425" data-theme-id="dark" data-slug-hash="yOxBdm" data-default-tab="js,result" data-user="klugjo" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/klugjo/pen/yOxBdm/" target="_blank" rel="external">Pie Chart Canvas HTML5</a> by Jonathan klughertz (<a href="http://codepen.io/klugjo" target="_blank" rel="external">@klugjo</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>Hope you have enjoyed this. Leave your questions in the comments below.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This article will show you how to build a Pie Chart using the HTML5 canvas</p>]]>
    
    </summary>
    
      <category term="HTML5" scheme="http://www.codeblocq.com/tags/HTML5/"/>
    
      <category term="Chart" scheme="http://www.codeblocq.com/tags/Chart/"/>
    
      <category term="Canvas" scheme="http://www.codeblocq.com/tags/Canvas/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Create links automatically in your hexo posts]]></title>
    <link href="http://www.codeblocq.com/2016/04/Create-links-automatically-in-your-hexo-posts/"/>
    <id>http://www.codeblocq.com/2016/04/Create-links-automatically-in-your-hexo-posts/</id>
    <published>2016-04-23T01:00:18.000Z</published>
    <updated>2016-04-23T02:20:50.000Z</updated>
    <content type="html"><![CDATA[<p>I have just finished an Hexo Plug-in that automatically transforms URLs into links. In the background it uses the <a href="https://github.com/gregjacobs/Autolinker.js" target="_blank" rel="external">Autolinker.js</a> library.</p>
<a id="more"></a>
<p><a href="https://github.com/klugjo/hexo-autolinker" target="_blank" rel="external">GitHub Repo</a></p>
<h3 id="Example:">Example:</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Visit www<span class="selector-class">.codeblocq</span><span class="selector-class">.com</span> when you have <span class="selector-tag">time</span>.</span><br></pre></td></tr></table></figure>
<p>becomes</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Visit &lt;<span class="selector-tag">a</span> href=<span class="string">"http://www.codeblocq.com"</span> target=<span class="string">"_blank"</span>&gt;www<span class="selector-class">.codeblocq</span><span class="selector-class">.com</span>&lt;/a&gt; when you have <span class="selector-tag">time</span>.</span><br></pre></td></tr></table></figure>
<h2 id="Installation">Installation</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-autolinker <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<h2 id="Options">Options</h2><p>Configure the plugin in your blog’s main <code>_config.yml</code></p>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">autolinker</span>:</span><br><span class="line">    <span class="attribute">enable</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attribute">newWindow</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attribute">urls</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attribute">email</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attribute">tel</span>: <span class="literal">false</span></span><br><span class="line">    <span class="attribute">twitter</span>: <span class="literal">false</span></span><br><span class="line">    <span class="attribute">hashtag</span>: instagram</span><br><span class="line">    <span class="attribute">className</span>: <span class="string">'test'</span></span><br></pre></td></tr></table></figure>
<h3 id="Explanations:">Explanations:</h3><table>
<thead>
<tr>
<th>Property</th>
<th>Default Value</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>enable</code></td>
<td>true</td>
<td style="text-align:left">Enable the plugin</td>
</tr>
<tr>
<td><code>newWindow</code></td>
<td>true</td>
<td style="text-align:left">Opens links in new tabs/windows &lt;-&gt; Add target=”_blank”</td>
</tr>
<tr>
<td><code>urls</code></td>
<td>true</td>
<td style="text-align:left">converts urls to links</td>
</tr>
<tr>
<td><code>email</code></td>
<td>true</td>
<td style="text-align:left">converts email addresses to mailto links</td>
</tr>
<tr>
<td><code>tel</code></td>
<td>false</td>
<td style="text-align:left">converts telephone numbers to tel links</td>
</tr>
<tr>
<td><code>twitter</code></td>
<td>false</td>
<td style="text-align:left">converts twitter handles to links</td>
</tr>
<tr>
<td><code>hastag</code></td>
<td>false</td>
<td style="text-align:left">Use <code>twitter</code>, <code>facebook</code> or <code>instagram</code> to convert hashtags to the links</td>
</tr>
<tr>
<td><code>className</code></td>
<td>false</td>
<td style="text-align:left">Adds a custom class to the links that were transformed</td>
</tr>
</tbody>
</table>
<p>Checkout <a href="https://github.com/gregjacobs/Autolinker.js" target="_blank" rel="external">Autolinker.js</a> and the <a href="http://gregjacobs.github.io/Autolinker.js/examples/live-example/" target="_blank" rel="external">Autolinker live examples</a> for more options and examples.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I have just finished an Hexo Plug-in that automatically transforms URLs into links. In the background it uses the <a href="https://github.com/gregjacobs/Autolinker.js">Autolinker.js</a> library.</p>]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://www.codeblocq.com/tags/Hexo/"/>
    
      <category term="Autolinker" scheme="http://www.codeblocq.com/tags/Autolinker/"/>
    
      <category term="PlugIn" scheme="http://www.codeblocq.com/tags/PlugIn/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Add a build passing badge to your github repository]]></title>
    <link href="http://www.codeblocq.com/2016/04/Add-a-build-passing-badge-to-your-github-repository/"/>
    <id>http://www.codeblocq.com/2016/04/Add-a-build-passing-badge-to-your-github-repository/</id>
    <published>2016-04-21T08:10:38.000Z</published>
    <updated>2016-04-22T04:13:14.000Z</updated>
    <content type="html"><![CDATA[<p>This article is about how you can add a build passing badge to your github repository:<br><a id="more"></a><br><img src="https://travis-ci.org/klugjo/hexo-autolinker.svg?branch=master" alt=""></p>
<h3 id="Steps">Steps</h3><ul>
<li><p><a href="/2016/04/Setup-Travis-CI-with-your-node-project/">Setup your Travis CI automated build</a> and go <a href="https://travis-ci.org/" target="_blank" rel="external">https://travis-ci.org/</a>.</p>
</li>
<li><p>Select the repository you are interested in and click the badge icon next to the title.</p>
</li>
<li><p>Select the branch you want to check the build status for.</p>
</li>
<li><p>Select Markdown, copy the text below and copy paste it in your README.md file<br><br></p>
</li>
</ul>
<p>You are done !<br><br><br><a href="https://github.com/klugjo/hexo-autolinker" target="_blank" rel="external">Check this repository if you need an example</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This article is about how you can add a build passing badge to your github repository:<br>]]>
    
    </summary>
    
      <category term="Github" scheme="http://www.codeblocq.com/tags/Github/"/>
    
      <category term="Travis" scheme="http://www.codeblocq.com/tags/Travis/"/>
    
      <category term="Markdown" scheme="http://www.codeblocq.com/tags/Markdown/"/>
    
  </entry>
  
</feed>

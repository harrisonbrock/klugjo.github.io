<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CodeBlocQ</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.codeblocq.com/"/>
  <updated>2017-02-25T15:48:02.000Z</updated>
  <id>http://www.codeblocq.com/</id>
  
  <author>
    <name>Jonathan Klughertz</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Configure Jest Test Location</title>
    <link href="http://www.codeblocq.com/2017/02/Configure-Jest-Test-Location/"/>
    <id>http://www.codeblocq.com/2017/02/Configure-Jest-Test-Location/</id>
    <published>2017-02-25T15:44:03.000Z</published>
    <updated>2017-02-25T15:48:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>Quick article to help look at the right place when configuring your tests in Jest.</p>
<h2 id="Default-test-files-location"><a href="#Default-test-files-location" class="headerlink" title="Default test files location"></a>Default test files location</h2><p>The first time I read through the configuration I thought that the paths to my tests were configured using <a href="https://facebook.github.io/jest/docs/configuration.html#testpathdirs-array-string" target="_blank" rel="external">testPathDirs
</a>. It turns out that this property is only used to restraint the places Jest will look for tests to sub modules.</p>
<p>The important thing to note is that by default:</p>
<p><strong>Jest will look for <code>’js</code> and <code>.jsx</code> files inside of <code>__tests__</code> folders.</strong></p>
<h2 id="Use-a-custom-location"><a href="#Use-a-custom-location" class="headerlink" title="Use a custom location"></a>Use a custom location</h2><p>This is the <em>default</em> that needs to change. To do so, use <a href="https://facebook.github.io/jest/docs/configuration.html#testregex-string" target="_blank" rel="external">testRegex</a>.</p>
<p>For example, if you want to store all your test files inside a <code>./tests</code> folder, the only jest configuration option you are going to need is:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">“jest”: &#123;</div><div class="line">  <span class="string">"testRegex"</span>: <span class="string">"tests/.*\\.(js|jsx)$"</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Quick article to help look at the right place when configuring your tests in Jest.&lt;/p&gt;
&lt;h2 id=&quot;Default-test-files-location&quot;&gt;&lt;a href=&quot;#Def
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.codeblocq.com/tags/JavaScript/"/>
    
      <category term="React" scheme="http://www.codeblocq.com/tags/React/"/>
    
      <category term="Jest" scheme="http://www.codeblocq.com/tags/Jest/"/>
    
      <category term="Unit Tests" scheme="http://www.codeblocq.com/tags/Unit-Tests/"/>
    
  </entry>
  
  <entry>
    <title>Notes on Turning Pro by Steven Pressfield</title>
    <link href="http://www.codeblocq.com/2017/02/Notes-on-Turning-Pro-by-Steven-Pressfield/"/>
    <id>http://www.codeblocq.com/2017/02/Notes-on-Turning-Pro-by-Steven-Pressfield/</id>
    <published>2017-02-23T14:20:36.000Z</published>
    <updated>2017-02-23T15:05:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="First-impressions"><a href="#First-impressions" class="headerlink" title="First impressions"></a>First impressions</h2><p>A while ago I read The <a href="http://www.goodreads.com/book/show/1319.The_War_of_Art" target="_blank" rel="external">War of Art</a> which seems to be Pressfield’s most famous book. It is highly recommended by <a href="https://simpleprogrammer.com/" target="_blank" rel="external">John Sonmez</a>.<br><a id="more"></a></p>
<p>I thought the book was great although not life changing. It explains how to beat <em>Resistance</em>, this force that prevents us from accomplishing our goals. <a href="https://www.amazon.com/Turning-Pro-Inner-Power-Create/dp/1936891034" target="_blank" rel="external">Turning Pro</a> is a follow up on the War of Art and I am happy to say that I found it a lot clearer and motivational. This book details how amateur and pro behaviours differ in all sorts of situations and how both deal with life changing decisions. </p>
<p>It is a quick and easy read but the book packs a huge punch. Worth it.</p>
<blockquote>
<p>The Amateur tweets. The Pro works.</p>
</blockquote>
<h2 id="Notes-and-Takeaways"><a href="#Notes-and-Takeaways" class="headerlink" title="Notes and Takeaways"></a>Notes and Takeaways</h2><h3 id="Don’t-be-a-shadow-of-yourself"><a href="#Don’t-be-a-shadow-of-yourself" class="headerlink" title="Don’t be a shadow of yourself"></a>Don’t be a shadow of yourself</h3><p>Simple yet powerful concept. We all have this image of our perfect self associated with a set of goals we need to achieve in order to reach that ideal.</p>
<p>One way we end up not following that path is by behaving like <em>addicts</em>: we get high in order to fool ourselves in believing that we are amazing or in order to numb the pain.</p>
<blockquote>
<p>The addict seeks to escape the pain of being human in one of two ways–by transcending it or by anesthetizing it.</p>
</blockquote>
<p>Addiction (sex, money, getting in trouble, living in the future/past, ..) is simply a distraction and a materialization of <em>Resistance</em>.</p>
<h3 id="We-are-all-scared"><a href="#We-are-all-scared" class="headerlink" title="We are all scared"></a>We are all scared</h3><p>Pressfield then explains how overcoming addiction is in fact overcoming the fear of becoming who we really are. </p>
<p>It is indeed simpler to be a lesser version of ourselves. That way we can give ourselves (and others) the excuse of simply not being ourselves.</p>
<p>It is typical for amateurs to let others define who they are. The key is to stop being afraid of being judged for who we really are.</p>
<h3 id="There-are-many-ways-remedies-to-Amateurism"><a href="#There-are-many-ways-remedies-to-Amateurism" class="headerlink" title="There are many ways remedies to Amateurism"></a>There are many ways remedies to Amateurism</h3><p>Work everyday, focus on the long term and not the quick wins, be patient, make the complex simple, never show off, never be scared of asking for help … </p>
<p>Many more in the book ;)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;First-impressions&quot;&gt;&lt;a href=&quot;#First-impressions&quot; class=&quot;headerlink&quot; title=&quot;First impressions&quot;&gt;&lt;/a&gt;First impressions&lt;/h2&gt;&lt;p&gt;A while ago I read The &lt;a href=&quot;http://www.goodreads.com/book/show/1319.The_War_of_Art&quot;&gt;War of Art&lt;/a&gt; which seems to be Pressfield’s most famous book. It is highly recommended by &lt;a href=&quot;https://simpleprogrammer.com/&quot;&gt;John Sonmez&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
      <category term="Books" scheme="http://www.codeblocq.com/tags/Books/"/>
    
      <category term="Procrastination" scheme="http://www.codeblocq.com/tags/Procrastination/"/>
    
      <category term="Productivity" scheme="http://www.codeblocq.com/tags/Productivity/"/>
    
  </entry>
  
  <entry>
    <title>Notes on Ego is the enemy by Ryan Holiday</title>
    <link href="http://www.codeblocq.com/2016/10/Notes-on-Ego-is-the-enemy-by-Ryan-Holiday/"/>
    <id>http://www.codeblocq.com/2016/10/Notes-on-Ego-is-the-enemy-by-Ryan-Holiday/</id>
    <published>2016-10-30T13:12:02.000Z</published>
    <updated>2016-11-15T13:15:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="First-Impressions"><a href="#First-Impressions" class="headerlink" title="First Impressions"></a>First Impressions</h2><p><a href="http://www.goodreads.com/book/show/27036528-ego-is-the-enemy" target="_blank" rel="external">Ego is the Enemy</a> is a book that I first heard of while browsing <a href="https://sivers.org/book/EgoEnemy" target="_blank" rel="external">Derek Sivers</a> excellent blog. I just finished it and it is an awesome reminder (for some of it) and eye opener (for a lot of it) of how our ego gets in the way of our work and aspirations and can, if left unchecked, destroy us.</p>
<p>The book is divided in three parts: before, during, failure. Each part is divided in small and easy to digest chapters that give details on how ego can manifest itself. There is some repetition, and I thought the book became more and more predictable as chapters go by, but overall it was an excellent read and I would highly recommend it.</p>
<p>No matter who you are and whether you are currently at the peak of your career and success or at the bottom of the pit, this book will help you look at your life and art differently. It will help you become a happier, more balanced person. It will help you take a deep breath of humility and selflessness.</p>
<h2 id="Notes-and-Takeaways"><a href="#Notes-and-Takeaways" class="headerlink" title="Notes and Takeaways"></a>Notes and Takeaways</h2><p>This is the one passage of the book that resonated the most with me and one that summarizes the book really well.</p>
<p>“Out of the right speaker in your inner ear will come the endless stream of self-aggrandizement, the recitation of one’s specialness, of how much more open and gifted and brilliant and knowing and misunderstood and humble one is. Out of the left speaker will be the rap songs of self-loathing, the lists of all the things one doesn’t do well, of all the mistakes one has made today and over an entire lifetime, the doubt, the assertion that everything that one touches turns to shit, that one doesn’t do relationships well, that one is in every way a fraud, incapable of selfless love, that one had no talent or insight, and on and on and on.”</p>
<p>Ego is that destructive force that exists within us and will force us to become obsessed with our own importance. It creates conflicting thoughts within our head and always tries to bring back the focus on us instead and away from the things we aim to accomplish. It will prevent us from getting started with our work, becoming truly masters of our crafts, working well with others and accepting failure and loss.</p>
<p>A few of the remedies</p>
<ul>
<li>Focus on learning new things</li>
<li>Focus on the ‘what’ and not the ‘who’ &lt;-&gt; Be less and do more.</li>
<li>Keep a healthy distance with your emotions and don’t be driven exclusively by passion</li>
<li>Don’t look down as it will prevent you from seeing what is above you</li>
<li>Stay focused and centered on what really matters</li>
<li>Live hidden</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;First-Impressions&quot;&gt;&lt;a href=&quot;#First-Impressions&quot; class=&quot;headerlink&quot; title=&quot;First Impressions&quot;&gt;&lt;/a&gt;First Impressions&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;h
    
    </summary>
    
    
      <category term="Books" scheme="http://www.codeblocq.com/tags/Books/"/>
    
      <category term="Ego" scheme="http://www.codeblocq.com/tags/Ego/"/>
    
      <category term="Self-Help" scheme="http://www.codeblocq.com/tags/Self-Help/"/>
    
  </entry>
  
  <entry>
    <title>Setup Jest to use an external configuration file</title>
    <link href="http://www.codeblocq.com/2016/10/Setup-Jest-to-use-an-external-configuration-file/"/>
    <id>http://www.codeblocq.com/2016/10/Setup-Jest-to-use-an-external-configuration-file/</id>
    <published>2016-10-26T12:30:36.000Z</published>
    <updated>2016-10-26T12:34:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>The Jest configuration does not have to be in the <code>package.json</code>, it can be put in an external file.<br><a id="more"></a></p>
<h2 id="Create-a-jestrc-file"><a href="#Create-a-jestrc-file" class="headerlink" title="Create a .jestrc file"></a>Create a .jestrc file</h2><p>Create a <code>.jestrc</code> file and put your configuration inside. The format is still JSON but the <code>”jest”: { … }”</code> key at the root is omitted.</p>
<figure class="highlight javascript"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  […],</div><div class="line">  “jest”: &#123;</div><div class="line">    <span class="string">"testRegex"</span>: <span class="string">"tests/.*\\.(js|jsx)$"</span></div><div class="line">  &#125;,</div><div class="line">  […]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>becomes </p>
<figure class="highlight javascript"><figcaption><span>.jestrc</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"testRegex"</span>: <span class="string">"tests/.*\\.(js|jsx)$"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Link-configuration"><a href="#Link-configuration" class="headerlink" title="Link configuration"></a>Link configuration</h2><p>Use the <code>—config</code> option when calling jest to use the <code>.jestrc</code> file in lieu of the package.json section</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">jest </span>—<span class="built_in">config</span> .<span class="keyword">jestrc</span></div></pre></td></tr></table></figure>
<p>Enjoy !</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The Jest configuration does not have to be in the &lt;code&gt;package.json&lt;/code&gt;, it can be put in an external file.&lt;br&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.codeblocq.com/tags/JavaScript/"/>
    
      <category term="Jest" scheme="http://www.codeblocq.com/tags/Jest/"/>
    
      <category term="Unit Tests" scheme="http://www.codeblocq.com/tags/Unit-Tests/"/>
    
  </entry>
  
  <entry>
    <title>8 VSCode Configuration Options you need to know about</title>
    <link href="http://www.codeblocq.com/2016/10/8-VSCode-Configuration-Options-you-need-to-know-about/"/>
    <id>http://www.codeblocq.com/2016/10/8-VSCode-Configuration-Options-you-need-to-know-about/</id>
    <published>2016-10-16T09:40:50.000Z</published>
    <updated>2016-10-16T09:46:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>Improve your VSCode experience with these useful configuration options<br><a id="more"></a></p>
<p>To open the configuration file use <code>Cmd + ,</code> on mac and <code>File -&gt; Preferences -&gt; User Settings</code> on Windows and Linux</p>
<h2 id="Font-Family"><a href="#Font-Family" class="headerlink" title="Font Family"></a>Font Family</h2><p>Change the editor font to your favourite <a href="https://hail2u.github.io/mn/" target="_blank" rel="external">monospace font</a> with <code>editor.fontFamily</code></p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"editor.fontFamily"</span>: <span class="string">"Inconsolata, 'Courier New', monospace"</span>,</div></pre></td></tr></table></figure>
<h2 id="Font-Size"><a href="#Font-Size" class="headerlink" title="Font Size"></a>Font Size</h2><p>I am finding the default font size to be way to small for my liking (and tired programmer’s eyes). Use <code>editor.fontSize</code> to remedy this.</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"editor.fontSize"</span>: <span class="number">16</span>,</div></pre></td></tr></table></figure>
<h2 id="Line-Wrapping"><a href="#Line-Wrapping" class="headerlink" title="Line Wrapping"></a>Line Wrapping</h2><p>By default lines do not wrap. If you are tired of doing so much horizontal scrolling, use <code>editor.wordWrap</code>.</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"editor.wordWrap"</span>: <span class="literal">true</span></div></pre></td></tr></table></figure>
<h2 id="Line-wrap-indentation"><a href="#Line-wrap-indentation" class="headerlink" title="Line wrap indentation"></a>Line wrap indentation</h2><p>Related to the previous item. When doing line wraps, I like to have a small indent to make it more obvious. This can be achieved with <code>editor.wrappingIndent</code></p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"editor.wrappingIndent"</span>: <span class="string">"indent"</span>,</div></pre></td></tr></table></figure>
<h2 id="Cursor-blinking"><a href="#Cursor-blinking" class="headerlink" title="Cursor blinking"></a>Cursor blinking</h2><p>In the pimp my editor category, improve the way your cursor blinks. Totally useless, totally worth it !</p>
<p>Possible values include <code>&#39;blink’</code>, <code>’smooth’</code>, <code>’phase’</code>, <code>’expand’</code> and <code>’solid’</code>. I am rolling with <code>’phase’</code></p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"editor.cursorBlinking"</span>: <span class="string">"phase"</span></div></pre></td></tr></table></figure>
<h2 id="Automatic-formatting"><a href="#Automatic-formatting" class="headerlink" title="Automatic formatting"></a>Automatic formatting</h2><p>This one is a lot more useful. It formats your code automatically as you type. Use <code>editor.formatOnType</code> to enable (off by default).</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"editor.formatOnType"</span>: <span class="literal">true</span>,</div></pre></td></tr></table></figure>
<h2 id="Terminal-Font"><a href="#Terminal-Font" class="headerlink" title="Terminal Font"></a>Terminal Font</h2><p>You know VSCode ships with an integrated Terminal you can open with <code>Ctrl + \</code>. </p>
<p>If you are on a Mac and using a custom shell like <code>zsh</code> you will probably also have to update the Terminal font to a <a href="https://github.com/powerline/fonts" target="_blank" rel="external">Powerline font</a>. Use <code>terminal.integrated.fontFamily</code> to do so.</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"terminal.integrated.fontFamily"</span>: <span class="string">"Meslo LG M DZ for Powerline"</span>,</div></pre></td></tr></table></figure>
<h2 id="Automated-Extensions-Update"><a href="#Automated-Extensions-Update" class="headerlink" title="Automated Extensions Update"></a>Automated Extensions Update</h2><p>I am sure you have quite a few extensions installed by now. Get them to update automatically with <code>extensions.autoUpdate</code> to avoid these pesky notifications.</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"extensions.autoUpdate"</span>: <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>Happy Coding !</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Improve your VSCode experience with these useful configuration options&lt;br&gt;
    
    </summary>
    
    
      <category term="VSCode" scheme="http://www.codeblocq.com/tags/VSCode/"/>
    
      <category term="Tools" scheme="http://www.codeblocq.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Github Avatar not showing on list of commits</title>
    <link href="http://www.codeblocq.com/2016/10/Github-Avatar-not-showing-on-list-of-commits/"/>
    <id>http://www.codeblocq.com/2016/10/Github-Avatar-not-showing-on-list-of-commits/</id>
    <published>2016-10-10T14:10:17.000Z</published>
    <updated>2016-10-13T14:42:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>Your avatar is not showing on the list of commits in github. Here is how to fix it:</p>
<p><img src="/img/github-avatar-missing.png" alt=""></p>
<h2 id="Check-your-account"><a href="#Check-your-account" class="headerlink" title="Check your account"></a>Check your account</h2><p>This should be obvious but let’s start by checking that your profile picture is properly set up. This can be done within the github settings page.</p>
<h2 id="Check-your-git-user-email-config"><a href="#Check-your-git-user-email-config" class="headerlink" title="Check your git user.email config"></a>Check your git user.email config</h2><p>If everything is in order with your account’s settings, there is probably a mismatch between your local computer git config email and the email setup in github.</p>
<p>This can happen for 2 reasons:</p>
<h3 id="You-have-not-set-your-email-in-git"><a href="#You-have-not-set-your-email-in-git" class="headerlink" title="You have not set your email in git"></a>You have not set your email in git</h3><p>If that is the case, you need to <a href="https://help.github.com/articles/setting-your-email-in-git/" target="_blank" rel="external">set your email in your local git config</a>. </p>
<p>Check what is your current email with</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">config</span> user.email</div></pre></td></tr></table></figure>
<p>And set your email with </p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git config user.email “your.email<span class="variable">@example</span>.com<span class="string">"</span></div></pre></td></tr></table></figure>
<p>Note that this will only affect new commits. Past commits will remain the same.</p>
<h3 id="You-are-using-a-different-email-that-what-has-been-configured-in-github"><a href="#You-are-using-a-different-email-that-what-has-been-configured-in-github" class="headerlink" title="You are using a different email that what has been configured in github"></a>You are using a different email that what has been configured in github</h3><p>This happens when you are contributing to a private repository on a work computer for example and you have configured git to use your work email instead of your usual github email.</p>
<p>There are 2 ways to fix this:</p>
<ul>
<li>Go to <code>Github Settings</code> &gt; <code>Emails</code> &gt; <code>Add email address</code></li>
</ul>
<p>And add your work email address here to link commits done from a local git configured with your work email to your normal github account.</p>
<ul>
<li>Change your local git config to use your main github email (cf above)</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Your avatar is not showing on the list of commits in github. Here is how to fix it:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/github-avatar-missing.png&quot; alt=
    
    </summary>
    
    
      <category term="Github" scheme="http://www.codeblocq.com/tags/Github/"/>
    
      <category term="Git" scheme="http://www.codeblocq.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Setup the latest React in JSBin</title>
    <link href="http://www.codeblocq.com/2016/09/Setup-the-latest-React-in-JSBin/"/>
    <id>http://www.codeblocq.com/2016/09/Setup-the-latest-React-in-JSBin/</id>
    <published>2016-09-19T10:01:34.000Z</published>
    <updated>2016-09-19T10:27:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>This article will demonstrate how to set up the latest version of React in JSBin. This is particularly useful if you want to test something out and share it quickly.<br><a id="more"></a></p>
<h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>If you are only interested in the code, go to <a href="https://jsbin.com/vixuyu/25/edit?html,css,js,output" target="_blank" rel="external">https://jsbin.com/vixuyu/25/edit?html,css,js,output</a>.</p>
<p>(Disable your Ad Blocks).</p>
<h2 id="A-bit-of-background"><a href="#A-bit-of-background" class="headerlink" title="A bit of background"></a>A bit of background</h2><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><p>To make this work you are obviously going to need <a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a>. You are also going to need <a href="https://github.com/facebook/react/tree/master/packages/react-dom" target="_blank" rel="external">ReactDOM</a> to render HTML.</p>
<p>Get these 2 scripts from</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://npmcdn.com/react@latest/dist/react-with-addons.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://npmcdn.com/react-dom@latest/dist/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>I got these URLs from <a href="https://jsfiddle.net/reactjs/69z2wepo/" target="_blank" rel="external">https://jsfiddle.net/reactjs/69z2wepo/</a> which seems to be the official React Fiddle.</p>
<h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p>This is where it get trickier. To be able to write JSX/ES6 directly in JSBin, you need to be able to transpile the code with Babel directly in the browser.</p>
<p>Unfortunately, <a href="https://babeljs.io/docs/usage/browser/" target="_blank" rel="external">babel-browser</a> has been discontinued. Well guess what; just use <a href="https://github.com/Daniel15/babel-standalone" target="_blank" rel="external">babel-standalone</a> instead. It is a non official build of Babel for use in non-Node environments, mainly browsers.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.15.0/babel.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="JSX-and-ES6"><a href="#JSX-and-ES6" class="headerlink" title="JSX and ES6"></a>JSX and ES6</h3><p>That is it, you are ready to start writting your React app.</p>
<p>In JSBin, change the type of the JS tab from <code>JavaScript</code> to <code>ES6 / Babel</code> and you are ready to go.</p>
<figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- This element's contents will be replaced with your component. --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Hello = React.createClass(&#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Hello</span> <span class="attr">name</span>=<span class="string">"World"</span> /&gt;</span>,</span></div><div class="line">  document.getElementById('app')</div><div class="line">);</div></pre></td></tr></table></figure>
<p>Hope that helps !</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This article will demonstrate how to set up the latest version of React in JSBin. This is particularly useful if you want to test something out and share it quickly.&lt;br&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.codeblocq.com/tags/JavaScript/"/>
    
      <category term="ES6" scheme="http://www.codeblocq.com/tags/ES6/"/>
    
      <category term="React" scheme="http://www.codeblocq.com/tags/React/"/>
    
      <category term="JSBin" scheme="http://www.codeblocq.com/tags/JSBin/"/>
    
  </entry>
  
  <entry>
    <title>Set Menu Items in Electron</title>
    <link href="http://www.codeblocq.com/2016/09/Set-Menu-Items-in-Electron/"/>
    <id>http://www.codeblocq.com/2016/09/Set-Menu-Items-in-Electron/</id>
    <published>2016-09-13T10:37:38.000Z</published>
    <updated>2016-09-19T10:27:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>This post will show you how to set up menus in Electron and Mac OS X.<br><a id="more"></a></p>
<h2 id="Get-started"><a href="#Get-started" class="headerlink" title="Get started"></a>Get started</h2><h3 id="npm-init"><a href="#npm-init" class="headerlink" title="npm init"></a>npm init</h3><p>Let’s set up a basic simple Electron app.</p>
<p>Start with</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">npm</span> init -y</div></pre></td></tr></table></figure>
<ul>
<li>Set the <code>main</code> entry point to <code>src/index.js</code>.</li>
<li>Set the <code>start</code> npm script to be <code>electron .</code>. </li>
</ul>
<h3 id="Install-Electron"><a href="#Install-Electron" class="headerlink" title="Install Electron"></a>Install Electron</h3><p>Then install electron with</p>
<figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> electron-prebuilt</div></pre></td></tr></table></figure>
<h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><p>Create an <code>src/index.js</code> file and put the following content in:</p>
<figure class="highlight javascript"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> electron = <span class="built_in">require</span>(<span class="string">'electron'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> app = electron.app;</div><div class="line"><span class="keyword">const</span> BrowserWindow = electron.BrowserWindow;</div><div class="line"></div><div class="line">app.on(<span class="string">'ready'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">new</span> BrowserWindow();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Run <code>npm start</code> and doublecheck that everything works – you should see a blank window open and the Mac OS X menu is the default Electron menu.</p>
<p>If you need help with that part, check out my tutorial on <a href="/2016/06/Build-your-First-Electron-App/">getting started with Electron</a>.</p>
<h2 id="Set-a-custom-menu"><a href="#Set-a-custom-menu" class="headerlink" title="Set a custom menu"></a>Set a custom menu</h2><h3 id="Override-the-Default-Electron-Development-Menu"><a href="#Override-the-Default-Electron-Development-Menu" class="headerlink" title="Override the Default Electron Development Menu"></a>Override the Default Electron Development Menu</h3><p>First pull the <code>Menu</code> class from <code>electron</code>:</p>
<figure class="highlight javascript"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Menu = electron.Menu;</div></pre></td></tr></table></figure>
<p>Then use the <a href="https://github.com/electron/electron/blob/master/docs/api/menu.md#menubuildfromtemplatetemplate" target="_blank" rel="external">buildFromTemplate</a> method to generate the menu and <a href="https://github.com/electron/electron/blob/master/docs/api/menu.md#menusetapplicationmenumenu" target="_blank" rel="external">setApplicationMenu</a> to set it.</p>
<p>Here is the full code:</p>
<figure class="highlight javascript"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> electron = <span class="built_in">require</span>(<span class="string">'electron'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> app = electron.app;</div><div class="line"><span class="keyword">const</span> BrowserWindow = electron.BrowserWindow;</div><div class="line"><span class="keyword">const</span> Menu = electron.Menu;</div><div class="line"></div><div class="line">app.on(<span class="string">'ready'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">new</span> BrowserWindow();</div><div class="line"></div><div class="line">    <span class="keyword">const</span> menuTemplate = [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">label</span>: <span class="string">'Electron'</span></div><div class="line">        &#125;</div><div class="line">    ];</div><div class="line"></div><div class="line">    <span class="keyword">const</span> menu = Menu.buildFromTemplate(menuTemplate);</div><div class="line">    Menu.setApplicationMenu(menu);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Run the app and check that the default menu is no more.</p>
<h3 id="Define-some-menu-items"><a href="#Define-some-menu-items" class="headerlink" title="Define some menu items"></a>Define some menu items</h3><p>At the moment, our menu is empty. (Also you can’t set the first Menu name to anything else than <em>Electron</em> – you need to package the app for another name to appear)</p>
<ul>
<li>Let’s add an about menu item.</li>
</ul>
<figure class="highlight javascript"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> menuTemplate = [</div><div class="line">    &#123;</div><div class="line">        <span class="attr">label</span>: <span class="string">'Electron'</span>,</div><div class="line">        <span class="attr">submenu</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">label</span>: <span class="string">'About ...'</span>,</div><div class="line">                <span class="attr">click</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    <span class="built_in">console</span>.log(<span class="string">'About Clicked'</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">];</div></pre></td></tr></table></figure>
<p>Run the app and observe how a click writes to the console.</p>
<ul>
<li>Let’s add a Quit Menu Item.</li>
</ul>
<figure class="highlight javascript"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> menuTemplate = [</div><div class="line">    &#123;</div><div class="line">        <span class="attr">label</span>: <span class="string">'Electron'</span>,</div><div class="line">        <span class="attr">submenu</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">label</span>: <span class="string">'About ...'</span>,</div><div class="line">                <span class="attr">click</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    <span class="built_in">console</span>.log(<span class="string">'About Clicked'</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;, &#123;</div><div class="line">                <span class="attr">label</span>: <span class="string">'Quit'</span>,</div><div class="line">                <span class="attr">click</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    app.quit();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">];</div></pre></td></tr></table></figure>
<p>Run the app and doublecheck that the Quit button actually quits the app.</p>
<ul>
<li>Let’s add a separator</li>
</ul>
<p>You might have noticed that something is missing. Let’s add an horizontal line in between About and Quit with <code>{ type: &#39;separator&#39; }</code></p>
<figure class="highlight javascript"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> menuTemplate = [</div><div class="line">    &#123;</div><div class="line">        <span class="attr">label</span>: <span class="string">'Electron'</span>,</div><div class="line">        <span class="attr">submenu</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">label</span>: <span class="string">'About ...'</span>,</div><div class="line">                <span class="attr">click</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    <span class="built_in">console</span>.log(<span class="string">'About Clicked'</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;, &#123;</div><div class="line">                <span class="attr">type</span>: <span class="string">'separator'</span></div><div class="line">            &#125;, &#123;</div><div class="line">                <span class="attr">label</span>: <span class="string">'Quit'</span>,</div><div class="line">                <span class="attr">click</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    app.quit();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">];</div></pre></td></tr></table></figure>
<p>Run the app and notice the difference.</p>
<h2 id="What’s-next"><a href="#What’s-next" class="headerlink" title="What’s next ?"></a>What’s next ?</h2><p>Now that you know the basics of setting up a custom menu for your app, you should have no problem <a href="https://github.com/electron/electron/blob/master/docs/api/menu.md" target="_blank" rel="external">scrolling through the docs</a>.</p>
<p>Here are a few things you can try:</p>
<ul>
<li>Try to use the <code>accelerator</code> property to link menu items with <a href="https://github.com/electron/electron/blob/master/docs/api/accelerator.md" target="_blank" rel="external">Application Shortcuts</a>.</li>
<li>Set a default <code>role</code> for the click action. Check the list of roles <a href="https://github.com/electron/electron/blob/master/docs/api/menu-item.md" target="_blank" rel="external">here</a>.</li>
<li>Create a submenu with the <code>submenu</code> property.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This post will show you how to set up menus in Electron and Mac OS X.&lt;br&gt;
    
    </summary>
    
    
      <category term="Node" scheme="http://www.codeblocq.com/tags/Node/"/>
    
      <category term="JavaScript" scheme="http://www.codeblocq.com/tags/JavaScript/"/>
    
      <category term="Electron" scheme="http://www.codeblocq.com/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>Pimp up iTerm with Zsh and prezto on Mac OS X</title>
    <link href="http://www.codeblocq.com/2016/09/Pimp-up-iTerm-with-Zsh-and-prezto-on-Mac-OS-X/"/>
    <id>http://www.codeblocq.com/2016/09/Pimp-up-iTerm-with-Zsh-and-prezto-on-Mac-OS-X/</id>
    <published>2016-09-12T03:52:16.000Z</published>
    <updated>2016-09-12T06:11:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>Follow this simple steps to setup zsh and prezto on Mac OS X (El Capitan) and you command line will look like:<br><br><br><img src="/img/prezto-powerline-mac-os-x.png" alt=""><br><a id="more"></a></p>
<h2 id="Install-Zsh"><a href="#Install-Zsh" class="headerlink" title="Install Zsh"></a>Install Zsh</h2><h3 id="Install-Zsh-and-Zsh-Completions"><a href="#Install-Zsh-and-Zsh-Completions" class="headerlink" title="Install Zsh and Zsh Completions"></a>Install <a href="">Zsh</a> and <a href="https://github.com/zsh-users/zsh-completions" target="_blank" rel="external">Zsh Completions</a></h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">brew </span><span class="keyword">install </span>zsh zsh-completions</div></pre></td></tr></table></figure>
<p>Then try to run <code>zsh</code>:</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>zsh</div></pre></td></tr></table></figure>
<p>When zsh opens for the first time, choose option <code>0</code>.</p>
<h3 id="OPTIONAL"><a href="#OPTIONAL" class="headerlink" title="OPTIONAL:"></a><em>OPTIONAL:</em></h3><p>At this stage I ran into some errors similar to <code>dyld: Library not loaded: /usr/local/lib/libgdbm.4.dylib</code>.</p>
<p>Follow these steps to fix:</p>
<ul>
<li>First change the ownership of <code>/usr/local</code></li>
</ul>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>cd /usr/local</div><div class="line"><span class="variable">$ </span>sudo chown -R &lt;uid&gt;<span class="symbol">:&lt;gid&gt;</span> *</div></pre></td></tr></table></figure>
<p>Retrieve the values of <code>&lt;uid&gt;</code> and <code>&lt;gid&gt;</code> by running <code>id</code> in your terminal.</p>
<ul>
<li>Reinstall gdbm and pcre</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">brew </span><span class="keyword">install </span>gdbm</div><div class="line">$ <span class="keyword">brew </span>reinstall pcre</div></pre></td></tr></table></figure>
<p>And you should be ready to go</p>
<h2 id="Install-Prezto"><a href="#Install-Prezto" class="headerlink" title="Install Prezto"></a>Install <a href="https://github.com/sorin-ionescu/prezto" target="_blank" rel="external">Prezto</a></h2><h3 id="Install-with"><a href="#Install-with" class="headerlink" title="Install with"></a>Install with</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">clone</span> <span class="title">--recursive</span> https://github.com/sorin-ionescu/prezto.git <span class="string">"$&#123;ZDOTDIR:-$HOME&#125;/.zprezto"</span></div></pre></td></tr></table></figure>
<h3 id="Create-a-zsh-config-with-the-files-from-prezto"><a href="#Create-a-zsh-config-with-the-files-from-prezto" class="headerlink" title="Create a zsh config with the files from prezto"></a>Create a zsh config with the files from prezto</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">setopt</span> EXTENDED_GLOB</div><div class="line"><span class="keyword">for</span> rcfile <span class="keyword">in</span> <span class="string">"<span class="variable">$&#123;ZDOTDIR:-$HOME&#125;</span>"</span>/.zprezto/runcoms/^README.md(.N); <span class="keyword">do</span></div><div class="line">  ln <span class="_">-s</span> <span class="string">"<span class="variable">$rcfile</span>"</span> <span class="string">"<span class="variable">$&#123;ZDOTDIR:-$HOME&#125;</span>/.<span class="variable">$&#123;rcfile:t&#125;</span>"</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<h3 id="Make-Zsh-the-default-shell"><a href="#Make-Zsh-the-default-shell" class="headerlink" title="Make Zsh the default shell"></a>Make Zsh the default shell</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ chsh <span class="_">-s</span> $(<span class="built_in">which</span> zsh)</div></pre></td></tr></table></figure>
<p>If you are using iTerm, go to</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Preferences &gt; Profiles &gt; <span class="keyword">General</span> &gt; Command</div></pre></td></tr></table></figure>
<p>and put <code>/bin/zsh --login</code> as the <code>Command</code> (instead of <code>Login Shell</code>)</p>
<h2 id="Improve-the-default-theme"><a href="#Improve-the-default-theme" class="headerlink" title="Improve the default theme"></a>Improve the default theme</h2><h3 id="Install-the-Menlo-Font"><a href="#Install-the-Menlo-Font" class="headerlink" title="Install the Menlo Font"></a>Install the Menlo Font</h3><p>Download the <a href="https://gist.github.com/qrush/1595572/raw/6c453ddc959b93895ffbf4fd904e2ba60256c904/Menlo-Powerline.otf" target="_blank" rel="external">Menlo font</a></p>
<p>Double click the font file to install it.</p>
<p>Set it as the default font in iTerm by going to </p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Preferences &gt; Profiles &gt; <span class="keyword">Text</span> &gt; Change <span class="keyword">Font</span></div></pre></td></tr></table></figure>
<p>Use 14pt for the font size.</p>
<h3 id="Set-the-theme-to-Solarized-Dark"><a href="#Set-the-theme-to-Solarized-Dark" class="headerlink" title="Set the theme to Solarized Dark"></a>Set the theme to Solarized Dark</h3><p>In iTerm, go to <code>Preferences &gt; Profiles &gt; Color</code> and in the Color Presets Dropdown, choose <code>Solarized Dark</code>.</p>
<h3 id="Change-the-prezto-theme-to-powerline"><a href="#Change-the-prezto-theme-to-powerline" class="headerlink" title="Change the prezto theme to powerline"></a>Change the prezto theme to powerline</h3><p>First go to your zsh command line, type <code>prompt powerline</code> and doublecheck that everything displays properly. This command is to preview the theme.</p>
<p>Then set the powerline theme as default in <code>.zpreztorc</code>:</p>
<p>Look for the line that looks like <code>zstyle &#39;:prezto:module:prompt&#39; theme</code> and replace the current theme with <code>powerline</code></p>
<p>You should end up with:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">zstyle</span> <span class="string">':prezto:module:prompt'</span> theme <span class="string">'powerline'</span></div></pre></td></tr></table></figure>
<p>Now, try restarting iTerm and doublecheck that powerline is the default theme</p>
<h3 id="Word-jump"><a href="#Word-jump" class="headerlink" title="Word jump"></a>Word jump</h3><p>Let’s finish with one more tweak, word jump with <code>alt + →</code> and <code>alt + ←</code> like in a normal editor.</p>
<p>In iTerm, go to <code>Preferences &gt; Profiles &gt; Keys</code> and Add the following</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">⌥ →</div><div class="line">Send Escape Sequence</div><div class="line">f</div></pre></td></tr></table></figure>
<p>and </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">⌥ ←</div><div class="line">Send Escape Sequence</div><div class="line">b</div></pre></td></tr></table></figure>
<h3 id="Word-Delete"><a href="#Word-Delete" class="headerlink" title="Word Delete"></a>Word Delete</h3><p>Do the same thing to allow the deletion of a word on <code>alt + backspace</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">⌥⌫</div><div class="line">Send Hex Code</div><div class="line">0x17</div></pre></td></tr></table></figure>
<p>That’s it, you are good to go. Let me know if you enjoy it and if you have awesome tweaks I should add to this list.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Follow this simple steps to setup zsh and prezto on Mac OS X (El Capitan) and you command line will look like:&lt;br&gt;&lt;br /&gt;&lt;br&gt;&lt;img src=&quot;/img/prezto-powerline-mac-os-x.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Tools" scheme="http://www.codeblocq.com/tags/Tools/"/>
    
      <category term="zsh" scheme="http://www.codeblocq.com/tags/zsh/"/>
    
      <category term="Prezto" scheme="http://www.codeblocq.com/tags/Prezto/"/>
    
  </entry>
  
  <entry>
    <title>Create patch from commit with git</title>
    <link href="http://www.codeblocq.com/2016/09/Create-patch-from-commit-with-git/"/>
    <id>http://www.codeblocq.com/2016/09/Create-patch-from-commit-with-git/</id>
    <published>2016-09-11T01:21:24.000Z</published>
    <updated>2016-09-11T03:21:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>Learn how to create a git patch from a previous commit.<br><a id="more"></a></p>
<h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">## Create patch <span class="keyword">from</span> commit a12a06c</div><div class="line">$ git show a12a06c &gt; temp.patch</div><div class="line"></div><div class="line">## Apply patch</div><div class="line">$ git apply temp.patch</div></pre></td></tr></table></figure>
<h2 id="Long-story"><a href="#Long-story" class="headerlink" title="Long story"></a>Long story</h2><p>Let’s look at the following scenario:</p>
<p>You are working on a <code>feature1</code> branch and you realise your last commit should not have been committed here. You could stash it but you are not sure where you are going to need to it again; so you decide yo create a <a href="https://git-scm.com/docs/git-format-patch" target="_blank" rel="external">patch</a> with it.</p>
<h3 id="Method-1-git-reset-git-diff-gt-patch"><a href="#Method-1-git-reset-git-diff-gt-patch" class="headerlink" title="Method 1: git reset + git diff &gt; patch"></a>Method 1: git reset + git diff &gt; patch</h3><p>Since that commit was our last commit, we can rewind our history 1 step and create a patch from the current <code>diff</code>.</p>
<ul>
<li>Rewind one step and keep changes staged</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">reset</span> <span class="comment">--soft HEAD~1</span></div></pre></td></tr></table></figure>
<p>Using <code>--soft</code> will <a href="/2016/09/Undo-last-commit-in-git/">keep our changes staged</a>.</p>
<ul>
<li>Create the patch</li>
</ul>
<p>Create the patch from your stages changes by using</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">diff </span>--<span class="keyword">cached </span>&gt; patch1.patch</div></pre></td></tr></table></figure>
<p>And you have all your changes in that patch</p>
<h3 id="Method-2-Create-patch-from-commit-directly"><a href="#Method-2-Create-patch-from-commit-directly" class="headerlink" title="Method 2: Create patch from commit directly"></a>Method 2: Create patch from commit directly</h3><p>In some cases, you want to create a patch from a commit that is not the previous one. You also might not be interested in rewinding your git history.</p>
<p>Here is a one liner that can help you create a patch from any commit in your history.</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git show a12a06c &gt; patch2.patch</div></pre></td></tr></table></figure>
<p>where <code>a12a06c</code> is the commit you want to create a patch from.</p>
<h3 id="Apply-the-patch"><a href="#Apply-the-patch" class="headerlink" title="Apply the patch"></a>Apply the patch</h3><p>Reminder: To apply your patch somewhere else or later on.</p>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">apply</span> patch1.patch</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Learn how to create a git patch from a previous commit.&lt;br&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://www.codeblocq.com/tags/Git/"/>
    
      <category term="Patch" scheme="http://www.codeblocq.com/tags/Patch/"/>
    
  </entry>
  
</feed>

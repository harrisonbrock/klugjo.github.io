<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Klughertz Jonathan]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://klugjo.github.io/"/>
  <updated>2016-02-11T06:38:26.000Z</updated>
  <id>http://klugjo.github.io/</id>
  
  <author>
    <name><![CDATA[Klughertz Jonathan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Stash your changes before switching branch]]></title>
    <link href="http://klugjo.github.io/2016/02/Stash-your-changes-before-switching-branch/"/>
    <id>http://klugjo.github.io/2016/02/Stash-your-changes-before-switching-branch/</id>
    <published>2016-02-10T07:45:39.000Z</published>
    <updated>2016-02-11T06:38:26.000Z</updated>
    <content type="html"><![CDATA[<p>Common everyday scenario: you are working on your feature branch fixing a bug and your boss asks you for a build. You need to switch back to your main dev branch. Before that happens, you have to take care of all your current changes. You can either commit if you are ready for it, or maybe you have only modified a few lines and can simply revert your changes. </p>
<p>Well there is a better solution: git stash.<br><a id="more"></a> </p>
<h2 id="Setting_up_the_stage">Setting up the stage</h2><p>We have 2 files: <code>file1.txt</code> and <code>file2.txt</code> and 2 branches, <code>master</code> and <code>new-branch</code>.</p>
<p>If you want to follow along here is the script</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir testgitstash <span class="comment"># create directory</span></span><br><span class="line"><span class="built_in">cd</span> testgitstash <span class="comment"># change to that directory</span></span><br><span class="line">git init <span class="comment"># init git repo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">test</span>1 &gt; file1.txt <span class="comment"># create 2 files</span></span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">test</span>2 &gt; file2.txt</span><br><span class="line">git add . <span class="comment"># add both files</span></span><br><span class="line">git commit -m <span class="string">"Initial commit"</span> <span class="comment"># commit both files</span></span><br><span class="line">git checkout -b new-branch <span class="comment"># create a new branch and switch to that branch</span></span><br></pre></td></tr></table></figure>
<p>On top of that you have some pending changes on new-branch</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> change &gt; file1.txt <span class="comment"># change file1</span></span><br><span class="line">git commit -am <span class="string">"update"</span> <span class="comment"># commit change</span></span><br><span class="line"><span class="built_in">echo</span> change2 &gt; file1.txt <span class="comment"># change file1 again</span></span><br></pre></td></tr></table></figure>
<h2 id="The_problem">The problem</h2><p>If you want to switch back to <code>master</code>, you will get an error message:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">error: Your <span class="built_in">local</span> changes to the following files would be overwritten by checkout: </span><br><span class="line">    file1.txt</span><br><span class="line">Please, commit your changes or stash them before you can switch branches.</span><br><span class="line"></span><br><span class="line">Aborting</span><br></pre></td></tr></table></figure>
<p>Git does not allow you to switch back to <code>master</code> because you have changes on <code>new-branch</code>.</p>
<h2 id="One_solution:_git_stash">One solution: <code>git stash</code></h2><h3 id="Stash_the_changes">Stash the changes</h3><p>Instead of committing your changes or reverting, you can stash them with:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash save <span class="string">"changes on new-branch"</span></span><br></pre></td></tr></table></figure>
<h3 id="Switch_branch">Switch branch</h3><p>You can now switch back to <code>master</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br></pre></td></tr></table></figure>
<p>Do whatever changes you want on master, and when ready, go back to <code>new-branch</code>.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout new-branch</span><br></pre></td></tr></table></figure>
<h3 id="Unstash_the_changes">Unstash the changes</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure>
<p>Your changes will be put back and you can continue what you were doing initially.</p>
<h2 id="Notes">Notes</h2><h3 id="-_Your_changes_are_stashed_on_a_stack">- Your changes are stashed on a stack</h3><p>You can stack several changes and check the current stash stack using:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash list</span><br></pre></td></tr></table></figure>
<p>You can also unstash a specific stash by using</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash pop <span class="string">"stash@&#123;1&#125;"</span></span><br></pre></td></tr></table></figure>
<h3 id="-_Git_stash_pop_can_be_split_in_two">- Git stash pop can be split in two</h3><p>Git stash pop is the combination of two other commands:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash apply</span><br></pre></td></tr></table></figure>
<p>which applies the last stash and:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash drop</span><br></pre></td></tr></table></figure>
<p>which destroys the last stash</p>
<p><br><br>Hope this helped, there would be much more to say on this suject but I hope this will give you a place to start :)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Common everyday scenario: you are working on your feature branch fixing a bug and your boss asks you for a build. You need to switch back to your main dev branch. Before that happens, you have to take care of all your current changes. You can either commit if you are ready for it, or maybe you have only modified a few lines and can simply revert your changes. </p>
<p>Well there is a better solution: git stash.<br>]]>
    
    </summary>
    
      <category term="Bash" scheme="http://klugjo.github.io/tags/Bash/"/>
    
      <category term="Git" scheme="http://klugjo.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git add]]></title>
    <link href="http://klugjo.github.io/2016/02/git-add/"/>
    <id>http://klugjo.github.io/2016/02/git-add/</id>
    <published>2016-02-09T07:48:25.000Z</published>
    <updated>2016-02-11T06:38:26.000Z</updated>
    <content type="html"><![CDATA[<p>This article is a description of all the basic git add commands.</p>
<a id="more"></a> 
<h2 id="Understanding">Understanding</h2><p>Git uses a notion of changes staged for the next commit where you set which change you wish to include in the next <code>git commit</code> command. This includes new files, deleted files and modifications.</p>
<p>For those in a hurry, here is the conclusion of this article:</p>
<table>
<thead>
<tr>
<th>command</th>
<th style="text-align:center">New Files</th>
<th style="text-align:center">Modified Files</th>
<th style="text-align:center">Deleted Files </th>
</tr>
</thead>
<tbody>
<tr>
<td><code>git add -A</code></td>
<td style="text-align:center">V</td>
<td style="text-align:center">V</td>
<td style="text-align:center">V</td>
</tr>
<tr>
<td><code>git add .</code></td>
<td style="text-align:center">V</td>
<td style="text-align:center">V</td>
<td style="text-align:center">V</td>
</tr>
<tr>
<td><code>git add -u</code></td>
<td style="text-align:center"><span style="color: red;">X</span></td>
<td style="text-align:center">V</td>
<td style="text-align:center">V</td>
</tr>
<tr>
<td><code>git add --ignore-removal</code></td>
<td style="text-align:center">V</td>
<td style="text-align:center">V</td>
<td style="text-align:center"><span style="color: red;">X</span></td>
</tr>
</tbody>
</table>
<p>Let’s start by initializing a new git repository:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line"><span class="comment"># Initialized empty Git repository in /.git/</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="built_in">test</span>1 &gt; file-delete.txt</span><br><span class="line">$ <span class="built_in">echo</span> <span class="built_in">test</span>2 &gt; file-modify.txt</span><br></pre></td></tr></table></figure>
<h2 id="Add_by_filename">Add by filename</h2><p>Use <code>git add [&lt;pathspec&gt;…​]</code> to add file by their name.</p>
<p>If we want to add our two files created above:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add file1.txt file2.txt</span><br></pre></td></tr></table></figure>
<p>It is also possible to use wildcards</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add *.txt</span><br></pre></td></tr></table></figure>
<p>After any of these two commands, both our files will be staged for the next commit. Let’s do our first commit before we continue.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">"Initial commit"</span></span><br></pre></td></tr></table></figure>
<h2 id="Stage_all_changes">Stage all changes</h2><p>If you wish to add deletions, updates and file creations, you can use any of these 3 commands:</p>
<ul>
<li><code>git add -A</code></li>
<li><code>git add .</code></li>
<li><code>git add --all</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> change &gt; file-modify.txt <span class="comment"># modifiy a file</span></span><br><span class="line">$ rm file-delete.txt <span class="comment"># delete a file</span></span><br><span class="line">$ <span class="built_in">echo</span> new &gt; file-new.txt <span class="comment"># create a new file</span></span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line"><span class="comment"># deleted:    file-delete.txt</span></span><br><span class="line"><span class="comment"># modified:   file-modify.txt</span></span><br><span class="line"><span class="comment"># untracked:  file-new.txt</span></span><br></pre></td></tr></table></figure>
<p>At this point, any of the command above will stage all these files:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git add -A <span class="comment"># add all files to the next commit</span></span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line"><span class="comment"># changes to be committed:</span></span><br><span class="line"><span class="comment"># deleted:    file-delete.txt</span></span><br><span class="line"><span class="comment"># modified:   file-modify.txt</span></span><br><span class="line"><span class="comment"># new file:   file-new.txt</span></span><br></pre></td></tr></table></figure>
<p>At this point, let’s do a <code>git reset</code> to revert the staged changes and demonstrate the other commands.</p>
<h2 id="Stage_modified_and_deleted_files_only">Stage modified and deleted files only</h2><p>If you don’t want to add the newly created files, but only the modifications and deletions, use any of the following:</p>
<ul>
<li><code>git add -u</code></li>
<li><code>git add -update</code></li>
</ul>
<p>Example:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git add -u</span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line"><span class="comment"># changes to be committed:</span></span><br><span class="line"><span class="comment"># deleted:    file-delete.txt</span></span><br><span class="line"><span class="comment"># modified:   file-modify.txt</span></span><br><span class="line"><span class="comment"># untracked files:</span></span><br><span class="line"><span class="comment"># file-new.txt</span></span><br></pre></td></tr></table></figure>
<p>Once again, a quick <code>git reset</code> will reset staged changes and allow us to look at the last option</p>
<h2 id="Stage_modified_and_new_files_only">Stage modified and new files only</h2><p>If you want to stage everything except the files that have been deleted, use:</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">add</span> <span class="comment">--ignore-removal</span></span><br></pre></td></tr></table></figure>
<p>Example:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git add --ignore-removal</span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line"><span class="comment"># changes to be committed:</span></span><br><span class="line"><span class="comment"># modified:   file-modify.txt</span></span><br><span class="line"><span class="comment"># new file:   file-new.txt </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Changed but not updated:</span></span><br><span class="line"><span class="comment"># deleted:    file-delete.txt</span></span><br></pre></td></tr></table></figure>
<h2 id="Try_it_yourself">Try it yourself</h2><p>Here is the full script if you want to see it with your own eyes :)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">test</span>1 &gt; file-delete.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">test</span>2 &gt; file-modify.txt</span><br><span class="line">git add *.txt</span><br><span class="line">git commit -m <span class="string">"Initial commit"</span></span><br><span class="line"><span class="built_in">echo</span> change &gt; file-modify.txt </span><br><span class="line">rm file-delete.txt</span><br><span class="line"><span class="built_in">echo</span> new &gt; file-new.txt</span><br><span class="line">git add -A</span><br><span class="line">git status</span><br><span class="line">git reset</span><br><span class="line">git add -u</span><br><span class="line">git status</span><br><span class="line">git reset</span><br><span class="line">git add --ignore-removal</span><br><span class="line">git status</span><br></pre></td></tr></table></figure>
<p>Hope this gives you a clearer view of what is going on !</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This article is a description of all the basic git add commands.</p>]]>
    
    </summary>
    
      <category term="Bash" scheme="http://klugjo.github.io/tags/Bash/"/>
    
      <category term="Git" scheme="http://klugjo.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Notes on Never Eat Alone by Keith Ferrazzi]]></title>
    <link href="http://klugjo.github.io/2016/02/Notes-on-Never-Eat-Alone-by-Keith-Ferrazzi/"/>
    <id>http://klugjo.github.io/2016/02/Notes-on-Never-Eat-Alone-by-Keith-Ferrazzi/</id>
    <published>2016-02-09T07:26:18.000Z</published>
    <updated>2016-02-11T06:38:26.000Z</updated>
    <content type="html"><![CDATA[<h2 id="First_impressions">First impressions</h2><p>I have just finished <a href="http://keithferrazzi.com/products/never-eat-alone" target="_blank" rel="external">Never Eat Alone</a>. It is a book about building a supportive network of business connections that will propel you to the highest spheres of the business world.<br><a id="more"></a> </p>
<p>The author goes through the story of his life and how he networked his way to the top. From his humble lower class beginnings, through golf sessions, wine dinners and republican rallies to being a top consultant and CEO. </p>
<p>I have gone through the entire book and it is packed with excellent advices, some of which I have detailed below. It is hard not to appreciate the honesty, authenticity and candor of the author. It is an excellent reminder that in life or business you can’t make it alone. As a software developer, it is often too easy to think that your skills are enough to get ahead and this book serves as a powerful reminder that this is certainly not the case.</p>
<p>I had one minor problem with the book though, it assumes that you are an extrovert looking to smooth talk your way up the American Dream. Probably Appealing to some, I often had difficulties identifying to the author’s behavior and real life situations.</p>
<h2 id="Notes_and_Takeaways">Notes and Takeaways</h2><ul>
<li>You can’t make it alone. People will always be the foundation of any human enterprise. Lone wolfs will inevitably crumble under their own weight.</li>
<li>Fearing rejection is normal, just ignore it and power through.</li>
<li>Not everyone is born with excellent communication skills but these can be learnt like any other skill.</li>
<li>Always be generous and loyal. When meeting someone, think: how can I help and not how can this person help me.</li>
<li>Be patient and meet as many people as you can. Build your network way before you need it.</li>
<li>Ping people constantly to keep all your hard earned relatioship alive. But once again remain interesting and authentic.</li>
<li>Set your goals straight and have a clear message, this will make people want to have you in their network and will help you hold intelligent conversations. Be your own brand and market yourself effectively.</li>
<li>The pillars of your network should be super connectors, mentors and mentees.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="First_impressions">First impressions</h2><p>I have just finished <a href="http://keithferrazzi.com/products/never-eat-alone">Never Eat Alone</a>. It is a book about building a supportive network of business connections that will propel you to the highest spheres of the business world.<br>]]>
    
    </summary>
    
      <category term="Books" scheme="http://klugjo.github.io/tags/Books/"/>
    
      <category term="General Business" scheme="http://klugjo.github.io/tags/General-Business/"/>
    
      <category term="Networking" scheme="http://klugjo.github.io/tags/Networking/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Node Auto Completion in WebStorm on OSX]]></title>
    <link href="http://klugjo.github.io/2016/02/Node-auto-completion-in-WebStorm-on-OSX/"/>
    <id>http://klugjo.github.io/2016/02/Node-auto-completion-in-WebStorm-on-OSX/</id>
    <published>2016-02-03T01:25:55.000Z</published>
    <updated>2016-02-11T06:38:26.000Z</updated>
    <content type="html"><![CDATA[<p>Quick article on how to add auto completion in Webstorm 11 for all the core Node libraries.<br><a id="more"></a> <br></p>
<h2 id="The_problem">The problem</h2><p>Without Node coding assistance, you will get warnings on all the Node.js core functions like <code>require</code> or <code>__dirname</code>.</p>
<p><img src="https://s3.amazonaws.com/klugjo.github.io/node-code-completion-missing-webstorm.png" alt="Node Code Completion missing example" title="node code completion missing in webstorm"></p>
<p><br></p>
<h2 id="The_solution">The solution</h2><p>In webstorm 11 you need to enable the Node.js assistance:</p>
<p>Got to <strong>Preferences &gt; Languages &amp; Frameworks &gt; Node.js and npm</strong> and click <strong>Enable</strong> under Code Assistance.</p>
<p><img src="https://s3.amazonaws.com/klugjo.github.io/enable-core-node-js-code-assistance-webstorm.png" alt="Enable Node.js code assistance" title="enable the Node.js assistance"></p>
<p>Go back to your code and the errors will be gone !<br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Quick article on how to add auto completion in Webstorm 11 for all the core Node libraries.<br>]]>
    
    </summary>
    
      <category term="Node" scheme="http://klugjo.github.io/tags/Node/"/>
    
      <category term="OS X" scheme="http://klugjo.github.io/tags/OS-X/"/>
    
      <category term="WebStorm" scheme="http://klugjo.github.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Debug hexo blog generation in webstorm]]></title>
    <link href="http://klugjo.github.io/2016/02/Debug-hexo-blog-generation-in-webstorm/"/>
    <id>http://klugjo.github.io/2016/02/Debug-hexo-blog-generation-in-webstorm/</id>
    <published>2016-02-02T06:44:51.000Z</published>
    <updated>2016-02-11T06:38:26.000Z</updated>
    <content type="html"><![CDATA[<p>In this article I will detail how I setup a debug configuration in webstorm in order to debug hexo. The information contained here can easily be applied to debugging any node app that is executed with a command lined command (<code>hexo generate</code>) instead of the more standard <code>node index.js</code>.<br><a id="more"></a><br><br></p>
<h2 id="The_problem">The problem</h2><p>When setting up a <a href="https://www.jetbrains.com/webstorm/help/run-debug-configuration-node-js.html" target="_blank" rel="external">node debug configuration in Webstorm</a> you have to specify a file path. Since we are trying to debug <code>hexo generate</code>, we don’t have any JavaScript file to specify.</p>
<p><br></p>
<h2 id="The_trick">The trick</h2><p>The trick here is to specify the path to the hexo executable located in <code>node_modules/.bin/hexo</code>.</p>
<p>When adding your configuration, use the following:</p>
<table>
<thead>
<tr>
<th>Field</th>
<th>Value</th>
<th>Example </th>
</tr>
</thead>
<tbody>
<tr>
<td>Node Interpreter</td>
<td>Path to Node</td>
<td>/usr/local/bin/node (on OSX)</td>
</tr>
<tr>
<td>Node Parameters</td>
<td>Node args to specify debug mode</td>
<td>--debug-brk</td>
</tr>
<tr>
<td>Working Directory</td>
<td>Project Directory</td>
<td>path/to/project</td>
</tr>
<tr>
<td>JavaScript File</td>
<td>Path to hexo executable</td>
<td>node_modules/.bin/hexo</td>
</tr>
<tr>
<td>Application Parameters</td>
<td>CLI command args</td>
<td>generate</td>
</tr>
<tr>
<td>Environment Variables</td>
<td>process.env.ENV_VARIABLE</td>
<td><em>empty</em></td>
</tr>
</tbody>
</table>
<p>Once you are done, set up a breakpoint somewhere and hit the debug button.</p>
<p>Thanks to this <a href="http://stackoverflow.com/questions/30942953/how-can-i-debug-a-node-app-that-is-started-via-the-command-line-cli-like-forev" target="_blank" rel="external">Stack Overflow Post</a> for pointing me in the right direction.<br>You can refer to it if you wish to use <code>node-inspector</code> instead of Webstorm to do your debugging.<br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>In this article I will detail how I setup a debug configuration in webstorm in order to debug hexo. The information contained here can easily be applied to debugging any node app that is executed with a command lined command (<code>hexo generate</code>) instead of the more standard <code>node index.js</code>.<br>]]>
    
    </summary>
    
      <category term="Debugging" scheme="http://klugjo.github.io/tags/Debugging/"/>
    
      <category term="Hexo" scheme="http://klugjo.github.io/tags/Hexo/"/>
    
      <category term="WebStorm" scheme="http://klugjo.github.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Display an animated counter on your webpage]]></title>
    <link href="http://klugjo.github.io/2016/02/Display-an-animated-counter-on-your-webpage/"/>
    <id>http://klugjo.github.io/2016/02/Display-an-animated-counter-on-your-webpage/</id>
    <published>2016-02-01T06:50:35.000Z</published>
    <updated>2016-02-11T06:38:26.000Z</updated>
    <content type="html"><![CDATA[<p>I just discovered <a href="http://github.hubspot.com/odometer/docs/welcome/" target="_blank" rel="external">Odometer</a> which is a cool open source library to transition numbers. It comes with a set of <a href="http://github.hubspot.com/odometer/api/themes/" target="_blank" rel="external">css themes</a>.</p>
<a id="more"></a> 
<h2 id="Example">Example</h2><p><br></p>
<script type="application/javascript">

    function updateNumbers() {
        setInterval(function(){
            var val = Math.floor(Math.random()*1000);
            val = val < 100 ? (val + 100) : val;
            document.getElementById('odometer').innerHTML = val;
        }, 4000);
    }

    updateNumbers();
</script>

<p><div id="odometer" class="odometer" style="font-size: 25px">321</div><br><br></p>
<h2 id="Usage">Usage</h2><h3 id="Install">Install</h3><p>Go to the <a href="http://github.hubspot.com/odometer/" target="_blank" rel="external">library’s page</a> and download a zip file with the library or fire up bower:</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">bower </span>install odometer</span><br></pre></td></tr></table></figure>
<p>Include the js library, for example <code>odometer.min.js</code> .<br>Include the css for the theme of your choice, for example <code>odometer-theme-car.css</code>.</p>
<p><br></p>
<h3 id="Initialisation">Initialisation</h3><p>Create an element with the CSS class <code>.odometer</code> and the library will initialise automatically.</p>
<p>Check out <a href="http://github.hubspot.com/odometer/" target="_blank" rel="external">the documentation</a> if you need more configuration options.</p>
<p><br></p>
<h3 id="Update_the_value">Update the value</h3><p>You can update the value by setting the element’s <code>innerHTML</code>, <code>innerText</code>, or by using jQuery’s <code>.text()</code> or <code>.html()</code>.<br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I just discovered <a href="http://github.hubspot.com/odometer/docs/welcome/">Odometer</a> which is a cool open source library to transition numbers. It comes with a set of <a href="http://github.hubspot.com/odometer/api/themes/">css themes</a>.</p>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://klugjo.github.io/tags/CSS/"/>
    
      <category term="HTML" scheme="http://klugjo.github.io/tags/HTML/"/>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Search through history in OSX terminal]]></title>
    <link href="http://klugjo.github.io/2016/01/Search-through-history-in-OSX-terminal/"/>
    <id>http://klugjo.github.io/2016/01/Search-through-history-in-OSX-terminal/</id>
    <published>2016-01-29T06:36:50.000Z</published>
    <updated>2016-02-11T06:38:26.000Z</updated>
    <content type="html"><![CDATA[<p>Quick article on how to search the OSX terminal history</p>
<a id="more"></a> 
<p><br></p>
<h2 id="Interactive_Search">Interactive Search</h2><h3 id="Start_search">Start search</h3><p>Use <code>ctrl</code>+<code>r</code> to start the history search and start typing your search term (in my example <code>git</code>)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(reverse-i-search)`git<span class="string">': git push origin develop</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>(reverse-i-search)</code> indicates that the search mode is activated</li>
<li><code>git</code> is the search term</li>
<li><code>git push origin develop</code> is the result<br><br></li>
</ul>
<h3 id="Circle_through_results">Circle through results</h3><p>If the first result is not the one you are looking for, continuously press <code>ctrl</code>+<code>r</code><br><br></p>
<h3 id="Execute_the_command">Execute the command</h3><p>Press <code>Enter</code> to execute the command</p>
<p>or</p>
<p>Press <code>right arrow</code> to insert the command in the current line</p>
<p><br></p>
<h2 id="Display_search_history">Display search history</h2><p>In some cases, you might want to display an history of commands containing your search term</p>
<p>You can do this with the following command</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">history</span> | <span class="keyword">grep</span> <span class="string">'git'</span></span><br></pre></td></tr></table></figure>
<p>Will display of all the previous commands that contain <code>git</code>.</p>
<p><strong>Note:</strong></p>
<p>The <code>history</code> command displays the full history of executed commands. In this example, we are piping the result into a grep command in order to filter the results we want.<br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Quick article on how to search the OSX terminal history</p>]]>
    
    </summary>
    
      <category term="Bash" scheme="http://klugjo.github.io/tags/Bash/"/>
    
      <category term="OSX" scheme="http://klugjo.github.io/tags/OSX/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Create a Bash Shell script to download a site's favicon with HTTPie]]></title>
    <link href="http://klugjo.github.io/2016/01/Create-a-Bash-Shell-script-to-download-a-site-s-favicon-with-HTTPie/"/>
    <id>http://klugjo.github.io/2016/01/Create-a-Bash-Shell-script-to-download-a-site-s-favicon-with-HTTPie/</id>
    <published>2016-01-26T03:48:08.000Z</published>
    <updated>2016-02-11T06:38:26.000Z</updated>
    <content type="html"><![CDATA[<p>In this quick tutorial, we will build a <a target="_blank" href="/tags/Bash/">Bash</a> command that downloads a site’s favicon using the <a target="_blank" href="/2016/01/HTTPie-a-good-replacement-for-cURL/">HTTPie library</a>.</p>
<a id="more"></a> 
<p><br></p>
<h2 id="1_-_Download_a_page’s_HTML_Content">1 - Download a page’s HTML Content</h2><p>For this tutorial, I will use <a href="http://www.fipradio.fr/player" target="_blank" rel="external">http://www.fipradio.fr/player</a> as our test website – as it turns out, it is also my favorite radio.</p>
<p>If you have never looked at HTTPie, have a quick look at my <a target="_blank" href="/2016/01/HTTPie-a-good-replacement-for-cURL/">introduction to the library</a>.</p>
<p>Downloading the HTML is the easiest part of this tutorial, using HTTPie:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ http http://www.fipradio.fr/player</span><br></pre></td></tr></table></figure>
<p>The full HTML will be printed out to the console.</p>
<p><br></p>
<h2 id="2_-_Extract_the_favicon’s_URL">2 - Extract the favicon’s URL</h2><p>I am by no means an expert in bash and regexp but here is a solution that does the job. Inspired by <a href="http://www.unix.com/shell-programming-and-scripting/124833-extract-urls-html-code-using-sed.html" target="_blank" rel="external">this post</a> and <a href="http://stackoverflow.com/questions/9899760/use-sed-and-wget-to-retrieve-links-only" target="_blank" rel="external">this one</a>.</p>
<p><br></p>
<h3 id="Grep_the_favicon’s_tag">Grep the favicon’s tag</h3><p>Here is the code:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ grep -o <span class="string">'href="http[^"]*ico"'</span></span><br></pre></td></tr></table></figure>
<p><code>-o</code> will retain only the matching part of the line instead of the whole line<br><code>&#39;href=&quot;http[^&quot;]*ico&quot;&#39;</code> will match strings like <em>href=”http:[..]ico”</em><br><br><br><u>Let’s pipe the HTML to the grep expression:</u></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ http http://www.fipradio.fr/player | grep -o <span class="string">'href="http[^"]*ico"'</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">href=<span class="string">"http://www.fipradio.fr/sites/all/themes/custom/fip/favicon.ico"</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<h3 id="Sed_the_URL">Sed the URL</h3><p>Use the following Sed function to extract the URL of the favicon:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">'s/href="\(.*\)"/\1/'</span></span><br></pre></td></tr></table></figure>
<p><code>s/</code> means we want to save only what we match<br><code>href=&quot;\(.*\)&quot;</code> is what we want to match<br><code>/\1/</code> refers to the characters captured by the escaped parentheses.<br><br><br><u>After piping it up:</u></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ http http://www.fipradio.fr/player | grep -o <span class="string">'href="http[^"]*ico"'</span> | sed <span class="string">'s/href="\(.*\)"/\1/'</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.fipradio.fr/sites/all/themes/custom/fip/favicon.ico</span><br></pre></td></tr></table></figure>
<p><br></p>
<h3 id="Notes">Notes</h3><ul>
<li>There will be quite a few cases where this script won’t work. For example for websites served over https or when there is querystring after the .ico to avoid caching issues.</li>
<li>I wouldn’t have been able to come up with the regex out of the blue. I used quite a few google searches before finding a solution that I liked. This tutorial is not meant to be a detailed explanation about grep, sed or regex.</li>
</ul>
<p><br></p>
<h2 id="3_-_Download_the_icons">3 - Download the icons</h2><p>To <a href="https://github.com/jkbrzt/httpie#download-mode" target="_blank" rel="external">download a file with HTTPie</a>, use:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ http <span class="operator">-d</span> url</span><br></pre></td></tr></table></figure>
<p>We will use a while loop with read to iterate through the list of favicon URLs:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ &#123; <span class="keyword">while</span> <span class="built_in">read</span> url ; <span class="keyword">do</span> http <span class="operator">-d</span> <span class="variable">$url</span> ; <span class="keyword">done</span> ; &#125;</span><br></pre></td></tr></table></figure>
<p>And here is the final command:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ http http://www.fipradio.fr/player | grep -o <span class="string">'href="http[^"]*ico"'</span> | sed <span class="string">'s/href="\(.*\)"/\1/'</span> | &#123; <span class="keyword">while</span> <span class="built_in">read</span> url ; <span class="keyword">do</span> http <span class="operator">-d</span> <span class="variable">$url</span> ; <span class="keyword">done</span> ; &#125;</span><br></pre></td></tr></table></figure>
<p>Press enter and you will see a progress bar for the favicon.ico download.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>In this quick tutorial, we will build a <a target="_blank" href="/tags/Bash/">Bash</a> command that downloads a site’s favicon using the <a target="_blank" href="/2016/01/HTTPie-a-good-replacement-for-cURL/">HTTPie library</a>.</p>]]>
    
    </summary>
    
      <category term="Bash" scheme="http://klugjo.github.io/tags/Bash/"/>
    
      <category term="Favicon" scheme="http://klugjo.github.io/tags/Favicon/"/>
    
      <category term="HTTPie" scheme="http://klugjo.github.io/tags/HTTPie/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTTPie, a good replacement for cURL]]></title>
    <link href="http://klugjo.github.io/2016/01/HTTPie-a-good-replacement-for-cURL/"/>
    <id>http://klugjo.github.io/2016/01/HTTPie-a-good-replacement-for-cURL/</id>
    <published>2016-01-25T07:47:17.000Z</published>
    <updated>2016-02-11T06:38:26.000Z</updated>
    <content type="html"><![CDATA[<p>If you find <a href="http://curl.haxx.se/docs/manpage.html" target="_blank" rel="external">cURL’s syntax</a> a bit too dry for your liking, you could give <a href="https://github.com/jkbrzt/httpie" target="_blank" rel="external">HTTPie</a> a try. In this article I will go through the basics of making HTTP requests to a REST API using HTTPie.<br><a id="more"></a><br><br></p>
<h2 id="Install_HTTPie">Install HTTPie</h2><p>I am on OSX and with brew, installation is a breeze.</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>install httpie</span><br></pre></td></tr></table></figure>
<p>If you are on a different system, check out the <a href="https://github.com/jkbrzt/httpie#installation" target="_blank" rel="external">installation options</a></p>
<p><br></p>
<h2 id="Talk_to_a_REST_API">Talk to a REST API</h2><p>For these examples, I will use the test API @ <a href="http://jsonplaceholder.typicode.com/" target="_blank" rel="external">http://jsonplaceholder.typicode.com/</a></p>
<p><br></p>
<h3 id="GET_Request">GET Request</h3><p>Use <code>http [url]</code> for a basic GET request </p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ http jsonplaceholder<span class="class">.typicode</span><span class="class">.com</span>/posts/<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>A nice feature of HTTPie is the possibility to use a <code>name==value</code> syntax for your <strong>querystring parameters</strong>.</p>
<p>Instead of the less readable:<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>http jsonplaceholder.typicode.com/comments?postId=<span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p>Use the cleaner:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ http jsonplaceholder<span class="class">.typicode</span><span class="class">.com</span>/comments postId==<span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p><br></p>
<h3 id="POST_Request">POST Request</h3><p>For other verbs than the default GET, use <code>http [verb] [url] [data]</code>.</p>
<p>The <code>[data]</code> part of the command uses a white space separated list of key value pairs as defined below:</p>
<ul>
<li><code>name=value</code> for strings or text.</li>
<li><code>name:=value</code> for raw JSON.</li>
<li><code>name=@file.txt</code> to include the content of a text files sent as a string.</li>
<li><code>name:=@data.json</code> to include a JSON file used as raw JSON.</li>
</ul>
<p><strong>Note on raw JSON:</strong></p>
<p>You need to use the raw JSON <code>name:=value</code> notation for booleans and numbers for example. Otherwise <code>bool=false</code> will be interpreted as <code>{bool: &#39;false&#39;}</code> instead of <code>{bool: false}</code>. Similarly, <code>id=10</code> would be interpreted as <code>{id: &#39;10&#39;}</code> instead of <code>{id: 10}</code>.</p>
<p><strong>Example</strong></p>
<p>With our test API, to create a new post, we need to send a POST request to <a href="http://jsonplaceholder.typicode.com/posts" target="_blank" rel="external">http://jsonplaceholder.typicode.com/posts</a>, with the following JSON data:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    title: <span class="string">'foo'</span>,</span><br><span class="line">    body: <span class="string">'bar'</span>,</span><br><span class="line">    userId: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The HTTPie request will be<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ http POST jsonplaceholder<span class="class">.typicode</span><span class="class">.com</span>/posts title=foo body=bar userId:=<span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p><br></p>
<h3 id="PUT_Request">PUT Request</h3><p>PUT Requests work the same way as POST Request:</p>
<p>A PUT Request to <a href="http://jsonplaceholder.typicode.com/posts/1" target="_blank" rel="external">http://jsonplaceholder.typicode.com/posts/1</a></p>
<p>With the data</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attribute">title</span>: <span class="string">'foo'</span>,</span><br><span class="line">    <span class="attribute">body</span>: <span class="string">'bar'</span>,</span><br><span class="line">    <span class="attribute">userId</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>becomes</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ http PUT jsonplaceholder.typicode.com<span class="regexp">/posts/</span><span class="number">1</span> <span class="string">id:</span>=<span class="number">1</span> title=foo body=bar <span class="string">userId:</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<h3 id="DELETE_Request">DELETE Request</h3><p>Our DELETE Request does not have any data sent:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ http DELETE jsonplaceholder<span class="class">.typicode</span><span class="class">.com</span>/posts/<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><br><br>Check out the <a href="https://github.com/jkbrzt/httpie#examples" target="_blank" rel="external">excellent documentation for more HTTPie examples</a>.<br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>If you find <a href="http://curl.haxx.se/docs/manpage.html">cURL’s syntax</a> a bit too dry for your liking, you could give <a href="https://github.com/jkbrzt/httpie">HTTPie</a> a try. In this article I will go through the basics of making HTTP requests to a REST API using HTTPie.<br>]]>
    
    </summary>
    
      <category term="Bash" scheme="http://klugjo.github.io/tags/Bash/"/>
    
      <category term="HTTPie" scheme="http://klugjo.github.io/tags/HTTPie/"/>
    
      <category term="REST" scheme="http://klugjo.github.io/tags/REST/"/>
    
      <category term="cURL" scheme="http://klugjo.github.io/tags/cURL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Notes on Zero to One by Peter Thiel]]></title>
    <link href="http://klugjo.github.io/2016/01/Notes-on-Zero-to-One-by-Peter-Thiel/"/>
    <id>http://klugjo.github.io/2016/01/Notes-on-Zero-to-One-by-Peter-Thiel/</id>
    <published>2016-01-22T08:31:58.000Z</published>
    <updated>2016-02-11T06:38:26.000Z</updated>
    <content type="html"><![CDATA[<h2 id="First_impressions">First impressions</h2><p>I have read my fair share of startup books and I just finished one more. <a href="https://en.wikipedia.org/wiki/Zero_to_One" target="_blank" rel="external">Peter Thiel’s “Zero to One: Notes on Startups, or How to Build the Future”</a> was a very quick and enjoyable read (I finished it in two and a half working days).<br><a id="more"></a> </p>
<p>It is a pretty recent book (2014) and a very insightful read for anyone who wishes to create something new. Although the book may read like it has been written for american unicorn startup entrepreneurs, I would recommend it to anyone who wishes to create something radically new, be it a company, NGO, scientific breakthrough or revolutionise art.</p>
<p>The book felt like a motivational piece to me. There were few practical advices (read <a href="http://theleanstartup.com/" target="_blank" rel="external">The Lean Startup</a> or <a href="http://www.goodreads.com/book/show/762542.The_Four_Steps_to_the_Epiphany" target="_blank" rel="external">The Four Steps to the Epiphany</a> if that is what you are looking for), <em>Zero to One</em> is a collection of lessons learnt, advices and theories by the co-founder of Paypal and first investor in Facebook.</p>
<p><br></p>
<h2 id="Notes_and_Takeaways">Notes and Takeaways</h2><h3 id="Go_Big_or_go_Home">Go Big or go Home</h3><p>The book is not called 0 to 0.25, nor is it called 1 to 2. Successful billion dollars create a completely new ecosystem and evolve in a world of their own. They don’t simply improve on an existing solution. They discover ‘secrets’ and build a company based on that secret. </p>
<p>For Paypal it meant creating a way of replacing the US Dollar with a different currency, for Uber it meant having anyone driving anyone else anywhere, for Facebook it meant allowing everyone to connect and share information with each others. Although these companies have evolved a lot since their creation, at the beginning there was someone who discovered a ‘secret’, something that nobody saw but now seems obvious to 90% of the planet.</p>
<p>The author summarises this as</p>
<blockquote><p>What valuable company is nobody building?</p>
<footer><strong>Peter Thiel</strong><cite><a href="https://en.wikipedia.org/wiki/Zero_to_One" target="_blank" rel="external">Zero to One</a></cite></footer></blockquote>
<h3 id="Engineering_Superiority">Engineering Superiority</h3><p>When founding a startup, you want to own a breakthrough technology. Be it a cure for cancer or a super efficient clean energy, you need something an order of magniture better than what it currently available. But technology only is not sufficient. Cf Guy Kawasaki’s <a href="https://startupblog.wordpress.com/2013/07/08/the-story-of-ice/" target="_blank" rel="external">Ice Factory to Fridge Story</a></p>
<h3 id="Timing_and_Monopoly">Timing and Monopoly</h3><p>One of the deciding factors for startup success is timing. Facebook would not have know the exponential growth it did, had it started in 1995. Timing is key and you want to be the last mover in order to expand by dominating one niche at a time. Cf this talk by Peter Thiel on <a href="https://www.youtube.com/watch?v=5_0dVHMpJlo" target="_blank" rel="external">the importance of achieving monopoly</a>. Also this ted talk which explain that <a href="https://www.ted.com/talks/bill_gross_the_single_biggest_reason_why_startups_succeed?language=en" target="_blank" rel="external">timing is the most deciding factor in startup success</a></p>
<h3 id="Team">Team</h3><p>More important that a good distribution of skills, all the founding members need to be on the same wavelength. From outside a startup should look like a cult, except that the ideas everyone believe in are good ones. Most startup fail because of internal dysfunctions and not because they got crushed by competition.</p>
<h3 id="Sales_/_Distribution">Sales / Distribution</h3><p>It is a common mistake to think that the product will sell itself if good enough. This is a deadly mistake. A grandmaster salesman selling a crappy products might succeed. A perfect product with a crappy sales team has zero chance of succeeding. This is non negotiable.</p>
<h3 id="Think_far_ahead">Think far ahead</h3><p>When preparing a business idea, have the end game in mind. End game meaning 20 years from now. Build a company that will last for decades. Build a company that will only start making money in a decade.</p>
<h3 id="Don’t_leave_anything_to_chance">Don’t leave anything to chance</h3><p>A lot of books and people will have you believe that success is pure luck. It is not. You need to have a clear idea of what the future will be and reach that place. The western world seems to live in uncertainty and this needs to change. A startup company is the best way to do that.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="First_impressions">First impressions</h2><p>I have read my fair share of startup books and I just finished one more. <a href="https://en.wikipedia.org/wiki/Zero_to_One">Peter Thiel’s “Zero to One: Notes on Startups, or How to Build the Future”</a> was a very quick and enjoyable read (I finished it in two and a half working days).<br>]]>
    
    </summary>
    
      <category term="Books" scheme="http://klugjo.github.io/tags/Books/"/>
    
      <category term="Startups" scheme="http://klugjo.github.io/tags/Startups/"/>
    
  </entry>
  
</feed>

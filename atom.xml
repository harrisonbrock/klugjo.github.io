<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Klughertz Jonathan]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://klugjo.github.io/"/>
  <updated>2016-01-25T08:43:31.000Z</updated>
  <id>http://klugjo.github.io/</id>
  
  <author>
    <name><![CDATA[Klughertz Jonathan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[HTTPie, a good replacement for cURL]]></title>
    <link href="http://klugjo.github.io/2016/01/HTTPie-a-good-replacement-for-cURL/"/>
    <id>http://klugjo.github.io/2016/01/HTTPie-a-good-replacement-for-cURL/</id>
    <published>2016-01-25T07:47:17.000Z</published>
    <updated>2016-01-25T08:43:31.000Z</updated>
    <content type="html"><![CDATA[<p>If you find <a href="http://curl.haxx.se/docs/manpage.html" target="_blank" rel="external">cURL’s syntax</a> a bit too dry for your liking, you could give <a href="https://github.com/jkbrzt/httpie" target="_blank" rel="external">HTTPie</a> a try. In this article I will go through the basics of making HTTP requests to a REST API using HTTPie.<br><a id="more"></a><br><br></p>
<h2 id="Install_HTTPie">Install HTTPie</h2><p>I am on OSX and with brew, installation is a breeze.</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>install httpie</span><br></pre></td></tr></table></figure>
<p>If you are on a different system, check out the <a href="https://github.com/jkbrzt/httpie#installation" target="_blank" rel="external">installation options</a></p>
<p><br></p>
<h2 id="Talk_to_a_REST_API">Talk to a REST API</h2><p>For these examples, I will use the test API @ <a href="http://jsonplaceholder.typicode.com/" target="_blank" rel="external">http://jsonplaceholder.typicode.com/</a></p>
<p><br></p>
<h3 id="GET_Request">GET Request</h3><p>Use <code>http [url]</code> for a basic GET request </p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ http jsonplaceholder<span class="class">.typicode</span><span class="class">.com</span>/posts/<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>A nice feature of HTTPie is the possibility to use a <code>name==value</code> syntax for your <strong>querystring parameters</strong>.</p>
<p>Instead of the less readable:<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>http jsonplaceholder.typicode.com/comments?postId=<span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p>Use the cleaner:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ http jsonplaceholder<span class="class">.typicode</span><span class="class">.com</span>/comments postId==<span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p><br></p>
<h3 id="POST_Request">POST Request</h3><p>For other verbs than the default GET, use <code>http [verb] [url] [data]</code>.</p>
<p>The <code>[data]</code> part of the command uses a white space separated list of key value pairs as defined below:</p>
<ul>
<li><code>name=value</code> for strings or text.</li>
<li><code>name:=value</code> for raw JSON.</li>
<li><code>name=@file.txt</code> to include the content of a text files sent as a string.</li>
<li><code>name:=@data.json</code> to include a JSON file used as raw JSON.</li>
</ul>
<p><strong>Note on raw JSON:</strong></p>
<p>You need to use the raw JSON <code>name:=value</code> notation for booleans and numbers for example. Otherwise <code>bool=false</code> will be interpreted as <code>{bool: &#39;false&#39;}</code> instead of <code>{bool: false}</code>. Similarly, <code>id=10</code> would be interpreted as <code>{id: &#39;10&#39;}</code> instead of <code>{id: 10}</code>.</p>
<p><strong>Example</strong></p>
<p>With our test API, to create a new post, we need to send a POST request to <a href="http://jsonplaceholder.typicode.com/posts" target="_blank" rel="external">http://jsonplaceholder.typicode.com/posts</a>, with the following JSON data:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    title: <span class="string">'foo'</span>,</span><br><span class="line">    body: <span class="string">'bar'</span>,</span><br><span class="line">    userId: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The HTTPie request will be<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ http POST jsonplaceholder<span class="class">.typicode</span><span class="class">.com</span>/posts title=foo body=bar userId:=<span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p><br></p>
<h3 id="PUT_Request">PUT Request</h3><p>PUT Requests work the same way as POST Request:</p>
<p>A PUT Request to <a href="http://jsonplaceholder.typicode.com/posts/1" target="_blank" rel="external">http://jsonplaceholder.typicode.com/posts/1</a></p>
<p>With the data</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attribute">title</span>: <span class="string">'foo'</span>,</span><br><span class="line">    <span class="attribute">body</span>: <span class="string">'bar'</span>,</span><br><span class="line">    <span class="attribute">userId</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>becomes</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ http PUT jsonplaceholder.typicode.com<span class="regexp">/posts/</span><span class="number">1</span> <span class="string">id:</span>=<span class="number">1</span> title=foo body=bar <span class="string">userId:</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<h3 id="DELETE_Request">DELETE Request</h3><p>Our DELETE Request does not have any data sent:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ http DELETE jsonplaceholder<span class="class">.typicode</span><span class="class">.com</span>/posts/<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><br><br>Check out the <a href="https://github.com/jkbrzt/httpie#examples" target="_blank" rel="external">excellent documentation for more HTTPie examples</a>.<br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>If you find <a href="http://curl.haxx.se/docs/manpage.html">cURL’s syntax</a> a bit too dry for your liking, you could give <a href="https://github.com/jkbrzt/httpie">HTTPie</a> a try. In this article I will go through the basics of making HTTP requests to a REST API using HTTPie.<br>]]>
    
    </summary>
    
      <category term="Bash" scheme="http://klugjo.github.io/tags/Bash/"/>
    
      <category term="REST" scheme="http://klugjo.github.io/tags/REST/"/>
    
      <category term="cURL" scheme="http://klugjo.github.io/tags/cURL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Notes on Zero to One by Peter Thiel]]></title>
    <link href="http://klugjo.github.io/2016/01/Notes-on-Zero-to-One-by-Peter-Thiel/"/>
    <id>http://klugjo.github.io/2016/01/Notes-on-Zero-to-One-by-Peter-Thiel/</id>
    <published>2016-01-22T08:31:58.000Z</published>
    <updated>2016-01-22T09:52:55.000Z</updated>
    <content type="html"><![CDATA[<h2 id="First_impressions">First impressions</h2><p>I have read my fair share of startup books and I just finished one more. <a href="https://en.wikipedia.org/wiki/Zero_to_One" target="_blank" rel="external">Peter Thiel’s “Zero to One: Notes on Startups, or How to Build the Future”</a> was a very quick and enjoyable read (I finished it in two and a half working days).<br><a id="more"></a> </p>
<p>It is a pretty recent book (2014) and a very insightful read for anyone who wishes to create something new. Although the book may read like it has been written for american unicorn startup entrepreneurs, I would recommend it to anyone who wishes to create something radically new, be it a company, NGO, scientific breakthrough or revolutionise art.</p>
<p>The book felt like a motivational piece to me. There were few practical advices (read <a href="http://theleanstartup.com/" target="_blank" rel="external">The Lean Startup</a> or <a href="http://www.goodreads.com/book/show/762542.The_Four_Steps_to_the_Epiphany" target="_blank" rel="external">The Four Steps to the Epiphany</a> if that is what you are looking for), <em>Zero to One</em> is a collection of lessons learnt, advices and theories by the co-founder of Paypal and first investor in Facebook.</p>
<p><br></p>
<h2 id="Notes_and_Takeaways">Notes and Takeaways</h2><h3 id="Go_Big_or_go_Home">Go Big or go Home</h3><p>The book is not called 0 to 0.25, nor is it called 1 to 2. Successful billion dollars create a completely new ecosystem and evolve in a world of their own. They don’t simply improve on an existing solution. They discover ‘secrets’ and build a company based on that secret. </p>
<p>For Paypal it meant creating a way of replacing the US Dollar with a different currency, for Uber it meant having anyone driving anyone else anywhere, for Facebook it meant allowing everyone to connect and share information with each others. Although these companies have evolved a lot since their creation, at the beginning there was someone who discovered a ‘secret’, something that nobody saw but now seems obvious to 90% of the planet.</p>
<p>The author summarises this as</p>
<blockquote><p>What valuable company is nobody building?</p>
<footer><strong>Peter Thiel</strong><cite><a href="https://en.wikipedia.org/wiki/Zero_to_One" target="_blank" rel="external">Zero to One</a></cite></footer></blockquote>
<h3 id="Engineering_Superiority">Engineering Superiority</h3><p>When founding a startup, you want to own a breakthrough technology. Be it a cure for cancer or a super efficient clean energy, you need something an order of magniture better than what it currently available. But technology only is not sufficient. Cf Guy Kawasaki’s <a href="https://startupblog.wordpress.com/2013/07/08/the-story-of-ice/" target="_blank" rel="external">Ice Factory to Fridge Story</a></p>
<h3 id="Timing_and_Monopoly">Timing and Monopoly</h3><p>One of the deciding factors for startup success is timing. Facebook would not have know the exponential growth it did, had it started in 1995. Timing is key and you want to be the last mover in order to expand by dominating one niche at a time. Cf this talk by Peter Thiel on <a href="https://www.youtube.com/watch?v=5_0dVHMpJlo" target="_blank" rel="external">the importance of achieving monopoly</a>. Also this ted talk which explain that <a href="https://www.ted.com/talks/bill_gross_the_single_biggest_reason_why_startups_succeed?language=en" target="_blank" rel="external">timing is the most deciding factor in startup success</a></p>
<h3 id="Team">Team</h3><p>More important that a good distribution of skills, all the founding members need to be on the same wavelength. From outside a startup should look like a cult, except that the ideas everyone believe in are good ones. Most startup fail because of internal dysfunctions and not because they got crushed by competition.</p>
<h3 id="Sales_/_Distribution">Sales / Distribution</h3><p>It is a common mistake to think that the product will sell itself if good enough. This is a deadly mistake. A grandmaster salesman selling a crappy products might succeed. A perfect product with a crappy sales team has zero chance of succeeding. This is non negotiable.</p>
<h3 id="Think_far_ahead">Think far ahead</h3><p>When preparing a business idea, have the end game in mind. End game meaning 20 years from now. Build a company that will last for decades. Build a company that will only start making money in a decade.</p>
<h3 id="Don’t_leave_anything_to_chance">Don’t leave anything to chance</h3><p>A lot of books and people will have you believe that success is pure luck. It is not. You need to have a clear idea of what the future will be and reach that place. The western world seems to live in uncertainty and this needs to change. A startup company is the best way to do that.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="First_impressions">First impressions</h2><p>I have read my fair share of startup books and I just finished one more. <a href="https://en.wikipedia.org/wiki/Zero_to_One">Peter Thiel’s “Zero to One: Notes on Startups, or How to Build the Future”</a> was a very quick and enjoyable read (I finished it in two and a half working days).<br>]]>
    
    </summary>
    
      <category term="Books" scheme="http://klugjo.github.io/tags/Books/"/>
    
      <category term="Startups" scheme="http://klugjo.github.io/tags/Startups/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Untrack files already added to git repository based on .gitignore]]></title>
    <link href="http://klugjo.github.io/2016/01/Untrack-files-already-added-to-git-repository-based-on-gitignore/"/>
    <id>http://klugjo.github.io/2016/01/Untrack-files-already-added-to-git-repository-based-on-gitignore/</id>
    <published>2016-01-20T08:16:34.000Z</published>
    <updated>2016-01-20T09:07:11.000Z</updated>
    <content type="html"><![CDATA[<p>Let’s say you have already added/committed some files to your git repository and you then add them to your .gitignore; these files will still be present in your repository index. This article we will see how to get rid of them.</p>
<a id="more"></a> 
<p><br></p>
<h2 id="Step_1:_Commit_all_your_changes">Step 1: Commit all your changes</h2><p>Before proceeding, make sure all your changes are committed, including your .gitignore file.</p>
<p><br></p>
<h2 id="Step_2:_Remove_everything_from_the_repository">Step 2: Remove everything from the repository</h2><p>To clear your repo, use:</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -r <span class="comment">--cached .</span></span><br></pre></td></tr></table></figure>
<ul>
<li><a href="https://git-scm.com/docs/git-rm" target="_blank" rel="external">rm</a> is the remove command</li>
<li><strong>-r</strong> will allow recursive removal</li>
<li><strong>—cached</strong> will only remove files from the index. Your files will still be there.</li>
</ul>
<p>The <code>rm</code> command can be unforgiving. If you wish to try what it does beforehand, add the <code>-n</code> or <code>--dry-run</code> flag to test things out.</p>
<p><br></p>
<h2 id="Step_3:_Re_add_everything">Step 3: Re add everything</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">git</span> <span class="keyword">add </span>.</span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="Step_4:_Commit">Step 4: Commit</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">git</span> commit -m <span class="string">".gitignore fix"</span></span><br></pre></td></tr></table></figure>
<p>Your repository is clean :)</p>
<p>Push the changes to your remote to see the changes effective there as well.<br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Let’s say you have already added/committed some files to your git repository and you then add them to your .gitignore; these files will still be present in your repository index. This article we will see how to get rid of them.</p>]]>
    
    </summary>
    
      <category term="Git" scheme="http://klugjo.github.io/tags/Git/"/>
    
      <category term="gitignore" scheme="http://klugjo.github.io/tags/gitignore/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Use Q to create a promise from a value]]></title>
    <link href="http://klugjo.github.io/2016/01/Use-Q-to-create-a-promise-from-a-value/"/>
    <id>http://klugjo.github.io/2016/01/Use-Q-to-create-a-promise-from-a-value/</id>
    <published>2016-01-18T08:59:18.000Z</published>
    <updated>2016-01-20T01:06:15.000Z</updated>
    <content type="html"><![CDATA[<p>Promises are usually used as an elegant way to handle asynchronous operations. In this article, we will look at how to create promises from fixed values and non asynchronous operations. For example you have a function that returns a value and you need to <em>promisify</em> it.</p>
<a id="more"></a>
<p><br></p>
<p>I will be using node and the <a href="https://github.com/kriskowal/q" target="_blank" rel="external">Q library</a> for these examples.</p>
<h2 id="Using_Q-fcall">Using Q.fcall</h2><p>The simplest and most straight forward way to go is to use <a href="https://github.com/kriskowal/q#using-qfcall" target="_blank" rel="external">Q.fcall</a> to generate a promise from a function that returns a fixed value.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Q = <span class="built_in">require</span>(<span class="string">'q'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> promise = Q.fcall(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Fixed value"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="Using_a_deferred_object">Using a deferred object</h2><p>You can also use the traditional <a href="https://github.com/kriskowal/q#using-deferreds" target="_blank" rel="external">deferred object</a> and resolve it immediately.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> deferred = Q.defer(); <span class="comment">// Create a deferred object</span></span><br><span class="line"></span><br><span class="line">    deferred.resolve(<span class="string">"Fixed Value"</span>); <span class="comment">// Resolve it</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> deferred.promise; <span class="comment">// Return a promise</span></span><br><span class="line">&#125;(); <span class="comment">// function is self invoking</span></span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="Using_Q-Promise">Using Q.Promise</h2><p>Finally you can also use <a href="https://github.com/kriskowal/q#using-qpromise" target="_blank" rel="external">Q.Promise</a> which is a different take on the deferred: different syntax but same level of control.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = Q.promise(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resolve(<span class="string">"Fixed Value"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Promises are usually used as an elegant way to handle asynchronous operations. In this article, we will look at how to create promises from fixed values and non asynchronous operations. For example you have a function that returns a value and you need to <em>promisify</em> it.</p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
      <category term="Promise" scheme="http://klugjo.github.io/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Add a sitemap to your hexo blog]]></title>
    <link href="http://klugjo.github.io/2016/01/Add-a-sitemap-to-your-hexo-blog/"/>
    <id>http://klugjo.github.io/2016/01/Add-a-sitemap-to-your-hexo-blog/</id>
    <published>2016-01-18T07:41:29.000Z</published>
    <updated>2016-01-19T01:01:54.000Z</updated>
    <content type="html"><![CDATA[<p>Quick article to see how you can (and you should) add a <a href="https://en.wikipedia.org/wiki/Sitemaps" target="_blank" rel="external">google sitemap</a> to your hexo blog.<br><a id="more"></a><br><br></p>
<h3 id="There_is_a_plugin_for_it_that_will_do_all_the_hard_work_for_you-">There is a plugin for it that will do all the hard work for you.</h3><p>Go ahead and install <a href="https://github.com/hexojs/hexo-generator-sitemap" target="_blank" rel="external">hexo-generator-sitemap</a> with:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> hexo-generator-sitemap <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure>
<p><br><br>Then add the path to your <code>sitemap.xml</code> in the <code>_config.yml</code>:</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># Sitemap</span></span><br><span class="line"><span class="label">sitemap:</span></span><br><span class="line">  path: sitemap.xml</span><br></pre></td></tr></table></figure>
<p>Regenerate your blog and check that a sitemap.xml file has been created at the root of your blog.<br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Quick article to see how you can (and you should) add a <a href="https://en.wikipedia.org/wiki/Sitemaps">google sitemap</a> to your hexo blog.<br>]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://klugjo.github.io/tags/Hexo/"/>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
      <category term="Sitemap" scheme="http://klugjo.github.io/tags/Sitemap/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OSX: Use Spotlight with the Command Line]]></title>
    <link href="http://klugjo.github.io/2016/01/OSX-Use-Spotlight-with-the-Command-Line/"/>
    <id>http://klugjo.github.io/2016/01/OSX-Use-Spotlight-with-the-Command-Line/</id>
    <published>2016-01-14T09:17:00.000Z</published>
    <updated>2016-01-15T08:13:44.000Z</updated>
    <content type="html"><![CDATA[<p>In OS X, you can use search for files in the command line using <code>mdfind</code>.</p>
<a id="more"></a> 
<p><br></p>
<h2 id="Basic_usage">Basic usage</h2><p>Use <code>mdfind</code> to search for anything like you would in spotlight:<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">mdfind</span> searchTerm</span><br></pre></td></tr></table></figure></p>
<p>For example <code>mdfind robocop</code> will search for any file which contains the term <em>robocop</em> and return a list of paths. Just like spotlight, it will also search inside text documents, pdf documents, emails and so on.</p>
<h3 id="Additional_parameters">Additional parameters</h3><ul>
<li>use <code>-count</code> to return the number of results instead of a list of files: <code>mdfind robocop -count</code></li>
<li>use <code>-live</code> to watch an live-update the list of results: <code>mdfind robocop -live</code></li>
<li>use <code>-onlyin &lt;directory&gt;</code> to search in a specific path: <code>mdfind robocop -onlyin ~/Music</code></li>
<li>use <code>-name &lt;name&gt;</code> to limit the search to filenames (won’t search inside files for example): <code>mdfind -name robocop</code></li>
</ul>
<h2 id="Advanced_search_queries_using_OS_X_Files_Metadata">Advanced search queries using OS X Files Metadata</h2><h3 id="Check_files_metadata">Check files metadata</h3><p>You can read a file’s metadata using the <code>mdls</code> command.</p>
<p>For example: </p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdls  ~<span class="regexp">/Pictures/</span><span class="constant">Birthday.</span>jpg</span><br></pre></td></tr></table></figure>
<p>Will print out a list of attributes and their values, something like:</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">_kMDItemOwnerUserID            = <span class="value"><span class="number">501</span></span></span></span><br><span class="line"><span class="setting">kMDItemContentCreationDate     = <span class="value"><span class="number">2015</span>-<span class="number">12</span>-<span class="number">17</span> <span class="number">05</span>:<span class="number">32</span>:<span class="number">42</span> +<span class="number">0000</span></span></span></span><br><span class="line"><span class="setting">kMDItemContentModificationDate = <span class="value"><span class="number">2015</span>-<span class="number">12</span>-<span class="number">17</span> <span class="number">05</span>:<span class="number">32</span>:<span class="number">42</span> +<span class="number">0000</span></span></span></span><br><span class="line"><span class="setting">kMDItemContentType             = <span class="value"><span class="string">"dyn.ah62d4rv4ge80w6dp"</span></span></span></span><br><span class="line"><span class="title">[...]</span></span><br></pre></td></tr></table></figure>
<h3 id="Search_files_by_metadata_attributes">Search files by metadata attributes</h3><p>You can build more advanced queries and perform complex searches by using these metadata attributes using</p>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdfind <span class="keyword">query</span></span><br></pre></td></tr></table></figure>
<p>For example:</p>
<p><strong>Search for files whose type contains</strong> <code>MPEG</code>:<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">mdfind</span> <span class="string">"kMDItemKind == '*MPEG*'"</span></span><br></pre></td></tr></table></figure></p>
<p><strong> Search for image files with a width &gt; 3000 pixels</strong>:<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">mdfind</span> <span class="string">"kMDItemPixelWidth &gt; 3000"</span></span><br></pre></td></tr></table></figure></p>
<p><strong> Search for audio and movie files with a duration &lt; 2 minutes</strong>:<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">mdfind</span> <span class="string">"kMDItemDurationSeconds &lt; 120"</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>In OS X, you can use search for files in the command line using <code>mdfind</code>.</p>]]>
    
    </summary>
    
      <category term="Bash" scheme="http://klugjo.github.io/tags/Bash/"/>
    
      <category term="OS X" scheme="http://klugjo.github.io/tags/OS-X/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[The let keyword in ES6 JavaScript]]></title>
    <link href="http://klugjo.github.io/2016/01/The-let-keyword-in-ES6-JavaScript/"/>
    <id>http://klugjo.github.io/2016/01/The-let-keyword-in-ES6-JavaScript/</id>
    <published>2016-01-12T03:32:24.000Z</published>
    <updated>2016-01-12T09:13:34.000Z</updated>
    <content type="html"><![CDATA[<p>The <code>let</code> keyword in JavaScript is like the old <code>var</code> keyword in JavaScript except that it respects block scope. Before ES6, JavaScript only had function scope. Although there is nothing fundamentally wrong with function scope, it confuses a lot of people coming from C based languages which have block scope.</p>
<a id="more"></a> 
<p><br></p>
<h2 id="1)_Block_scope_vs_Function_scope">1) Block scope vs Function scope</h2><p>Scope refers to some portion of the code where a variable exists. Outside of that scope the variable will be not be accessible or will be another variable with the same name.<br><br></p>
<h3 id="a)_Function_scope">a) Function scope</h3><p>Function scope means that any variable defined anywhere inside a function, will be accessible anywhere in that function and will not exist outside of it.<br><br></p>
<h3 id="b)_Block_scope">b) Block scope</h3><p>Block scope means that any variable defined anywhere inside any block (for example <code>if</code> and <code>for</code> blocks), will be accessible anywhere inside that block and will not exist outside of it.</p>
<p><br></p>
<h2 id="2)_JavaScript_var_and_let">2) JavaScript <code>var</code> and <code>let</code></h2><p>In JavaScript, the <code>var</code> keyword is function scoped. The <code>let</code> keyword is block scoped.<br><br></p>
<h3 id="a)_Example">a) Example</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">'function-a'</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="string">'function-b'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 'function-a'</span></span><br><span class="line">    <span class="built_in">console</span>.log(b); <span class="comment">// 'function-b'</span></span><br><span class="line">    <span class="built_in">console</span>.log(c); <span class="comment">// ReferenceError Exception: c is not defined</span></span><br><span class="line">    <span class="built_in">console</span>.log(d === <span class="literal">undefined</span>); <span class="comment">// true</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(a !== b) &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">let</span> a = <span class="string">'block-a'</span>; <span class="comment">// Sets the value of a but only in the if block</span></span><br><span class="line">        <span class="keyword">var</span> b = <span class="string">'block-b'</span>; <span class="comment">// Sets the value of b in the entire main() function</span></span><br><span class="line">        <span class="keyword">let</span> c = <span class="string">'block-c'</span>; <span class="comment">// Defined only in the if block</span></span><br><span class="line">        <span class="keyword">var</span> d = <span class="string">'block-d'</span>; <span class="comment">// Defined in the entire main() function</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(a); <span class="comment">// 'block-a'</span></span><br><span class="line">        <span class="built_in">console</span>.log(b); <span class="comment">// 'block-b'</span></span><br><span class="line">        <span class="built_in">console</span>.log(c); <span class="comment">// 'block-c'</span></span><br><span class="line">        <span class="built_in">console</span>.log(d); <span class="comment">// 'block-d'</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 'function-a'</span></span><br><span class="line">    <span class="built_in">console</span>.log(b); <span class="comment">// 'block-b'</span></span><br><span class="line">    <span class="built_in">console</span>.log(c); <span class="comment">// ReferenceError Exception: c is not defined</span></span><br><span class="line">    <span class="built_in">console</span>.log(d); <span class="comment">// 'block-d'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br></p>
<h3 id="b)_Notes">b) Notes</h3><ul>
<li>Variables defined with <code>var</code> inside an <code>if</code> block will exist inside the entire function they are defined in – ignoring the <code>if</code> block. </li>
<li>Variables defined with <code>var</code> will exist and have a value of undefined in the section of the code before the initialisation. Check out variable <code>d</code> in the example. The variable is created at the beginning of the function, this is called <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/var" target="_blank" rel="external">variable hoisting</a>.</li>
<li>Variables defined with <code>let</code> will only exist within the block they are defined in. Trying to access the variable outside of the block will throw an Error. This is the case for <code>c</code> in the example.</li>
<li>Use <code>let</code> to override the value of a function scoped variable inside a block only. Example: <code>a</code>.</li>
</ul>
<p><br></p>
<h2 id="3)_When_to_use_let">3) When to use <code>let</code></h2><p><br></p>
<h3 id="a)_In_for_loops">a) In <code>for</code> loops</h3><p>Do</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i; i &lt; n; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">    [...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>instead of</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i; <span class="comment">// Will be function scoped and can cause interferences</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">    [...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br></p>
<h3 id="b)_In_closures_that_need_to_retain_creation_time_values">b) In closures that need to retain creation time values</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">4</span>; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> j = i;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i); <span class="comment">// Will always print out 4</span></span><br><span class="line">        <span class="built_in">console</span>.log(j); <span class="comment">// Will print out 1, 2 and 3 as expected</span></span><br><span class="line">    &#125;, <span class="number">500</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Useful to create multiple instances of a variable inside a block.<br><br></p>
<h3 id="c)_For_temporary_variables_inside_blocks">c) For temporary variables inside blocks</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt; <span class="number">75</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> random = <span class="built_in">Math</span>.random();</span><br><span class="line">  i = random * <span class="number">100</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="4)_let_caveats_and_warnings">4) <code>let</code> caveats and warnings</h2><p><br></p>
<h3 id="a)_No_access_to_the_variable_before_declaration">a) No access to the variable before declaration</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(foo); <span class="comment">// Will throw an error</span></span><br><span class="line">    <span class="built_in">console</span>.log(bar); <span class="comment">// Prints nothing as bar is undefined but will not throw an error</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> foo = <span class="string">'foo'</span>;</span><br><span class="line">    <span class="keyword">var</span> bar = <span class="string">'bar'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>At first glance, the <code>let</code> keyword does behave the same as <code>var</code> when used in a function block. But if you try to access the variable before declaration you will get an error instead of an <code>undefined</code> variable as you would with <code>var</code>.<br><br></p>
<h3 id="b)_Double_declarations_are_forbidden">b) Double declarations are forbidden</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition) &#123;</span><br><span class="line">    <span class="keyword">let</span> amount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> amount = <span class="number">1</span>; <span class="comment">// will throw an Error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br></p>
<h3 id="c)_Be_careful_when_you_feel_like_replacing_a_var_with_let">c) Be careful when you feel like replacing a <code>var</code> with <code>let</code></h3><p>Be careful when you feel like changing <code>var</code> with <code>let</code>. Usually that happens when a function should be split into several parts.</p>
<p>If your initial function looks like</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">'foo'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(dayOfTheWeek = <span class="string">'Monday'</span>) &#123;</span><br><span class="line">        callback(result);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>then suddenly looks like</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(dayOfTheWeek = <span class="string">'Monday'</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="string">'foo'</span>;</span><br><span class="line">        callback(result);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(isRaining) &#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="string">'bar'</span>;</span><br><span class="line">        callback(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>You should seriously consider rewriting your function as two functions:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">process1</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">'foo'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(dayOfTheWeek = <span class="string">'Monday'</span>) &#123;</span><br><span class="line">        callback(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">process2</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">'bar'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(isRaining) &#123;</span><br><span class="line">        callback(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Read more about why <a href="/2016/01/Code-Bloat-Commandos-Do-not-let-your-functions-do-more-than-one-thing/" target="_blank">functions should only do one thing<a></a></a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>The <code>let</code> keyword in JavaScript is like the old <code>var</code> keyword in JavaScript except that it respects block scope. Before ES6, JavaScript only had function scope. Although there is nothing fundamentally wrong with function scope, it confuses a lot of people coming from C based languages which have block scope.</p>]]>
    
    </summary>
    
      <category term="ES6" scheme="http://klugjo.github.io/tags/ES6/"/>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Code Bloat Commandos - Do not let your functions do more than one thing]]></title>
    <link href="http://klugjo.github.io/2016/01/Code-Bloat-Commandos-Do-not-let-your-functions-do-more-than-one-thing/"/>
    <id>http://klugjo.github.io/2016/01/Code-Bloat-Commandos-Do-not-let-your-functions-do-more-than-one-thing/</id>
    <published>2016-01-11T07:02:12.000Z</published>
    <updated>2016-01-11T09:36:14.000Z</updated>
    <content type="html"><![CDATA[<p><strong>Code Bloat Commandos</strong> looks at why software code deteriorates over time; and how to fight back.</p>
<p>In this episode, we will look at how a nice and clean method grows into a dumping ground function. We will see when it happens, how to spot it and how to fix it.</p>
<a id="more"></a>
<blockquote><p>FUNCTIONS SHOULD DO ONE THING. THEY SHOULD DO IT WELL. THEY SHOULD DO IT ONLY.</p>
<footer><strong>Uncle Bob</strong><cite><a href="https://books.google.com.sg/books/about/Clean_Code.html?id=dwSfGQAACAAJ" target="_blank" rel="external">Clean Code</a></cite></footer></blockquote>
<p><br></p>
<h2 id="The_humble_beginnings">The humble beginnings</h2><h3 id="Project_specification:">Project specification:</h3><ul>
<li>We have a live video player and an event function called <code>onProgress</code> that is executed every second.</li>
<li>We can use that function to monitor playback progress and hook up various actions.</li>
<li>Our job is to implement a function that will track video engagement by sending an analytics ping every 30 seconds.</li>
</ul>
<h3 id="This_is_our_code_(JavaScript):">This is our code (JavaScript):</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Main entry point. This function will be called every second by the player</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onProgress</span>(<span class="params">currentTime</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// [...] Do UI stuff here like update progress bar and set Time</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Our function</span></span><br><span class="line">    _sendVideoEngagementAnalytics(currentTime);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// [...] Do more things here like update the icons in the footer</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_sendVideoEngagementAnalytics</span>(<span class="params">currentTime</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Math</span>.abs(currentTime - __analyticsState.fromPosition) &gt; <span class="number">30</span>) &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">var</span> analyticsData = &#123;</span><br><span class="line">            event: <span class="string">"VIDEO_PROGRESS"</span></span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        analyticsManager.send(analyticsData);   </span><br><span class="line">        </span><br><span class="line">        __analyticsState.fromPosition = currentTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This is our first version of the <code>_sendVideoEngagementAnalytics</code> function. It is still reasonably simple and compact. It checks if more than 30 seconds have elapsed. If it did, it sends an analytics ping using an analytics manager object.</p>
<p><br></p>
<h2 id="A_few_weeks_later">A few weeks later</h2><p>Our first version of the app is working and a few weeks later we need to also check if the current content playing is an Advertisement; and if that is the case send an Advertisement Start and End pings.<br>We can check if the current content playing is an Ad by calling <code>isAdPlaying(currentTime)</code>.</p>
<p>Easy enough, let’s get coding.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Main entry point. This function will be called every second by the player</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onProgress</span>(<span class="params">currentTime</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// [...] Do UI stuff here like update progress bar and set Time</span></span><br><span class="line">    </span><br><span class="line">    _sendVideoEngagementAnalytics(currentTime);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Do more things here like update the footer controls</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_sendVideoEngagementAnalytics</span>(<span class="params">currentTime</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> analyticsData,</span><br><span class="line">        adPlaying = isAdPlaying(currentTime);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Checks if more that 30 seconds have passed</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Math</span>.abs(currentTime - __analyticsState.fromPosition) &gt; <span class="number">30</span>) &#123;</span><br><span class="line">    </span><br><span class="line">        analyticsData = &#123;</span><br><span class="line">            event: <span class="string">"VIDEO_PROGRESS"</span></span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        analyticsManager.send(analyticsData);   </span><br><span class="line">        </span><br><span class="line">        __analyticsState.fromPosition = currentTime;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Checks if an Ad just started playing</span></span><br><span class="line">    <span class="keyword">if</span>(__analyticsState.adPlaying !== adPlaying) &#123;</span><br><span class="line">        </span><br><span class="line">        analyticsData = &#123;</span><br><span class="line">            event: adPlaying ? <span class="string">"AD_BEGIN"</span> : <span class="string">"AD_COMPLETE"</span></span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        analyticsManager.send(analyticsData);   </span><br><span class="line">        </span><br><span class="line">        __analyticsState.adPlaying = adPlaying;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Done. <code>git commit -m &quot;Added Ad tracking analytics to player&quot;</code>. Jump on Skype and ask who is ready for lunch.</p>
<p>This is (almost) what happened to me today.</p>
<p><br></p>
<h2 id="The_bloat">The bloat</h2><h3 id="The_code_is_not_that_bad,_we_have:">The code is not that bad, we have:</h3><ul>
<li>refactored <code>analyticsData</code> out of the initial if block because of <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/var#var_hoisting" target="_blank" rel="external">variable hoisting and scoping in JavaScript</a>.</li>
<li>created a local variable <code>adPlaying</code> to avoid multiple calls to <code>isAdPlaying(currentTime)</code>.</li>
</ul>
<p><br></p>
<h3 id="These_are_great,_but_we_have_committed_an_even_bigger_mistake_here:">These are great, but we have committed an even bigger mistake here:</h3><p><strong>The <code>_sendVideoEngagementAnalytics</code> is now doing 2 things</strong>; which is pretty bad in and of itself but also has the following scary consequences:</p>
<ul>
<li><strong>The name <code>_sendVideoEngagementAnalytics</code> is now incorrect</strong> (we are not only monitoring video engagement but ad playback as well). Someone reading <code>_sendVideoEngagementAnalytics(currentTime);</code> in the calling function might not suspect that it also sends Ad related analytics.</li>
<li><strong>The function is getting longer.</strong> And we are setting the stage for it to become even longer by starting off a series of if blocks that check playback position related stuff.</li>
<li>We suddenly feel like <strong>we need comments in our code to explain what it does</strong> and ‘structure’ the two parts of our function. Burp.</li>
</ul>
<p><br></p>
<h2 id="Pain_Relief">Pain Relief</h2><h3 id="Recognising_the_problem">Recognising the problem</h3><ul>
<li><p>It clicked for me when I realised <strong>the function’s name didn’t correspond to what the function actually does.</strong></p>
</li>
<li><p>Another hint could have been the fact that the function now has <strong>two sections of code that handles different business requirements.</strong></p>
</li>
<li><p>A function that is <strong>30 lines long and needs comments for ‘if conditions’</strong> that are pretty readable is not a good sign either.</p>
</li>
<li><p>But really, simply observing that the function I have modified suddenly <strong>does not respect the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" target="_blank" rel="external">Single Responsibility Principle</a></strong> should have been enough.</p>
</li>
</ul>
<p><br></p>
<h3 id="Administering_the_cure">Administering the cure</h3><p>At this point, the solution is pretty clear. Separating the ravioli.</p>
<p>Let’s go ahead and split our function into two functions:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onProgress</span>(<span class="params">currentTime</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// [...] Do UI stuff here like update progress bar and set Time</span></span><br><span class="line">    </span><br><span class="line">    _sendVideoEngagementAnalytics(currentTime);</span><br><span class="line">    _sendAdContentAnalytics(currentTime);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Do more things here like update the footer controls</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_sendVideoEngagementAnalytics</span>(<span class="params">currentTime</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> analyticsData;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Math</span>.abs(currentTime - __analyticsState.fromPosition) &gt; <span class="number">30</span>) &#123;</span><br><span class="line">    </span><br><span class="line">        analyticsData = &#123;</span><br><span class="line">            event: <span class="string">"VIDEO_PROGRESS"</span></span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        analyticsManager.send(analyticsData);   </span><br><span class="line">        </span><br><span class="line">        __analyticsState.fromPosition = currentTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_sendAdContentAnalytics</span>(<span class="params">currentTime</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> analyticsData,</span><br><span class="line">        adPlaying = isAdPlaying(currentTime);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(__analyticsState.adPlaying !== adPlaying) &#123;</span><br><span class="line">        </span><br><span class="line">        analyticsData = &#123;</span><br><span class="line">            event: adPlaying ? <span class="string">"AD_BEGIN"</span> : <span class="string">"AD_COMPLETE"</span></span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        analyticsManager.send(analyticsData);   </span><br><span class="line">        </span><br><span class="line">        __analyticsState.adPlaying = adPlaying;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br></p>
<h3 id="Following_up_after_treatment">Following up after treatment</h3><ul>
<li>When reading<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_sendVideoEngagementAnalytics<span class="list">(<span class="keyword">currentTime</span>)</span><span class="comment">;</span></span><br><span class="line">_sendAdContentAnalytics<span class="list">(<span class="keyword">currentTime</span>)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>we know exactly what is going on. No extra ‘hidden’ functionality.</p>
<ul>
<li><p>No more ugly comments</p>
</li>
<li><p>Shorter functions</p>
</li>
<li><p>If someone wants to add more analytics logic, they won’t be tempted to add to that function and worsen the problem. They will do the right thing right away by adding a new function.<br><br></p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>Code Bloat Commandos</strong> looks at why software code deteriorates over time; and how to fight back.</p>
<p>In this episode, we will look at how a nice and clean method grows into a dumping ground function. We will see when it happens, how to spot it and how to fix it.</p>]]>
    
    </summary>
    
      <category term="Single Responsibility Principle" scheme="http://klugjo.github.io/tags/Single-Responsibility-Principle/"/>
    
      <category term="Software Practices" scheme="http://klugjo.github.io/tags/Software-Practices/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Method context in JavaScript]]></title>
    <link href="http://klugjo.github.io/2016/01/Method-context-in-JavaScript/"/>
    <id>http://klugjo.github.io/2016/01/Method-context-in-JavaScript/</id>
    <published>2016-01-06T07:51:11.000Z</published>
    <updated>2016-01-06T09:01:38.000Z</updated>
    <content type="html"><![CDATA[<p>This article takes a closer look at what is called <strong>method context</strong> in JavaScript.</p>
<p>Method context refers to the way the <code>this</code> keyword behaves inside a function. It is different in JavaScript than in other languages. As we are going to demonstrate here, <strong>the value of <code>this</code> is determined by how and where a function is called.</strong></p>
<a id="more"></a> 
<p><br></p>
<h2 id="Function_defined_and_called_as_an_object_method">Function defined and called as an object method</h2><p>The simplest scenario is a <strong>function defined and called as an object method</strong>. In that case, <code>this</code> is set to the object the method is called on.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> defaultLogger = &#123;</span><br><span class="line">  loggerName: <span class="string">"Default"</span>,</span><br><span class="line">  log: <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"["</span> + <span class="keyword">this</span>.loggerName + <span class="string">"] "</span> + message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">defaultLogger.log(<span class="string">"example 1"</span>); <span class="comment">// logs "[Default] example 1"</span></span><br></pre></td></tr></table></figure>
<p>In the <code>log</code> function here, <code>this</code> corresponds to <code>defaultLogger</code>.</p>
<p><br></p>
<h2 id="Function_defined_in_the_global_scope">Function defined in the global scope</h2><p>By extension, if a function is defined in the global scope. <code>this</code> will be set to <code>window</code> (global object) when the code is executed in the browser.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Log function defined in the global scope</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"this "</span> + <span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">var</span> loggerName = <span class="keyword">this</span>.loggerName || <span class="string">"Default"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"["</span> + loggerName + <span class="string">"] "</span> + message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log(<span class="string">"example 2"</span>); <span class="comment">// Logs "this: [object Window]" then "[Default] example 2"</span></span><br></pre></td></tr></table></figure>
<p>Because the function is defined and executed in the global scope, in the <code>log</code> function here, <code>this</code> points to the global <code>window</code> object.</p>
<p><code>this.loggerName</code> is then undefined and the <code>&quot;Default&quot;</code> logger name is used instead.</p>
<p><br></p>
<h2 id="Function_defined_in_the_global_scope_and_used_as_an_object_method">Function defined in the global scope and used as an object method</h2><p>We can reuse the function defined above and use it in the context of an object. In that case, <code>this</code> will point to that object.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Log function defined externally</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"this: "</span> + <span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">var</span> loggerName = <span class="keyword">this</span>.loggerName || <span class="string">"Default"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"["</span> + loggerName + <span class="string">"] "</span> + message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using the log function in the context of an object</span></span><br><span class="line"><span class="keyword">var</span> databaseLogger = &#123;</span><br><span class="line">  loggerName: <span class="string">"Database"</span>,</span><br><span class="line">  log: log</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">databaseLogger.log(<span class="string">"example 3"</span>); <span class="comment">// Logs "this: [object Object]" then "[Database] example 3"</span></span><br></pre></td></tr></table></figure>
<p>Because we are calling the <code>log</code> function with the dot notation (<code>databaseLogger.log()</code>), the context is set to the object.</p>
<p>In conclusion, <strong>it does not matter where the function is defined; the context depends on which object the function is invoked from.</strong></p>
<p>Check out the code here: <a href="https://jsbin.com/ciqolu/edit?js,console" target="_blank" rel="external">https://jsbin.com/ciqolu/edit?js,console</a><br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This article takes a closer look at what is called <strong>method context</strong> in JavaScript.</p>
<p>Method context refers to the way the <code>this</code> keyword behaves inside a function. It is different in JavaScript than in other languages. As we are going to demonstrate here, <strong>the value of <code>this</code> is determined by how and where a function is called.</strong></p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Wildcards in Bash]]></title>
    <link href="http://klugjo.github.io/2016/01/Wildcards-in-bash/"/>
    <id>http://klugjo.github.io/2016/01/Wildcards-in-bash/</id>
    <published>2016-01-05T06:31:40.000Z</published>
    <updated>2016-01-05T07:55:00.000Z</updated>
    <content type="html"><![CDATA[<p>This article will walk you through some of the main wildcards available in Bash:</p>
<a id="more"></a> 
<p><br></p>
<h2 id="Match_any_string_with_*">Match any string with *</h2><p>The <code>*</code> wildcard will match any number of characters including no characters.</p>
<table>
<thead>
<tr>
<th>Expression</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ls *.jpg</code></td>
<td>lists all files ending with <strong>.jpg</strong></td>
</tr>
<tr>
<td><code>ls pic*</code></td>
<td>lists all files starting with <strong>pic</strong></td>
</tr>
<tr>
<td><code>ls *abc*</code></td>
<td>lists all files containing <strong>abc</strong> (including starting with and ending with <strong>abc</strong>)</td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="Match_a_single_character_with_?">Match a single character with ?</h2><p>The <code>?</code> wildcard will match a single character. That single character can be anything but can not be empty.</p>
<table>
<thead>
<tr>
<th>Expression</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ls pic?.jpg</code></td>
<td>lists all files like <strong>pic1.jpg</strong>, <strong>picA.jpg</strong> or <strong>picz.jpg</strong>. It will <u>not match</u> <strong>pic.jpg</strong></td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="Match_a_set_of_characters_with_[xyz]">Match a set of characters with [xyz]</h2><p>Use <code>[ ]</code> to have one single character match a defined set of characters.<br>[123abc] means will match 1, 2, 3, a, b or c.</p>
<table>
<thead>
<tr>
<th>Expression</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>pic[123].jpg</code></td>
<td>Will <u>only</u> match <strong>pic1.jpg</strong>, <strong>pic2.jpg</strong> and <strong>pic3.jpg</strong></td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="Match_a_range_of_characters_with_[a-z]">Match a range of characters with [a-z]</h2><p>Use <code>[-]</code> to have one character be within certain range.</p>
<table>
<thead>
<tr>
<th>Expression</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>[a-e]</code></td>
<td>Will match a, b, c, d or e</td>
</tr>
<tr>
<td><code>[a-z]</code></td>
<td>Will match any lowercase letter</td>
</tr>
<tr>
<td><code>[0-9]</code></td>
<td>Will match any digit</td>
</tr>
<tr>
<td><code>[A-Za-z]</code></td>
<td>Will match any letter</td>
</tr>
<tr>
<td><code>[a-e1-5]</code></td>
<td>Will match any lowercase letter between a and e or any digit between 1 and 5</td>
</tr>
<tr>
<td><code>[a-e123]</code></td>
<td>Will match any lowercase letter between a and e or any digit equal to 1, 2 or 3</td>
</tr>
<tr>
<td><code>[0-10]</code></td>
<td>Will match 0 or 1 (0 to 1 range or 0)</td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="Invert_a_selection_with_^">Invert a selection with ^</h2><p>Use <code>^</code> to invert a selection</p>
<table>
<thead>
<tr>
<th>Expression</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>[^78]</code></td>
<td>Will match any character (including letters) different than 7 and 8</td>
</tr>
<tr>
<td><code>[^a-z]</code></td>
<td>Will match any character that is not a lowercase letter</td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="Match_several_expressions_with_{abc,xyz}">Match several expressions with {abc,xyz}</h2><p>Use <code>{expr1,expr2}</code> to match expr1 and expr2</p>
<table>
<thead>
<tr>
<th>Expression</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ls {*.jpg,*.gif}</code></td>
<td>Will list any file with the jpg or gif extension</td>
</tr>
</tbody>
</table>
<p><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This article will walk you through some of the main wildcards available in Bash:</p>]]>
    
    </summary>
    
      <category term="Bash" scheme="http://klugjo.github.io/tags/Bash/"/>
    
      <category term="OS X" scheme="http://klugjo.github.io/tags/OS-X/"/>
    
  </entry>
  
</feed>

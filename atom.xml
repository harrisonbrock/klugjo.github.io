<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[CodeBlocQ]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://klugjo.github.io/"/>
  <updated>2016-03-22T09:41:37.000Z</updated>
  <id>http://klugjo.github.io/</id>
  
  <author>
    <name><![CDATA[Klughertz Jonathan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Remote Web Debugging with weinre]]></title>
    <link href="http://klugjo.github.io/2016/03/Remote-Web-Debugging-with-weinre/"/>
    <id>http://klugjo.github.io/2016/03/Remote-Web-Debugging-with-weinre/</id>
    <published>2016-03-22T08:41:13.000Z</published>
    <updated>2016-03-22T09:41:37.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://people.apache.org/~pmuellr/weinre/docs/latest/Home.html" target="_blank" rel="external">Weinre</a> is a great remote web debugging tool. It allows to you to quickly setup a ‘chrome dev tools’-like interface for any of your app. It comes in really handy when debugging an app on a device that does not have advanced debugging tools, think mobile, smart TVs, wearables and so on ..</p>
<p>Weinre is free, open source and runs on Node.</p>
 <a id="more"></a>
<h2 id="Why_use_weinre">Why use weinre</h2><h3 id="Weinre_is_really_useful_when:">Weinre is really useful when:</h3><ul>
<li>You need to have access to the DOM on a remote device and do some CSS tweaks</li>
<li>You want to access the JS log output</li>
<li>You want to check the network connections and what is going through the network</li>
<li>You want all of that in a tool that runs on Node.</li>
</ul>
<h3 id="Weinre_won’t_be_of_any_help_when:">Weinre won’t be of any help when:</h3><ul>
<li>You want to debug a device that is not in the same local network as yours. Check out <a href="/2016/03/Remote-JavaScript-debugging-with-jsconsole/">JSConsole</a>.</li>
<li>You can’t modify your app’s code</li>
</ul>
<h2 id="How_to_get_started">How to get started</h2><p>Here is a straight to the point guide on how to get started.</p>
<h3 id="Step_1:_Install_weinre">Step 1: Install weinre</h3><p>Easy with npm</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm -g <span class="keyword">install</span> weinre</span><br></pre></td></tr></table></figure>
<h3 id="Step_2:_Start_the_weinre_server">Step 2: Start the weinre server</h3><p>The weinre server will inject some JavaScript in your app through a script to allow the debugging to happen.</p>
<p>Technically, using <code>weinre</code> is enough to start the server but here are 2 useful options that you might as well pick up straight away:</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">$</span> <span class="comment">weinre</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">boundHost</span> <span class="comment">192</span><span class="string">.</span><span class="comment">168</span><span class="string">.</span><span class="comment">123</span><span class="string">.</span><span class="comment">1</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">httpPort</span> <span class="comment">8888</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>--boundHost</code> defaults to localhost -&gt; <strong>use your own IP instead</strong>. Localhost won’t mean [your machine] anymore when you are on your remote device.</li>
<li><code>--httpPort</code> defaults to 8080 which is also commonly used so save yourself some issues down the line and change it to something else.</li>
</ul>
<h3 id="Step_3:_Insert_the_script_in_your_app">Step 3: Insert the script in your app</h3><p>In the <code>&lt;head&gt;</code> of your code, add the weinre script tag:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://192.168.123.1:8888/target/target-script-min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>(Replace the IP with your machine’s IP and the port with whatever port you are using)</p>
<p>Reload or launch your app on the device under test (or simply in your browser).</p>
<h3 id="Step_4:_Start_debugging">Step 4: Start debugging</h3><ul>
<li>Open a browser (Chrome or Safari are supported) and go to: <code>http://192.168.123.1:8888</code> or the equivalent for your IP and Port.</li>
<li>Click on the first link: Access points &gt; debug client user interface. (Something like <a href="http://192.168.123.1:8888/client/#anonymous" target="_blank" rel="external">http://192.168.123.1:8888/client/#anonymous</a>)</li>
<li>Your device should appear under Targets. Click on the corresponding link and you are ready to go.</li>
</ul>
<p>The debugging tools are quite similar to browser’s dev tools so I am sure you can take it from there :)</p>
<h2 id="Conclusion">Conclusion</h2><p>Give it a try and see if it fits your needs. Weinre is an excellent tool, I have used it a lot, keep it in mind and you will soon find tons of real life situations where this is useful.</p>
<p>Check out <a href="http://people.apache.org/~pmuellr/weinre/docs/latest/Installing.html" target="_blank" rel="external">the docs</a> for more info.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://people.apache.org/~pmuellr/weinre/docs/latest/Home.html">Weinre</a> is a great remote web debugging tool. It allows to you to quickly setup a ‘chrome dev tools’-like interface for any of your app. It comes in really handy when debugging an app on a device that does not have advanced debugging tools, think mobile, smart TVs, wearables and so on ..</p>
<p>Weinre is free, open source and runs on Node.</p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
      <category term="Debugging" scheme="http://klugjo.github.io/tags/Debugging/"/>
    
      <category term="Tools" scheme="http://klugjo.github.io/tags/Tools/"/>
    
      <category term="Weinre" scheme="http://klugjo.github.io/tags/Weinre/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Remote JavaScript debugging with JSConsole]]></title>
    <link href="http://klugjo.github.io/2016/03/Remote-JavaScript-debugging-with-jsconsole/"/>
    <id>http://klugjo.github.io/2016/03/Remote-JavaScript-debugging-with-jsconsole/</id>
    <published>2016-03-22T06:21:20.000Z</published>
    <updated>2016-03-22T09:28:34.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://jsconsole.com/" target="_blank" rel="external">JSConsole</a> is one of the easiest way to get your JavaScript logs when your app is executing on a remote platform (Mobile, SmartTV or any web browser based device really). It is free to use and open source.</p>
<a id="more"></a>
<h2 id="Why_use_JSConsole">Why use JSConsole</h2><h3 id="JSConsole_is_really_useful_when:">JSConsole is really useful when:</h3><ul>
<li>You don’t need a complete remote dev tools but just the <code>console.log()</code> outputs</li>
<li>You need a nicely presented console. The font is resizable which makes it really useful when doing a live coding presentation for example.</li>
<li>You need to quickly remote debug something. You can use <a href="http://jsconsole.com/" target="_blank" rel="external">http://jsconsole.com/</a> directly and you don’t have to setup a local server.</li>
<li>You want to see real time log for an app that is being used the other side of the world. You don’t have to be in the same network, which makes it very easy to use with your QA team or client, thousands of kilometers away.</li>
</ul>
<h3 id="JSConsole_is_not_the_right_choice_when:">JSConsole is not the right choice when:</h3><ul>
<li>You want to understand the DOM structure of the app and test some CSS changes.</li>
<li>You want to observe network calls being made</li>
<li>You want to debug JavaScript execution</li>
</ul>
<p>(Note: if you are looking for full featured web debugging, checkout <a href="/2016/03/Remote-Web-Debugging-with-weinre/">weinre</a>)</p>
<h2 id="How_to_get_started">How to get started</h2><p>Here is a straight to the point, step by step guide, on how to get started.</p>
<h3 id="Step_1:_Get_the_JSConsole_&lt;script&gt;_tag:">Step 1: Get the JSConsole <code>&lt;script&gt;</code> tag:</h3><p>Go to <a href="http://jsconsole.com/" target="_blank" rel="external">http://jsconsole.com/</a>.<br>Type <code>:listen</code> in the textbox.<br>Press Enter.</p>
<p>This will print out a <code>&lt;script&gt;</code> tag, something like</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://jsconsole.com/js/remote.js?dc69ca75-55bf-405c-aad8-cbd10262bb17"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Step_2:_Insert_the_script_in_your_code">Step 2: Insert the script in your code</h3><p>In the <code>&lt;head&gt;</code> of your code, add the JSConsole script tag.</p>
<p>Reload or launch your app on the device under test (or simply in your browser).</p>
<p>The logs will start showing on the <a href="http://jsconsole.com/" target="_blank" rel="external">http://jsconsole.com/</a> virtual console</p>
<h3 id="Step_3_(Optional):_Save_the_URL_for_future_use">Step 3 (Optional): Save the URL for future use</h3><p>In the JSConsole, type <code>:listen [Your GUID]</code>. In my example, that would be:</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="built_in">listen</span> dc69ca75<span class="number">-55</span>bf<span class="number">-405</span>c-aad8-cbd10262bb17</span><br></pre></td></tr></table></figure>
<p>See how the URL of the page has changed ? Mine is:</p>
<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http</span>://jsconsole.com/?<span class="number">%3</span>Alisten<span class="number">%20</span>dc69ca75-55bf-405c-aad8-cbd10262bb17</span><br></pre></td></tr></table></figure>
<p>This URL will automatically launch JSConsole and start listening to your app’s logs.</p>
<ul>
<li>Share this URL with your colleagues or friends so that they can see the log as well.</li>
<li>Save it for future use (for example tomorrow, when you want to continue development/debugging).</li>
</ul>
<h2 id="Conclusion">Conclusion</h2><p>Give it a try and see by yourself, JSConsole is really good at what it does. There are so many scenarios where it can be useful.</p>
<p>Check out the <a href="https://github.com/remy/jsconsole" target="_blank" rel="external">Github Repo</a> for more info.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://jsconsole.com/">JSConsole</a> is one of the easiest way to get your JavaScript logs when your app is executing on a remote platform (Mobile, SmartTV or any web browser based device really). It is free to use and open source.</p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
      <category term="Debugging" scheme="http://klugjo.github.io/tags/Debugging/"/>
    
      <category term="JSConsole" scheme="http://klugjo.github.io/tags/JSConsole/"/>
    
      <category term="Tools" scheme="http://klugjo.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Setup ESLint in WebStorm]]></title>
    <link href="http://klugjo.github.io/2016/03/Setup-ESLint-in-WebStorm/"/>
    <id>http://klugjo.github.io/2016/03/Setup-ESLint-in-WebStorm/</id>
    <published>2016-03-20T03:57:06.000Z</published>
    <updated>2016-03-20T04:46:41.000Z</updated>
    <content type="html"><![CDATA[<p>Setting up ESLint in WebStorm turned out to be a bit more complicated (hear time consuming) that I initially thought it would be.</p>
<p>Here are the steps:</p>
<a id="more"></a>
<h2 id="Install_ESLint">Install ESLint</h2><p>Use npm to add ESLint to your project</p>
<figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> eslint</span><br></pre></td></tr></table></figure>
<h2 id="Choose_the_right_plugin">Choose the right plugin</h2><p>WebStorm ships with an <a href="https://www.jetbrains.com/help/webstorm/2016.1/using-javascript-code-quality-tools.html?origin=old_help#installESLint" target="_blank" rel="external">ESLint plugin built in</a>. I suggest you use it. I have tried to use a 3rd party plugin and ran into several issues I have not been to resolve.</p>
<p>In OS X, the plugin is located in:</p>
<p><strong>WebStorm &gt; Preferences &gt; Languages and Frameworks &gt; JavaScript &gt; Code Quality Tools &gt; ESLint</strong></p>
<h2 id="ESLint_plugin_Configuration">ESLint plugin Configuration</h2><p>Go ahead and enable the plugin by clicking the checkbox</p>
<h3 id="Path_to_Node_Interpreter">Path to Node Interpreter</h3><p>Fill in the node path. On OS X, the standard path is <code>/usr/local/bin/node</code>, if you are using <a href="https://github.com/creationix/nvm" target="_blank" rel="external">NVM</a>, it will be something like <code>~/.nvm/versions/node/v5.6.0/bin/node</code>.</p>
<h3 id="Path_to_ESlint">Path to ESlint</h3><p>Fill in the path to ESlint by setting the path to <u>the eslint node package folder installed locally</u>. Do not set the path to the <code>/bin</code> subdirectory like we did with node. I also suggest you <strong>don’t use</strong> a globally installed ESLint package if you have one.</p>
<p>The correct path should look something like <code>&lt;path to project&gt;/node_modules/eslint</code>.</p>
<h3 id="-eslintrc">.eslintrc</h3><p>Use the defaults for the remaining options:</p>
<ul>
<li>let Webstorm search for the <code>.eslintrc</code> file</li>
<li>Additional rules directory remains empty</li>
<li>Extra eslint options remains empty as well</li>
</ul>
<h2 id="ESLint_configuration">ESLint configuration</h2><p>As it is, ESLint does not do much since we have not specified any rules.</p>
<h3 id="Pick_a_Style_Guide">Pick a Style Guide</h3><p>For this example I will be using <a href="https://google.github.io/styleguide/javascriptguide.xml" target="_blank" rel="external">Google’s JavaScript Style Guide</a> and the corresponding <a href="https://github.com/google/eslint-config-google" target="_blank" rel="external">ESLint plugin</a>. <a href="https://github.com/airbnb/javascript" target="_blank" rel="external">Airbnb’s Javascript Style Guide</a> is just as popular so check it out and choose one you like.</p>
<h3 id="Install_the_ESLint_package_locally:">Install the ESLint package locally:</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install </span>--save-dev eslint-<span class="built_in">config</span>-google</span><br></pre></td></tr></table></figure>
<h3 id="Setup_the_-eslintrc">Setup the .eslintrc</h3><p>The ESLint configuration resides in a <code>.eslintrc</code> placed at the root of the project (alongside your <code>package.json</code>).</p>
<p>In the config file, the only thing we need to do is to tell ESLint to use the Google’s style guide:</p>
<figure class="highlight javascript"><figcaption><span>.eslintrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"extends"</span>: <span class="string">"eslint-config-google"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="http://eslint.org/docs/developer-guide/shareable-configs.html#using-a-shareable-config" target="_blank" rel="external">ESLint allows you to remove</a> the <code>eslint-config-</code> prefix so we can simply use:</p>
<figure class="highlight javascript"><figcaption><span>.eslintrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"extends"</span>: <span class="string">"google"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Start_coding_:)">Start coding :)</h2><p>That’s it, you are set. You might have to restart WebStorm if it does not pick up the new configuration immediately but after that you are good to go.</p>
<p>Any problem ? Let me know in the comments. Thanks for reading !</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Setting up ESLint in WebStorm turned out to be a bit more complicated (hear time consuming) that I initially thought it would be.</p>
<p>Here are the steps:</p>]]>
    
    </summary>
    
      <category term="Node" scheme="http://klugjo.github.io/tags/Node/"/>
    
      <category term="WebStorm" scheme="http://klugjo.github.io/tags/WebStorm/"/>
    
      <category term="OS X" scheme="http://klugjo.github.io/tags/OS-X/"/>
    
      <category term="Tools" scheme="http://klugjo.github.io/tags/Tools/"/>
    
      <category term="ESLint" scheme="http://klugjo.github.io/tags/ESLint/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Pure and Impure Functions]]></title>
    <link href="http://klugjo.github.io/2016/03/Pure-and-Impure-Functions/"/>
    <id>http://klugjo.github.io/2016/03/Pure-and-Impure-Functions/</id>
    <published>2016-03-15T08:24:00.000Z</published>
    <updated>2016-03-20T04:51:14.000Z</updated>
    <content type="html"><![CDATA[<p>Quick run through on what pure and impure functions are. </p>
<p>I am looking at adapting one of my current old school MVC project to use Redux for state management. Since Redux makes use of the concept of pure functions, I thought I would lay it down here.<br><a id="more"></a></p>
<h2 id="Pure_Function">Pure Function</h2><h3 id="Definition">Definition</h3><p>A function is <strong>considered pure</strong> if:</p>
<p>a) It always returns the same value when given the same arguments<br>b) It does not modify anything (arguments, state, database, I/O, ..)</p>
<h3 id="Examples_of_Pure_Functions_(in_JavaScript)">Examples of Pure Functions (in JavaScript)</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(x, y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span><span class="params">(array)</span> &#123;</span></span><br><span class="line">    <span class="keyword">return</span> array.<span class="built_in">length</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Impure_Function">Impure Function</h2><h3 id="Definition-1">Definition</h3><p>A function is <strong>considered impure</strong> if it is not pure (!), typically because:</p>
<p>a) it makes use of an external or random value. (It stops being entirely contained and predictable)<br>b) It performs an external operation, in other words it causes side effects</p>
<h3 id="Examples">Examples</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addToX</span><span class="params">(a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + x; <span class="comment">// Use of an external variable</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTime</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(); <span class="comment">// Use of a random/non consistent value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(x,y)</span> </span>&#123;</span><br><span class="line">    updateDatabase(); <span class="comment">// Side Effect</span></span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="The_Big_Deal">The Big Deal</h2><p>The reason why Pure Function are great:</p>
<h3 id="Predictable">Predictable</h3><p>Yep, I know, it’s part of the definition, but using a function and knowing exactly what it does feels so good.</p>
<h3 id="Portable">Portable</h3><p>Pure functions can be reused easily as they do not hold any form of state.</p>
<h3 id="Cacheable">Cacheable</h3><p>Since the result will always be the same, it becomes easy to cache results.</p>
<h3 id="Testable_!">Testable !</h3><p>Last but not least, pure functions are easy and a pleasure to test with automated tests.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Quick run through on what pure and impure functions are. </p>
<p>I am looking at adapting one of my current old school MVC project to use Redux for state management. Since Redux makes use of the concept of pure functions, I thought I would lay it down here.<br>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
      <category term="Software Practices" scheme="http://klugjo.github.io/tags/Software-Practices/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[New Hexo Theme - Clean Blog]]></title>
    <link href="http://klugjo.github.io/2016/03/New-Hexo-Theme-Clean-Blog/"/>
    <id>http://klugjo.github.io/2016/03/New-Hexo-Theme-Clean-Blog/</id>
    <published>2016-03-15T07:23:21.000Z</published>
    <updated>2016-03-15T07:37:04.000Z</updated>
    <content type="html"><![CDATA[<p>I just finished developing an Hexo Theme: <a href="https://github.com/klugjo/hexo-theme-clean-blog" target="_blank" rel="external">Clean Blog</a>. Check out the <a href="http://www.codeblocq.com/assets/projects/hexo-theme-clean-blog/" target="_blank" rel="external">live demo</a>.</p>
<a id="more"></a>
<p>This theme is an Hexo implementation of <a href="http://blackrockdigital.github.io/startbootstrap-clean-blog/index.html" target="_blank" rel="external">Clean Blog</a></p>
<h2 id="Features">Features</h2><ul>
<li>Disqus and Facebook comments</li>
<li>Google Analytics</li>
<li>Cover image for posts and pages</li>
<li>Tags and Categories Support</li>
<li>Responsive Images</li>
<li>Image Gallery</li>
<li>Code syntax highlighting</li>
</ul>
<h2 id="Installation">Installation</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">clone</span> <span class="title">https</span>://github.com/klugjo/hexo-theme-clean-blog.git theme/clean-blog</span><br></pre></td></tr></table></figure>
<p>Then update your blog’s main <code>_config.yml</code> to set the theme to <code>clean-blog</code>:</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Extensions</span></span><br><span class="line"><span class="meta">## Plugins: http:<span class="comment">//hexo.io/plugins/</span></span></span><br><span class="line"><span class="meta">## Themes: http:<span class="comment">//hexo.io/themes/</span></span></span><br><span class="line"><span class="symbol">theme:</span> clean-blog</span><br></pre></td></tr></table></figure>
<h2 id="Configuration">Configuration</h2><h3 id="Menu">Menu</h3><p>The menu is configured in the theme’s <code>_config.yml</code>.</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Header</span></span><br><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  Home:</span> /</span><br><span class="line"><span class="symbol">  Archives:</span> /archives</span><br></pre></td></tr></table></figure>
<p>The object key is the label and the value is the path.</p>
<h3 id="Top_Left_Label">Top Left Label</h3><p>The top left label is configured in the theme’s <code>_config.yml</code>. When clicked it will lead to the Home Page.</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Title <span class="keyword">on</span> top left <span class="keyword">of</span> menu. Leave <span class="keyword">empty</span> <span class="keyword">to</span> use main blog title</span><br><span class="line">menu_title: Configurable Title</span><br></pre></td></tr></table></figure>
<h3 id="Home_Page_cover_image">Home Page cover image</h3><p>The Home Page cover is configured in the theme’s <code>_config.yml</code>. It will be the same for all index type pages.</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># URL of the Home page image</span></span><br><span class="line"><span class="symbol">index_cover:</span> <span class="meta-keyword">/img/</span>home-bg.jpg</span><br></pre></td></tr></table></figure>
<h3 id="Default_post_title">Default post title</h3><p>The default post title (used when no title is specified) is configured in the theme’s <code>_config.yml</code>.</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Default post title</span></span><br><span class="line"><span class="symbol">default_post_title:</span> Untitled</span><br></pre></td></tr></table></figure>
<h3 id="Comments">Comments</h3><p>The comments provider is specified in the theme’s <code>_config.yml</code>. If you specify both a <code>disqus_shortname</code> and a <code>facebook.appid</code> there will be 2 sets of comment per post. So choose one.</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Comments. Choose one by filling up the information</span></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Disqus comments</span></span><br><span class="line"><span class="attr">  disqus_shortname:</span> klugjotest</span><br><span class="line">  <span class="comment"># Facebook comments</span></span><br><span class="line"><span class="attr">  facebook:</span></span><br><span class="line"><span class="attr">    appid:</span> <span class="number">123456789012345</span></span><br><span class="line"><span class="attr">    comment_count:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">    comment_colorscheme:</span> light</span><br></pre></td></tr></table></figure>
<h3 id="Google_Analytics">Google Analytics</h3><p>The Google Analytics Tracking ID is configured in the theme’s <code>_config.yml</code>.</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Google Analytics Tracking ID</span></span><br><span class="line"><span class="symbol">google_analytics:</span></span><br></pre></td></tr></table></figure>
<h3 id="Social_Account">Social Account</h3><p>Setup the links to your social pages in the theme’s <code>_config.yml</code>. Links are in the footer.</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Social Accounts</span></span><br><span class="line"><span class="symbol">twitter_url:</span></span><br><span class="line"><span class="symbol">facebook_url:</span></span><br><span class="line"><span class="symbol">github_url:</span> https:<span class="comment">//github.com/klugjo/hexo-theme-clean-blog</span></span><br></pre></td></tr></table></figure>
<h3 id="Author">Author</h3><p>The post’s author is specified in the posts front-matter:</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">author:</span> Klug Jo</span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<h3 id="Post’s_Cover_Image">Post’s Cover Image</h3><p>By default, posts will use the home page cover image. You can specify a custom cover in the front-matter:</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">cover:</span> <span class="meta-keyword">/assets/</span>contact-bg.jpg</span><br></pre></td></tr></table></figure>
<h2 id="Creator">Creator</h2><p>This theme was created by <a href="https://github.com/BlackrockDigital" target="_blank" rel="external">Blackrock Digital</a> and adapted for Hexo by <a href="http://www.codeblocq.com/" target="_blank" rel="external">myself</a>.</p>
<p>Hope you enjoy it, the theme should be easy enough to customize and modify to fit your needs. Checkout <a href="/2016/03/Create-an-Hexo-Theme-Part-1-Index/">my tutorial on building Hexo themes</a> if you need information on how themes are built.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I just finished developing an Hexo Theme: <a href="https://github.com/klugjo/hexo-theme-clean-blog">Clean Blog</a>. Check out the <a href="http://www.codeblocq.com/assets/projects/hexo-theme-clean-blog/">live demo</a>.</p>]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://klugjo.github.io/tags/Hexo/"/>
    
      <category term="Theme" scheme="http://klugjo.github.io/tags/Theme/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Create an Hexo Theme - Part 3: Comments, Analytics and Widgets]]></title>
    <link href="http://klugjo.github.io/2016/03/Create-an-Hexo-Theme-Part-3-Comments-Analytics-and-Widgets/"/>
    <id>http://klugjo.github.io/2016/03/Create-an-Hexo-Theme-Part-3-Comments-Analytics-and-Widgets/</id>
    <published>2016-03-11T01:20:09.000Z</published>
    <updated>2016-03-13T13:54:09.000Z</updated>
    <content type="html"><![CDATA[<p>In this multi part tutorial, you will learn how to create an <a href="https://hexo.io/docs/themes.html" target="_blank" rel="external">Hexo Theme</a> from scratch. </p>
<p>In <a href="/2016/03/Create-an-Hexo-Theme-Part-1-Index/">Part 1</a> and <a href="/2016/03/Create-an-Hexo-Theme-Part-2-Other-Pages/">Part 2</a>, we have created all the pages of the blog. In this last section, we are going to add <a href="https://disqus.com/" target="_blank" rel="external">Disqus comments</a> to our posts, implement <a href="https://www.google.com.sg/analytics/" target="_blank" rel="external">Google Analytics</a> and complete the sidebar’s widgets.</p>
<a id="more"></a>
<h2 id="Links_to_other_sections">Links to other sections</h2><ul>
<li><a href="/2016/03/Create-an-Hexo-Theme-Part-1-Index/">Part 1: Setting up the project and creating the blog’s main index page</a></li>
<li><a href="/2016/03/Create-an-Hexo-Theme-Part-2-Other-Pages/">Part 2: Finishing up the remaining pages</a></li>
<li><a href="/2016/03/Create-an-Hexo-Theme-Part-3-Comments-Analytics-and-Widgets/">Part 3: Wrapping up with Disqus comments, Google Analytics and the widgets</a></li>
</ul>
<h2 id="Disqus_Comments">Disqus Comments</h2><p>I have already written a blog post on <a href="/2015/12/Add-Disqus-comments-in-Hexo/">how to implement Disqus comments in Hexo</a>. Please refer to it if you need more information but here is how to do it:</p>
<p>The first step is to get a Disqus UID to test the comments, you can get it from your Disqus account here:</p>
<p><img src="https://s3.amazonaws.com/klugjo.github.io/add-disqus-comments-hexo-unique-name.jpg" alt="Disqus Unique Identifier"></p>
<p>Then there are three things that need to be implemented, the theme config for disqus, the comments placeholder and the Disqus script. Let’s get going.</p>
<h3 id="Theme_config">Theme config</h3><p>We want the Disqus UID to be configurable, let’s add an entry to the theme’s <code>_config.yml</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Disqus Comments Shortname</span><br><span class="line">disqus_shortname: klugjoTest</span><br></pre></td></tr></table></figure>
<h3 id="Comments_placeholder">Comments placeholder</h3><p>We are going to add comments to our <code>page</code> and <code>post</code> details pages. As always, let’s create a new partial view <code>layout/_partial/comments.ejs</code> and insert it at the end of our <code>layout/_partial/article-full.ejs</code>.</p>
<figure class="highlight html"><figcaption><span>layout/_partial/comments.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blog-post"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   [...]</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Comments --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">comments</span>') %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Disqus is exepecting a <code>div#disqus_thread</code> element, here is the official code from the documentation</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"disqus_thread"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span>Please enable JavaScript to view the <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"//disqus.com/?ref_noscript"</span>&gt;</span>comments powered by Disqus.<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Let’s integrate this into our comments partial:</p>
<figure class="highlight html"><figcaption><span>layout/_partial/comments.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">page.comments</span> &amp;&amp; <span class="attr">theme.disqus_shortname</span>)&#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blog-post-comments"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Comments:<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"disqus_thread"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">noscript</span>&gt;</span>Please enable JavaScript to view the <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"//disqus.com/?ref_noscript"</span>&gt;</span>comments powered by Disqus.<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>
<p>First we are checking that comments are ON and that our disqus UID has been set. Then we are placing the Disqus markup code inside a container.</p>
<p>Here is the CSS code I have used for that container:</p>
<figure class="highlight css"><figcaption><span>source/css/blog.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.blog-post-comments</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Disqus_script">Disqus script</h3><p>Before we can test, we need to add the Disqus script which contains all the magic. Place it with all the other scripts at the end of <code>layout/_partial/after-footer.ejs</code></p>
<figure class="highlight html"><figcaption><span>layout/_partial/after-footer.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Disqus Comments --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">theme.disqus_shortname</span>)&#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        <span class="keyword">var</span> disqus_shortname = <span class="string">'&lt;%= theme.disqus_shortname %&gt;'</span>;</span><br><span class="line"></span><br><span class="line">        (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> dsq = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">            dsq.type = <span class="string">'text/javascript'</span>;</span><br><span class="line">            dsq.async = <span class="literal">true</span>;</span><br><span class="line">            dsq.src = <span class="string">'//'</span> + disqus_shortname + <span class="string">'.disqus.com/&lt;% if (page.comments)&#123; %&gt;embed.js&lt;% &#125; else &#123; %&gt;count.js&lt;% &#125; %&gt;'</span>;</span><br><span class="line">            (<span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>] || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]).appendChild(dsq);</span><br><span class="line">        &#125;());</span><br><span class="line">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>
<p>The script is taken from the <a href="https://help.disqus.com/customer/portal/articles/472097-universal-embed-code" target="_blank" rel="external">docs</a> and the Disqus UID was parameterized.</p>
<p>Go ahead and test that everything is working as expected.</p>
<h2 id="Google_Analytics">Google Analytics</h2><p>Google Analytics implementation follows the same principle as Disqus so I will move through it quickly. </p>
<p>I have another <a href="/2015/12/Add-Google-Analytics-to-your-hexo-blog/">blog post on that subject</a>.</p>
<h3 id="Setup_the_tracking_ID_in_the_theme’s_config">Setup the tracking ID in the theme’s config</h3><p>Get your google analytics tracking ID from your account and add a new entry to the config.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Google Analytics Tracking ID</span><br><span class="line">google_analytics: UA-83746351-2</span><br></pre></td></tr></table></figure>
<h3 id="Create_a_new_partial">Create a new partial</h3><p>Create a new partial view <code>layout/_partial/google-analytic.ejs</code></p>
<figure class="highlight html"><figcaption><span>layout/_partial/google-analytic.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">theme.google_analytics</span>)&#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line">        (<span class="function"><span class="keyword">function</span>(<span class="params">i,s,o,g,r,a,m</span>)</span>&#123;i[<span class="string">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    (i[r].q=i[r].q||[]).push(<span class="built_in">arguments</span>)&#125;,i[r].l=<span class="number">1</span>*<span class="keyword">new</span> <span class="built_in">Date</span>();a=s.createElement(o),</span><br><span class="line">                m=s.getElementsByTagName(o)[<span class="number">0</span>];a.async=<span class="number">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><br><span class="line">        &#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>,<span class="string">'script'</span>,<span class="string">'//www.google-analytics.com/analytics.js'</span>,<span class="string">'ga'</span>);</span><br><span class="line"></span><br><span class="line">        ga(<span class="string">'create'</span>, <span class="string">'&lt;%= theme.google_analytics %&gt;'</span>, <span class="string">'auto'</span>);</span><br><span class="line">        ga(<span class="string">'send'</span>, <span class="string">'pageview'</span>);</span><br><span class="line"></span><br><span class="line">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>
<p>This is a simple copy paste of <a href="https://support.google.com/analytics/answer/1008080?hl=en" target="_blank" rel="external">Google Analytics Tracking code</a> with a parameterized ID.</p>
<h3 id="Integrate_the_partial">Integrate the partial</h3><p>We want our tracking code on all pages, and there is not best place to put it on a page. Let’s add it at the end of our <code>&lt;head&gt;&lt;/head&gt;</code>:</p>
<figure class="highlight html"><figcaption><span>layout/_partial/head.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    [...]</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Google Analytics --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">google-analytics</span>') %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>And we are done !</p>
<h2 id="Widgets">Widgets</h2><p>At the moment our widgets are just a bunch of hardcoded, static HTML inside <code>sidebar.ejs</code>. Let’s fix that.</p>
<h3 id="Configuration">Configuration</h3><p>Let’s start with the configuration. </p>
<p>We are going to create two widgets, one <strong>About</strong> widget and one <strong>Tags</strong> widget. I want the JavaScript object version of the config to look like</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    widgets: &#123;</span><br><span class="line">        about: <span class="string">"Here goes the about text"</span>,</span><br><span class="line">        tags: <span class="literal">true</span> <span class="comment">// Or any additional configuration the widget needs</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This is how it translates to <strong>YML</strong> inside our theme’s configuration file:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Widgets List</span><br><span class="line">widgets:</span><br><span class="line">  about: This blog is based off the official bootstrap blog template. Checkout the corresponding tutorial at &lt;a href=&quot;http://www.codeblocq.com&quot;&gt;http://www.codeblocq.com&lt;/a</span><br><span class="line">  tags: true</span><br></pre></td></tr></table></figure>
<h3 id="Sidebar_Code">Sidebar Code</h3><p>Our sidebar which is the placeholder of all our widgets, will need to iterate through all the widgets in the configuration and render them appropriately:</p>
<p>This what the sidebar EJS template now looks like:</p>
<figure class="highlight html"><figcaption><span>layout/_partial/sidebar.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">for</span>(<span class="attr">var</span> <span class="attr">widget</span> <span class="attr">in</span> <span class="attr">theme.widgets</span>)&#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">widget</span>/' + <span class="attr">widget</span>) %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125;; %&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="First_Widget:_About">First Widget: About</h3><p>Let’s build our first widget inside a new partial called <code>layout/_partial/widget/about.ejs</code>. </p>
<p>The code is copy pasted from the original bootstrap template and the text now comes from the configuration.</p>
<figure class="highlight html"><figcaption><span>layout/_partial/widget/about.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">theme.widgets.about</span>)&#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar-module sidebar-module-inset"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>About<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">%-</span> <span class="attr">theme.widgets.about</span> %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Second_Widget:_Tags">Second Widget: Tags</h3><p>Let’s do something slighty more advanced for this widget. Display a paragraph with all the tags used in the blog, separated by whitespaces and with a font size proportional to the number of times the tag is used.</p>
<p>Here is the code in <code>layout/_partial/widget/tags.ejs</code></p>
<figure class="highlight html"><figcaption><span>layout/_partial/widget/tags.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">theme.widgets.tags</span> &amp;&amp; <span class="attr">site.tags.length</span>)&#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar-module"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Tags<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%</span> <span class="attr">site.tags.sort</span>('<span class="attr">name</span>')<span class="attr">.each</span>(<span class="attr">function</span>(<span class="attr">item</span>)&#123; %&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- config.root %&gt;&lt;%- item.path %&gt;"</span> <span class="attr">style</span>=<span class="string">"font-size: &lt;%- Math.min(item.posts.length * 2 + 13, 30) %&gt;px"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">item.name</span> %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%</span> &#125;); %&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>site.tags</code> gives us access to all the tags</li>
<li><code>site.tags.sort(&#39;name&#39;)</code> sorts all the tags by alphabetical order</li>
<li><code>item.path</code> correspond to the relative URL to the archive page for that tag</li>
<li><code>item.posts.length</code> gives you the number of time a tag is used</li>
<li><code>item.name</code> is the Tag label</li>
</ul>
<p>I chose <strong>13 + (tag occurence * 2)</strong> in pixels (capped at 30px) for the <code>font-size</code> but feel free to use what you want. </p>
<h2 id="The_End">The End</h2><p>That’s the end of this tutorial, I hope you have learnt something interesting from it.</p>
<p>Here are a few things you can do if you want to develop it further:</p>
<ul>
<li>Finish the implementation of the head by parameterizing the <code>&lt;title&gt;</code> and all the <a href="http://ogp.me/" target="_blank" rel="external">Open Graph</a> properties.</li>
<li>Add more widgets, for example a <a href="https://github.com/hexojs/hexo-theme-light/blob/master/layout/_widget/search.ejs" target="_blank" rel="external">search widget</a> or a <a href="https://github.com/hexojs/hexo-theme-light/blob/master/layout/_widget/recent_posts.ejs" target="_blank" rel="external">recent posts widget</a>.</li>
<li>Run <a href="https://github.com/hexojs/hexo-theme-unit-test" target="_blank" rel="external">Hexo Theme Unit Tests</a> to make sure that everything is in order.</li>
<li>Publish your theme on the <a href="https://hexo.io/themes/" target="_blank" rel="external">hexo website’s theme gallery</a>.</li>
<li>Check out my other <a href="/tags/Hexo/">Hexo tutorials</a> to improve your blog.</li>
<li>Check out <a href="https://github.com/cgmartin/hexo-theme-bootstrap-blog" target="_blank" rel="external">hexo-theme-bootstrap-blog</a> which is an implementation of the same bootstrap template.</li>
<li>Implement your own theme from scratch.</li>
</ul>
<p>Thanks for reading ! Really appreciate your comments, corrections, suggestions in the comments.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>In this multi part tutorial, you will learn how to create an <a href="https://hexo.io/docs/themes.html">Hexo Theme</a> from scratch. </p>
<p>In <a href="/2016/03/Create-an-Hexo-Theme-Part-1-Index/">Part 1</a> and <a href="/2016/03/Create-an-Hexo-Theme-Part-2-Other-Pages/">Part 2</a>, we have created all the pages of the blog. In this last section, we are going to add <a href="https://disqus.com/">Disqus comments</a> to our posts, implement <a href="https://www.google.com.sg/analytics/">Google Analytics</a> and complete the sidebar’s widgets.</p>]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://klugjo.github.io/tags/Hexo/"/>
    
      <category term="Disqus" scheme="http://klugjo.github.io/tags/Disqus/"/>
    
      <category term="Analytics" scheme="http://klugjo.github.io/tags/Analytics/"/>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
      <category term="Theme" scheme="http://klugjo.github.io/tags/Theme/"/>
    
      <category term="Bootstrap" scheme="http://klugjo.github.io/tags/Bootstrap/"/>
    
      <category term="Template" scheme="http://klugjo.github.io/tags/Template/"/>
    
      <category term="EJS" scheme="http://klugjo.github.io/tags/EJS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Create an Hexo Theme - Part 2: Other Pages]]></title>
    <link href="http://klugjo.github.io/2016/03/Create-an-Hexo-Theme-Part-2-Other-Pages/"/>
    <id>http://klugjo.github.io/2016/03/Create-an-Hexo-Theme-Part-2-Other-Pages/</id>
    <published>2016-03-09T11:34:13.000Z</published>
    <updated>2016-03-13T09:45:25.000Z</updated>
    <content type="html"><![CDATA[<p>In this multi part tutorial, you will learn how to create an <a href="https://hexo.io/docs/themes.html" target="_blank" rel="external">Hexo Theme</a> from scratch. </p>
<p>In <a href="/2016/03/Create-an-Hexo-Theme-Part-1-Index/">Part 1</a>, we have setup the project and the Home Page. In this section, we are going to build on what we have learnt to finish up all the remaining pages.</p>
<a id="more"></a>
<h2 id="Links_to_other_sections">Links to other sections</h2><ul>
<li><a href="/2016/03/Create-an-Hexo-Theme-Part-1-Index/">Part 1: Setting up the project and creating the blog’s main index page</a></li>
<li><a href="/2016/03/Create-an-Hexo-Theme-Part-2-Other-Pages/">Part 2: Finishing up the remaining pages</a></li>
<li><a href="/2016/03/Create-an-Hexo-Theme-Part-3-Comments-Analytics-and-Widgets/">Part 3: Wrapping up with Disqus comments, Google Analytics and the widgets</a></li>
</ul>
<h2 id="The_Post_Detail_page">The Post Detail page</h2><p>Let’s continue where we left off in part 1 and create the post detail page.</p>
<p>As we have seen, to render the detail page, Hexo will look for a <code>post.ejs</code> file in our <code>/layout/</code> folder.</p>
<p>Here is my post.ejs:</p>
<figure class="highlight html"><figcaption><span>layout/post.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">article-full</span>', &#123;<span class="attr">item:</span> <span class="attr">page</span>&#125;) %&gt;</span></span><br></pre></td></tr></table></figure>
<p>To keep the code organised, the actual code is deferred to a <code>_partial/article-full.ejs</code> that we are going to create now:</p>
<figure class="highlight html"><figcaption><span>layout/_partial/article-full.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blog-post"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Title --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"blog-post-title"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- config.root %&gt;&lt;%- item.path %&gt;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%-</span> <span class="attr">item.title</span> || <span class="attr">item.link</span>%&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Date and Author --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"blog-post-meta"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%=</span> <span class="attr">item.date.format</span>(<span class="attr">config.date_format</span>) %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">item.author</span>) &#123; %&gt;</span></span><br><span class="line">            by <span class="tag">&lt;<span class="name">%-</span> <span class="attr">item.author</span> %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">item.content</span> %&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Tags and Categories links --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">article-tags</span>', &#123;<span class="attr">item:</span> <span class="attr">item</span>&#125;) %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">article-categories</span>', &#123;<span class="attr">item:</span> <span class="attr">item</span>&#125;) %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>This template is almost the same as <code>_partial/article-excerpt.ejs</code>, except that:</p>
<ul>
<li>We are displaying the full content with <code>&lt;%- item.content %&gt;</code> and not the excerpt.</li>
<li>There are two additional partial views at the bottom, one for tags and one for categories. We will jump into these right now.</li>
</ul>
<h3 id="Post_Tags">Post Tags</h3><p>Let’s create the partial that will render the list of tags for a post: <code>layout/_partial/article-tags.ejs</code>. </p>
<p>What we want is a list of #tags with links to the corresponding ‘tag page’ which will display all the posts with that tag. </p>
<figure class="highlight"><figcaption><span>layout/_partial/article-tags.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (item.tags &amp;&amp; item.tags.length)&#123; %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    var tags = [];</span><br><span class="line">    item.tags.forEach(function(tag)&#123;</span><br><span class="line">        tags.push('&lt;a href="' + config.root + tag.path + '"&gt;#' + tag.name + '&lt;/a&gt;');</span><br><span class="line">    &#125;);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;div class="blog-tags-container"&gt;</span><br><span class="line">    &lt;span class="glyphicon glyphicon-tags"&gt;&lt;/span&gt;</span><br><span class="line">    &lt;%- tags.join(' ') %&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>
<p>Nothing complicated, we are enumerating through all the tags in <code>post.tags</code> and displaying them one after the other. I have added a hashtag before each tag and an icon before the list for good measure.</p>
<h3 id="Post_Categories">Post Categories</h3><p>The <code>layout/_partial/article-categories.ejs</code> partial is very similar:</p>
<figure class="highlight"><figcaption><span>layout/_partial/article-categories.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (item.categories &amp;&amp; item.categories.length)&#123; %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    var categories = [];</span><br><span class="line">    item.categories.forEach(function(category)&#123;</span><br><span class="line">        categories.push('&lt;a href="' + config.root + category.path + '"&gt;' + category.name + '&lt;/a&gt;');</span><br><span class="line">    &#125;);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;div class="blog-categories-container"&gt;</span><br><span class="line">    &lt;span class="glyphicon glyphicon-folder-open"&gt;&lt;/span&gt;</span><br><span class="line">    &lt;%- categories.join(' / ') %&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>
<p>No explanation required.</p>
<h3 id="Post_CSS">Post CSS</h3><p>As you may have noticed, there are 2 new CSS classes used for tags and categories styling. Here is the code for it, added to <code>blog.css</code>:</p>
<figure class="highlight css"><figcaption><span>source/css/blog.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.blog-tags-container</span>, <span class="selector-class">.blog-categories-container</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blog-tags-container</span> <span class="selector-tag">span</span><span class="selector-class">.glyphicon</span>, <span class="selector-class">.blog-categories-container</span> <span class="selector-tag">span</span><span class="selector-class">.glyphicon</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="The_detail_page_for_page_type_content">The detail page for page type content</h2><p>This is an easy one. The ‘page type’ pages will be the same as ‘post type’ pages. Feel free to customise it as an exercise, but here is mine:</p>
<figure class="highlight html"><figcaption><span>layout/page.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">article-full</span>', &#123;<span class="attr">item:</span> <span class="attr">page</span>&#125;) %&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="The_Archive_page">The Archive page</h2><p>The archive page will display a list of posts in a more condensed way than the index page. The base will be the same as the index though:</p>
<figure class="highlight html"><figcaption><span>layout/archive.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">page.posts.each</span>(<span class="attr">function</span>(<span class="attr">item</span>)&#123; %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">article-archive</span>', &#123;<span class="attr">item:</span> <span class="attr">item</span>&#125;) %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125;); %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">pagination</span>') %&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="The_article-archive_partial_view">The article-archive partial view</h3><p>As always, the actual work is in the partial view. I used <code>article-excerpt</code> as the base and stripped it down to just the title, date and author:</p>
<figure class="highlight html"><figcaption><span>layout/_partial/article-archive.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blog-post"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Title --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"blog-post-title-archive"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- config.root %&gt;&lt;%- item.path %&gt;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%-</span> <span class="attr">item.title</span> || <span class="attr">item.link</span>%&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Date and Author --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"blog-post-meta"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%=</span> <span class="attr">item.date.format</span>(<span class="attr">config.date_format</span>) %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">item.author</span>) &#123; %&gt;</span></span><br><span class="line">            by <span class="tag">&lt;<span class="name">%-</span> <span class="attr">item.author</span> %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Careful eyes will have noticed the new CSS class that I have created for archive titles (they were too big for my liking):</p>
<figure class="highlight css"><figcaption><span>source/css/blog.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.blog-post-title-archive</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Tags_and_Categories_Pages">Tags and Categories Pages</h2><p>The last two pages we need to work are for the list of posts that correspond to a tag and a category. Now if you remember well:</p>
<table>
<thead>
<tr>
<th>Template</th>
<th>Fallback</th>
<th>Page Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>archive</code></td>
<td><code>index</code></td>
<td>This is the archive page. It will display a list of all the posts in our blog with just titles and links to the detail page.</td>
</tr>
<tr>
<td><code>category</code></td>
<td><code>archive</code></td>
<td>This is the category page. Similar to the archive page but filtered for one category.</td>
</tr>
<tr>
<td><code>tag</code></td>
<td><code>archive</code></td>
<td>This is the tag page. Similar to the archive page page but filtered for one tag.</td>
</tr>
</tbody>
</table>
<p>The fallback page for our <code>tag.ejs</code> and <code>category.ejs</code> is <code>archive.ejs</code>. Because I don’t see any major difference in between these 3 pages, we are just going to use the fallback to <code>archive.ejs</code>. Less code to write, less duplicate code, easier to maintain.</p>
<p>But in order to differentiate our 3 pages, we are going to add a title to the archive page:</p>
<figure class="highlight html"><figcaption><span>layout/archive.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span></span><br><span class="line">    <span class="attr">var</span> <span class="attr">title</span> = '';</span><br><span class="line">    <span class="attr">if</span> (<span class="attr">page.category</span>) <span class="attr">title</span> = <span class="attr">page.category</span>;</span><br><span class="line">    <span class="attr">if</span> (<span class="attr">page.tag</span>) <span class="attr">title</span> = <span class="attr">page.tag</span>;</span><br><span class="line">    <span class="attr">if</span> (<span class="attr">page.archive</span>)&#123;</span><br><span class="line">        <span class="attr">if</span> (<span class="attr">page.year</span>) <span class="attr">title</span> = <span class="attr">page.year</span> + (<span class="attr">page.month</span> ? '/' + <span class="attr">page.month</span> <span class="attr">:</span> '');</span><br><span class="line">        <span class="attr">else</span> <span class="attr">title</span> = "<span class="attr">Archives</span>";</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">title</span>) &#123; %&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"blog-archive-title"</span>&gt;</span><span class="tag">&lt;<span class="name">%-</span> <span class="attr">title</span> %&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">page.posts.each</span>(<span class="attr">function</span>(<span class="attr">item</span>)&#123; %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">article-archive</span>', &#123;<span class="attr">item:</span> <span class="attr">item</span>&#125;) %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125;); %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">pagination</span>') %&gt;</span></span><br></pre></td></tr></table></figure>
<p>Now we have a nice title that describes what our archive page is for.</p>
<p>And here is the CSS that goes with it:</p>
<figure class="highlight css"><figcaption><span>source/css/blog.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.blog-archive-title</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This section of the tutorial was pretty straightforward, simply building up on concepts defined in <a href="/2016/03/Create-an-Hexo-Theme-Part-1-Index/">Part 1</a>. I encourage to play around with the theme and hack it to your tastes.</p>
<p>In <a href="/2016/03/Create-an-Hexo-Theme-Part-3-Comments-Analytics-and-Widgets/">Part 3</a>, we will add a comment section, analytics, widgets and polishing things up. See you there !</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>In this multi part tutorial, you will learn how to create an <a href="https://hexo.io/docs/themes.html">Hexo Theme</a> from scratch. </p>
<p>In <a href="/2016/03/Create-an-Hexo-Theme-Part-1-Index/">Part 1</a>, we have setup the project and the Home Page. In this section, we are going to build on what we have learnt to finish up all the remaining pages.</p>]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://klugjo.github.io/tags/Hexo/"/>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
      <category term="Theme" scheme="http://klugjo.github.io/tags/Theme/"/>
    
      <category term="Bootstrap" scheme="http://klugjo.github.io/tags/Bootstrap/"/>
    
      <category term="Template" scheme="http://klugjo.github.io/tags/Template/"/>
    
      <category term="EJS" scheme="http://klugjo.github.io/tags/EJS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Create an Hexo Theme - Part 1: Index]]></title>
    <link href="http://klugjo.github.io/2016/03/Create-an-Hexo-Theme-Part-1-Index/"/>
    <id>http://klugjo.github.io/2016/03/Create-an-Hexo-Theme-Part-1-Index/</id>
    <published>2016-03-08T04:17:41.000Z</published>
    <updated>2016-03-17T07:50:55.000Z</updated>
    <content type="html"><![CDATA[<p>In this multi part tutorial, you will learn how to create an <a href="https://hexo.io/docs/themes.html" target="_blank" rel="external">Hexo Theme</a> from scratch. I really love Hexo and use it everyday; unfortunately, as of today, the documentation for theme creation is pretty slim. Here is my attempt at fixing that.</p>
<a id="more"></a>
<h2 id="Links_to_other_sections">Links to other sections</h2><ul>
<li><a href="/2016/03/Create-an-Hexo-Theme-Part-1-Index/">Part 1: Setting up the project and creating the blog’s main index page</a></li>
<li><a href="/2016/03/Create-an-Hexo-Theme-Part-2-Other-Pages/">Part 2: Finishing up the remaining pages</a></li>
<li><a href="/2016/03/Create-an-Hexo-Theme-Part-3-Comments-Analytics-and-Widgets/">Part 3: Wrapping up with Disqus comments, Google Analytics and the widgets</a></li>
</ul>
<h2 id="Prerequisites">Prerequisites</h2><ul>
<li>The very basics of blogging with hexo. If you are completely new, <a href="https://hexo.io/docs/index.html" target="_blank" rel="external">check the getting started guide on hexo.io</a>.</li>
<li>Some knowledge of Bootstrap</li>
<li>Some knowledge of a JavaScript templating engine (we will use EJS)</li>
</ul>
<h2 id="Project_Description">Project Description</h2><p>This project is all about creating a theme for Hexo and understanding in details how the Hexo engine </p>
<p>Since I don’t want to lose too much time on the HTML and CSS parts we are going to recreate the following theme in Hexo: <a href="http://getbootstrap.com/examples/blog/" target="_blank" rel="external">http://getbootstrap.com/examples/blog/</a>. It is one of the standard <a href="http://getbootstrap.com/getting-started/#examples-custom" target="_blank" rel="external">Getting Started Template Examples</a> in the Boostrap documentation.</p>
<p>We are going to reuse the CSS and copy paste the HTML, piece by piece, until we have achieved what we want.</p>
<p>If you get lost or are only interested in the code, <a href="https://github.com/klugjo/bootstrap-blog-hexo" target="_blank" rel="external">it is on github</a>.</p>
<h2 id="Project_setup">Project setup</h2><h3 id="Create_a_new_hexo_blog">Create a new hexo blog</h3><p>Let’s get started with a brand new hexo installation.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create a new folder</span></span><br><span class="line">mkdir hexo-theme-creation </span><br><span class="line"><span class="built_in">cd</span> hexo-theme-creation</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialise Hexo</span></span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<h3 id="Create_the_theme_folder">Create the theme folder</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Enter the theme folder</span></span><br><span class="line"><span class="built_in">cd</span> themes</span><br><span class="line"></span><br><span class="line"><span class="comment"># bootstrap-blog-hexo is also going to be the name of our theme</span></span><br><span class="line">mkdir bootstrap-blog-hexo</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong> If you want to save the theme to git (as you should), initialise git inside <code>/themes/bootstrap-blog-hexo/</code>. </p>
<h3 id="Folder_structure">Folder structure</h3><p>Here are the files and folders we will need to get started:</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|-- <span class="keyword">layout</span> <span class="comment">// .ejs templates </span></span><br><span class="line">|-- <span class="keyword">source</span> <span class="comment">// source files (CSS, scripts)</span></span><br><span class="line">|-- _config.yml</span><br></pre></td></tr></table></figure>
<p>Create these 2 folders and the <code>_config.yml</code> file.</p>
<ul>
<li><code>/layout/</code> will <a href="https://hexo.io/docs/themes.html#layout" target="_blank" rel="external">contain all our EJS templates</a></li>
<li><code>/source/</code> will <a href="https://hexo.io/docs/themes.html#source" target="_blank" rel="external">contain our assets</a> (CSS files, external scripts and libraries)</li>
<li><code>_config.yml</code> contains our <a href="https://hexo.io/docs/themes.html#config-yml" target="_blank" rel="external">theme configuration</a>. Leave it empty for now.</li>
</ul>
<h3 id="Copy_the_bootstrap_blog_assets_over">Copy the bootstrap blog assets over</h3><p>In our source folder, copy all the assets we need from the <a href="http://getbootstrap.com/examples/blog/" target="_blank" rel="external">bootstrap blog template</a>. View source from your browser and copy everything over or <a href="https://s3.amazonaws.com/klugjo.github.io/source-hex-blog-creation.zip" target="_blank" rel="external">download this package</a> and extract it in your source folder.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">|-- layout </span><br><span class="line">|-- source </span><br><span class="line">    |-- bootstrap <span class="comment">// Copy the boostrap library files here </span></span><br><span class="line">    |-- css <span class="comment">// Copy the blog's css file here</span></span><br><span class="line">    |-- favicon</span><br><span class="line">        |-- favicon.ico <span class="comment">// Your choice of favicon</span></span><br><span class="line">    |-- js <span class="comment">// Copy the blog's js file here</span></span><br><span class="line">|-- _config.yml</span><br></pre></td></tr></table></figure>
<h2 id="Basics_of_Hexo">Basics of Hexo</h2><p>Before we write our first template file, let’s look at the basic of Hexo blog generation.</p>
<h3 id="Page_types">Page types</h3><p>Corresponds to the <a href="https://hexo.io/docs/templates.html" target="_blank" rel="external">6 types of pages</a> we can define in our theme, every singe HTML page generated in the public folder belongs to one of these templates:</p>
<table>
<thead>
<tr>
<th>Template</th>
<th>Fallback</th>
<th>Page Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>index</code></td>
<td>None</td>
<td>This the home page of the blog, the main entry point. In our case it will display a list of blog excerpts.</td>
</tr>
<tr>
<td><code>post</code></td>
<td><code>index</code></td>
<td>This is the detail page for posts. Here we will display only one post in full, with a comment section.</td>
</tr>
<tr>
<td><code>page</code></td>
<td><code>index</code></td>
<td>This is the detail page for pages. Same as post but for ‘page type’ posts. </td>
</tr>
<tr>
<td><code>archive</code></td>
<td><code>index</code></td>
<td>This is the archive page. It will display a list of all the posts in our blog with just titles and links to the detail page.</td>
</tr>
<tr>
<td><code>category</code></td>
<td><code>archive</code></td>
<td>This is the category page. Similar to the archive page but filtered for one category.</td>
</tr>
<tr>
<td><code>tag</code></td>
<td><code>archive</code></td>
<td>This is the tag page. Similar to the archive page page but filtered for one tag.</td>
</tr>
</tbody>
</table>
<p>In this part of the tutorial we will build the <code>index</code>.</p>
<p>During the generation is Hexo will look for files named <code>index.ejs</code>, <code>post.ejs</code>, <code>page.ejs</code> and so on. These templates are then rendered to create the static HTML pages.</p>
<h3 id="Common_Layout">Common Layout</h3><p>Hexo supports the use of a <a href="https://hexo.io/docs/templates.html#Layouts" target="_blank" rel="external">common layout file</a> that will be used by all the templates above.</p>
<p>This file has to be named <code>layout.ejs</code>. It acts as a wrapper around the content rendered by the different page type templates above.</p>
<p>In our theme, the <code>layout</code> will contain: the <code>&lt;html&gt;</code> and <code>&lt;head&gt;</code> tags, the header and menu as well as the footer and the sidebar. Basically all the elements that are common to all pages.</p>
<p>The different page templates will only be responsible for creating the actual content, that will be placed inside our main container.</p>
<h3 id="Variables">Variables</h3><p>Inside all our templates, we have access to some <a href="https://hexo.io/docs/variables.html" target="_blank" rel="external">variables that are injected by the hexo engine</a>. Here are some of them:</p>
<h4 id="-_Site">- Site</h4><p><code>site</code> contains site wide information. For example, with <code>site.posts</code> we can access all the posts in the blog. Useful if we want to display statistics in a widget for example. </p>
<h4 id="-_Page">- Page</h4><p><code>page</code> is the main variable and contains a lot of information related to the current page, including all the post titles, dates, content and so on.</p>
<p>The properties of that object depend on which page template (index, post, archives) we are on. The full list <a href="https://hexo.io/docs/variables.html" target="_blank" rel="external">is available here</a>; but let’s look at them as we go.</p>
<h4 id="-_Config">- Config</h4><p><code>config</code> is a JavaScript object representation of the main <code>_config.yml</code> of the blog.</p>
<h4 id="-_Theme">- Theme</h4><p><code>theme</code> is a JavaScript object representation of the theme’s <code>_config.yml</code>.</p>
<h2 id="Theme’s_layout_creation">Theme’s layout creation</h2><p>We will start by creating the <code>/layout/layout.ejs</code> file discussed above.</p>
<h3 id="The_head_section">The head section</h3><p>Let’s start by creating a layout.ejs file and inserting the <code>&lt;html&gt;&lt;/html&gt;</code> </p>
<figure class="highlight html"><figcaption><span>layout/layout.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Head tag --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">head</span>') %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Here we are extracting all the <code>&lt;head&gt;</code> code into a <a href="https://hexo.io/docs/templates.html#Partials" target="_blank" rel="external">partial view</a>. Partial views promote separation of concern and reusability in our code. </p>
<p>The syntax is <code>partial(&#39;path&#39; [, arguments])</code></p>
<p>After creating that <code>layout/_partial/head.ejs</code> file, we are going to copy the head code from the bootstrap source code:</p>
<figure class="highlight html"><figcaption><span>layout/_partial/head.ejs </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"favicon/favicon.ico"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Blog Template for Bootstrap<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">css</span>('<span class="attr">bootstrap</span>/<span class="attr">css</span>/<span class="attr">bootstrap.min.css</span>') %&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- IE10 viewport hack for Surface/desktop Windows 8 bug --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">css</span>('<span class="attr">css</span>/<span class="attr">ie10-viewport-bug-workaround.css</span>') %&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Custom styles for this template --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">css</span>('<span class="attr">css</span>/<span class="attr">blog.css</span>') %&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--[if lt IE 9]&gt;</span><br><span class="line">        &lt;script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;![endif]--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Pretty straightforward. All we have done is use <a href="https://hexo.io/docs/helpers.html#css" target="_blank" rel="external">a CSS helper</a> to insert our style sheets.</p>
<p>The files in our <code>source</code> folder will be copied at the root of our generated site, so <code>source/</code> should not be included in the paths.</p>
<p>We will make the <code>&lt;title&gt;</code> and meta tags dynamic down the line but let’s leave it like so for now.</p>
<h3 id="The_after_footer_section">The after footer section</h3><p>The after footer section will be included just before the end of our <code>&lt;body&gt;</code> section. In that partial view, we will include all our scripts.</p>
<p>Let’s modify the layout:</p>
<figure class="highlight html"><figcaption><span>layout/layout.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Head tag --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">head</span>') %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- After footer scripts --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">after-footer</span>') %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>And create the content of the new <code>layout/_partial/after-footer.ejs</code> partial:</p>
<figure class="highlight html"><figcaption><span>layout/_partial/after-footer.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">js</span>('<span class="attr">bootstrap</span>/<span class="attr">js</span>/<span class="attr">bootstrap.min.js</span>') %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- IE10 viewport hack for Surface/desktop Windows 8 bug --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">js</span>('<span class="attr">js</span>/<span class="attr">ie10-viewport-bug-workaround.js</span>') %&gt;</span></span><br></pre></td></tr></table></figure>
<p>Notice the use of <a href="https://hexo.io/docs/helpers.html#js" target="_blank" rel="external">a JS helper function</a> for our local js files.</p>
<h3 id="Top_Menu">Top Menu</h3><p>In a similar fashion, let’s create the top menu just after the opening <code>&lt;body&gt;</code> tag.</p>
<figure class="highlight html"><figcaption><span>layout/layout.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// [...]</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Menu --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">menu</span>') %&gt;</span></span><br><span class="line">    </span><br><span class="line">// [...]</span><br></pre></td></tr></table></figure>
<p><code>layout/_partial/menu.ejs</code> partial content:</p>
<figure class="highlight html"><figcaption><span>layout/_partial/menu.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blog-masthead"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"blog-nav"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%</span> <span class="attr">for</span> (<span class="attr">var</span> <span class="attr">i</span> <span class="attr">in</span> <span class="attr">theme.menu</span>)&#123; %&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"blog-nav-item"</span> <span class="attr">href</span>=<span class="string">"&lt;%- url_for(theme.menu[i]) %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">i</span> %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Note the use of the <code>theme</code> global variable. <code>theme</code> is the JS equivalent to the theme’s <code>_config.yml</code>.</p>
<p>Here we are making the menu configurable in the theme’s configuration.</p>
<p>For this to work we will then need to add the config in <code>_config.yml</code>:</p>
<figure class="highlight bash"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Header</span></span><br><span class="line">menu:</span><br><span class="line">  Home: /</span><br><span class="line">  Archives: /archives</span><br></pre></td></tr></table></figure>
<p>In <code>menu.ejs</code> we enumerate through all the menu items in the config and create the corresponding links.</p>
<h3 id="Header">Header</h3><p>The header will be placed just below the menu and contain the blog title and subtitle:</p>
<figure class="highlight html"><figcaption><span>layout/_partial/header.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blog-header"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"blog-title"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">config.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"lead blog-description"</span>&gt;</span><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">config.subtitle</span>)&#123; %&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">config.subtitle</span> %&gt;</span><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>In here, we make use of the <code>config</code> variable which corresponds to the main <code>_config.yml</code> of the blog. It should have a title and subtitle properties configured.</p>
<p>When inserting the header in the layout, beware of the <code>&lt;div class=&quot;container&quot;&gt;&lt;/div&gt;</code> wrapper:</p>
<figure class="highlight html"><figcaption><span>layout/layout.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Head tag --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">head</span>') %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Menu --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">menu</span>') %&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Blog Header: title and subtitle --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">header</span>') %&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">// [...]</span><br></pre></td></tr></table></figure>
<h3 id="Footer">Footer</h3><p>The footer is all static for now, here is the content of the partial view:</p>
<figure class="highlight html"><figcaption><span>layout/_partial/footer.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"blog-footer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Blog template built for <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://getbootstrap.com"</span>&gt;</span>Bootstrap<span class="tag">&lt;/<span class="name">a</span>&gt;</span> by <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://twitter.com/mdo"</span>&gt;</span>@mdo<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Adapted to Hexo by <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.codeblocq.com/"</span>&gt;</span>klugjo<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Back to top<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Main_content_and_sidebar">Main content and sidebar</h3><p>At this point, we are ready to wrap things up and add the main content as well as the sidebar.</p>
<p>Here is the final <code>layout.ejs</code>:</p>
<figure class="highlight html"><figcaption><span>layout/layout.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Head tag --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">head</span>') %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Menu --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">menu</span>') %&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Blog Header: title and subtitle --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">header</span>') %&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- Main Content --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-8 blog-main"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">%-</span> <span class="attr">body</span> %&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- Sidebar --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-3 col-sm-offset-1 blog-sidebar"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">sidebar</span>') %&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Footer --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">footer</span>') %&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- After footer scripts --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">after-footer</span>') %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>The <code>body</code> variable corresponds to the content rendered from the different page type templates (cf above).</p>
<p>For the sidebar partial, we are simply going to hardcode the bootstrap template code for now:</p>
<figure class="highlight html"><figcaption><span>layout/_partial/sidebar.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar-module sidebar-module-inset"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>About<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Etiam porta <span class="tag">&lt;<span class="name">em</span>&gt;</span>sem malesuada magna<span class="tag">&lt;/<span class="name">em</span>&gt;</span> mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar-module"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Archives<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"list-unstyled"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>March 2014<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>February 2014<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>January 2014<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>December 2013<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>November 2013<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar-module"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Elsewhere<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"list-unstyled"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>GitHub<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Twitter<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Facebook<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="The_index_file">The index file</h2><p>Now that our layout is in place, we are ready to create the first page type template: index.ejs.</p>
<p>Here is a trivial first version:</p>
<figure class="highlight html"><figcaption><span>layout/index.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Useless ? Well, this allows us to test out theme in browser:</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Verify that everything is alright</span></span><br><span class="line">hexo generate</span><br><span class="line"></span><br><span class="line"><span class="meta"># Start hexo server</span></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p>And open your browser at <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>. Tada !</p>
<p><strong>Note: Don’t forget to update the theme in your blog’s config:</strong></p>
<figure class="highlight bash"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: http://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: http://hexo.io/themes/</span></span><br><span class="line">theme: bootstrap-blog-hexo</span><br></pre></td></tr></table></figure>
<h3 id="Enumerate_through_blog_posts">Enumerate through blog posts</h3><p>On the home page we want to display post excerpts.</p>
<p>First of all, let’s enumerate through the posts in our index.ejs:</p>
<figure class="highlight html"><figcaption><span>layout.index.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">page.posts.each</span>(<span class="attr">function</span>(<span class="attr">item</span>)&#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">article-excerpt</span>', &#123;<span class="attr">item:</span> <span class="attr">item</span>&#125;) %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125;); %&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Get a list of posts for that page with <code>page.posts</code></li>
<li>Pass an argument in a partial by using <code>&lt;%- partial(&#39;name&#39;, args) %&gt;</code></li>
</ul>
<h3 id="Article_layout">Article layout</h3><p>Let’s create the <code>article-excerpt.ejs</code> partial and adapt the code to our theme. Here is what I came up with:</p>
<figure class="highlight html"><figcaption><span>layout/_partial/article-excerpt.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blog-post"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Title --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"blog-post-title"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- config.root %&gt;&lt;%- item.path %&gt;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%-</span> <span class="attr">item.title</span> %&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Date and Author --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"blog-post-meta"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%=</span> <span class="attr">item.date.format</span>(<span class="attr">config.date_format</span>) %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">item.author</span>) &#123; %&gt;</span></span><br><span class="line">            by <span class="tag">&lt;<span class="name">%-</span> <span class="attr">item.author</span> %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">item.excerpt</span> || <span class="attr">item.content</span> %&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Only display the Read More link if we are displaying an excerpt --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">item.excerpt</span>) &#123; %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- config.root %&gt;&lt;%- item.path %&gt;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">%=</span> <span class="attr">theme.excerpt_link</span> %&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="-_Link_to_the_full_post:">- Link to the full post:</h3><p>The link to the full post is created by concatenating <code>config.root</code> (config option which really shoud be equal to <code>/</code>) and <code>item.path</code> which is the relative path or link to the full post.</p>
<h3 id="-_Post_author">- Post author</h3><p>By default, Hexo does not have any author property in it’s post variable. But we can add whatever variable we want to the <a href="https://hexo.io/docs/front-matter.html" target="_blank" rel="external">front matter</a>. </p>
<p>If you want an author name to be displayed for a post, the front matter for your post should look something like</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> Hello World</span><br><span class="line"><span class="attr">author:</span> Klughertz Jonathan</span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<h3 id="-_Item_excerpt_vs-_Item_content">- Item excerpt vs. Item content</h3><p>When writing a post with Hexo, you can use a <code>&lt;!-- more --&gt;</code> tag to delimit the excerpt from the content. In our case, we are displaying the excerpt since this is a list of posts.</p>
<p>The user then has the possibility to click on a post’s title or on the read more link to view the entire post.</p>
<h3 id="-_Read_More_text">- Read More text</h3><p>I have added a new property to my theme’s config, do not forget to add it to yours:</p>
<figure class="highlight bash"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Read More text</span></span><br><span class="line">excerpt_link: Read More</span><br></pre></td></tr></table></figure>
<p>Hopefully the rest of the code is easy enough to understand. At this point, I suggest you write a few additional posts than the default Hello World and play around with the results.</p>
<h2 id="Pagination">Pagination</h2><p>The last thing we are going to tackle in this section is the pagination for the home page</p>
<p>Let’s start by including yet another partial to our <code>index.ejs</code>:</p>
<figure class="highlight html"><figcaption><span>layout/index.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">page.posts.each</span>(<span class="attr">function</span>(<span class="attr">item</span>)&#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">article-excerpt</span>', &#123;<span class="attr">item:</span> <span class="attr">item</span>&#125;) %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125;); %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">pagination</span>') %&gt;</span></span><br></pre></td></tr></table></figure>
<p>And finish by writing our pagination partial view, <code>layout/_partial/pagination.ejs</code>:</p>
<figure class="highlight html"><figcaption><span>layout/_partial/pagination.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">page.prev</span>)&#123; %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- config.root %&gt;&lt;%- page.prev_link %&gt;"</span>&gt;</span>Previous<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">page.next</span>)&#123; %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- config.root %&gt;&lt;%- page.next_link %&gt;"</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>page.prev</code>: Previous page number. 0 if the current page is the first.</li>
<li><code>page.next</code>: Next page number. 0 if the current page is the last.</li>
<li><code>page.next_link</code> and <code>page.prev_link</code> are self explanatory.</li>
</ul>
<p>You can adjust the post per page in the main config (<code>per_page</code> property) if you don’t have enough posts to see the pagination in action.</p>
<p>That’s it for today, in the <a href="/2016/03/Create-an-Hexo-Theme-Part-2-Other-Pages/">next section of this tutorial</a>, we will finish all the remaining pages of the blog.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>In this multi part tutorial, you will learn how to create an <a href="https://hexo.io/docs/themes.html">Hexo Theme</a> from scratch. I really love Hexo and use it everyday; unfortunately, as of today, the documentation for theme creation is pretty slim. Here is my attempt at fixing that.</p>]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://klugjo.github.io/tags/Hexo/"/>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
      <category term="Theme" scheme="http://klugjo.github.io/tags/Theme/"/>
    
      <category term="Bootstrap" scheme="http://klugjo.github.io/tags/Bootstrap/"/>
    
      <category term="Template" scheme="http://klugjo.github.io/tags/Template/"/>
    
      <category term="EJS" scheme="http://klugjo.github.io/tags/EJS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Setup Gulp to compile ES6 ES2015 code]]></title>
    <link href="http://klugjo.github.io/2016/03/Setup-Gulp-to-compile-ES6-ES2015-code/"/>
    <id>http://klugjo.github.io/2016/03/Setup-Gulp-to-compile-ES6-ES2015-code/</id>
    <published>2016-03-07T09:20:16.000Z</published>
    <updated>2016-03-07T09:45:59.000Z</updated>
    <content type="html"><![CDATA[<p>Basics of setting yourself up with Gulp and Babel. </p>
<p>In this example I am going to look at compiling ES6 to ES5 using Babel, but this example will work with compiling your React jsx code as well. As long a you know how to configure Babel.</p>
<a id="more"></a>
<h2 id="Project_Structure">Project Structure</h2><p>This is what my project folder structure looks like:</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|<span class="comment">-- dist // Build will end up here</span></span><br><span class="line">|<span class="comment">-- src // All source code should be inside this folder</span></span><br><span class="line">    |<span class="comment">-- index.js </span></span><br><span class="line">|<span class="comment">-- gulpfile.js</span></span><br></pre></td></tr></table></figure>
<p>Our <code>src/index.js</code> contains the ES6 code and gulp will create a compiled version inside the <code>/dist</code> folder.</p>
<p>The ES2015 code I am using to test is</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(() =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">"ES2015 FTW"</span>); &#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<h2 id="npm_install">npm install</h2><p>Let’s install everything we need</p>
<h3 id="Babel">Babel</h3><p>We need the babel core, CLI and es2015 preset:</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install </span>--save-dev <span class="keyword">babel-cli </span><span class="keyword">babel-core </span><span class="keyword">babel-preset-es2015</span></span><br></pre></td></tr></table></figure>
<h3 id="Gulp">Gulp</h3><p>We need gulp and the <a href="https://github.com/babel/gulp-babel" target="_blank" rel="external">babel module for gulp</a>.</p>
<figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> gulp gulp-babel</span><br></pre></td></tr></table></figure>
<p>Also make sure you have <code>gulp</code> installed globally.</p>
<h2 id="Configuration">Configuration</h2><h3 id="Babel-1">Babel</h3><p>Configure babel to use the es2015 plugin in your package.json (or .babelrc if you prefer).</p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"babel"</span>: &#123;</span><br><span class="line">    <span class="string">"presets"</span>: [<span class="string">"es2015"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Gulp-1">Gulp</h3><p>Create your <code>gulpfile.js</code> and require the two gulp libs:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>);</span><br></pre></td></tr></table></figure>
<p>Then declare our default task:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Then for our task content: </p>
<ul>
<li>Pick up the js files in <code>/src</code></li>
<li>Compile it with babel</li>
<li>Put everything in <code>/dist</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'src/**/*.js'</span>)</span><br><span class="line">        .pipe(babel())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'dist'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Run_the_build_script">Run the build script</h2><p>Run the build script using </p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>gulp</span><br></pre></td></tr></table></figure>
<p>And your compiled files will be in the output folder.</p>
<p>This is what my <code>index.js</code> looks like after being transpiled:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"ES6 FTW"</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Note">Note</h3><p>If you want to write your <code>gulpfile.js</code> in ES2015 and your version of node does not support it, <a href="https://markgoodyear.com/2015/06/using-es6-with-gulp/" target="_blank" rel="external">follow the instructions in this article</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Basics of setting yourself up with Gulp and Babel. </p>
<p>In this example I am going to look at compiling ES6 to ES5 using Babel, but this example will work with compiling your React jsx code as well. As long a you know how to configure Babel.</p>]]>
    
    </summary>
    
      <category term="Babel" scheme="http://klugjo.github.io/tags/Babel/"/>
    
      <category term="ES2015" scheme="http://klugjo.github.io/tags/ES2015/"/>
    
      <category term="ES6" scheme="http://klugjo.github.io/tags/ES6/"/>
    
      <category term="Gulp" scheme="http://klugjo.github.io/tags/Gulp/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Unit Test React Components]]></title>
    <link href="http://klugjo.github.io/2016/03/Unit-Test-React-Components/"/>
    <id>http://klugjo.github.io/2016/03/Unit-Test-React-Components/</id>
    <published>2016-03-02T06:04:35.000Z</published>
    <updated>2016-03-03T03:46:46.000Z</updated>
    <content type="html"><![CDATA[<p>In this article you will learn how to setup your environment and get started with React Unit Testing. The setup I am detailing here is inspired by <a href="http://teropa.info/blog/2015/09/10/full-stack-redux-tutorial.html#the-client-application" target="_blank" rel="external">this much longer yet amazing tutorial</a>.</p>
<p>To get the most out of this post, it’s best if you have had some exposure to at least some of these frameworks/tools:</p>
<ul>
<li><strong>Node.js and NPM:</strong> install packages and <a href="/2015/12/Run-scripts-with-npm/">run custom scripts</a></li>
<li><strong>webpack:</strong> Basic configuration to compile code and launch a web server</li>
<li><strong>React:</strong> <a href="/2015/12/Build-your-first-React-application/">Basics of writing components</a></li>
<li><strong>mocha:</strong> Run unit tests with mocha</li>
<li><strong>chai:</strong> Basics of writing unit tests with chai</li>
<li><strong>Babel:</strong> <a href="/2016/02/How-to-setup-Babel6-for-NodeJs/">Compile ES6</a> and React code with Babel</li>
<li><strong>ES6:</strong> <a href="/2016/02/Babel-and-Node-Module-Loader/">Import statement</a> and some of the new additions to the language</li>
</ul>
<a id="more"></a>
<h2 id="Project_Setup">Project Setup</h2><p>Everything we need to write our first React component.</p>
<h3 id="NPM">NPM</h3><p>Let’s get started with a new NPM project</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">npm</span> init -y</span><br></pre></td></tr></table></figure>
<h3 id="Dist_Folder">Dist Folder</h3><p>Create a <code>dist</code> folder and an <code>dist/index.html</code> file that will be the shell for our React code.</p>
<p>Here is the HTML code we will use:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>We will use <code>webpack</code> to generate <code>bundle.js</code> from the React code will write later on.</p>
<h3 id="Webpack_&amp;_Babel">Webpack &amp; Babel</h3><h4 id="Install_Webpack_and_Webpack’s_local_web_server_module-">Install Webpack and Webpack’s local web server module.</h4><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> webpack webpack-<span class="built_in">dev</span>-server</span><br></pre></td></tr></table></figure>
<p>If you have not done so, install these modules globally as well: </p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> -g webpack webpack-dev-<span class="keyword">server</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>webpack</code>: base webpack module</li>
<li><code>webpack-dev-server</code>: easy web server with webpack (defaults to <a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a>)</li>
</ul>
<h4 id="We_will_also_need_all_the_Babel_compilers:">We will also need all the Babel compilers:</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install </span>--save-dev <span class="keyword">babel-core </span><span class="keyword">babel-loader </span><span class="keyword">babel-preset-react </span><span class="keyword">babel-preset-es2015</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>babel-core</code>: needed to do anything with babel. Install this globally if you have not already done so.</li>
<li><code>babel-loader</code>: <a href="https://github.com/babel/babel-loader" target="_blank" rel="external">babel plugin for webpack</a>.</li>
<li><code>babel-preset-react</code>: babel plugin to compile our React JSX files.</li>
<li><code>babel-preset-es2015</code>: babel plugin to compile our ES6/ES2015 code.</li>
</ul>
<h4 id="We_are_now_ready_to_write_the_first_version_of_webpack’s_configuration:_webpack-config-js">We are now ready to write the first version of webpack’s configuration: <code>webpack.config.js</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: [</span><br><span class="line">        <span class="string">'./src/index.jsx'</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">            loaders: [&#123;</span><br><span class="line">                test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                loader: <span class="string">'babel'</span></span><br><span class="line">            &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.jsx'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.join(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        publicPath: <span class="string">'/'</span>,</span><br><span class="line">        filename: <span class="string">'bundle.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: <span class="string">'./dist'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>module</code> and <code>resolve</code> contain the Babel configuration.</li>
<li><code>output</code> contains the output <code>bundle.js</code> configuration.</li>
<li><code>devserver</code> indicates which folder should be used as the root for <code>webpack-dev-server</code>.</li>
</ul>
<h3 id="React_libraries">React libraries</h3><p>The start of the show:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save react react-dom</span><br></pre></td></tr></table></figure>
<ul>
<li><code>react</code>: React base module</li>
<li><code>react-dom</code>: to render React component to the DOM</li>
</ul>
<h3 id="Package-json_-_Babel_configuration">Package.json - Babel configuration</h3><p>In your package.json, add the following section to tell Babel to use the ES6 and React plugins. This is usually done in a <code>.babelrc</code> file but <a href="/2016/02/How-to-setup-Babel6-for-NodeJs/">I find it cleaner</a> to put it in <code>package.json</code></p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"babel"</span>: &#123;</span><br><span class="line">    <span class="string">"presets"</span>: [</span><br><span class="line">      <span class="string">"es2015"</span>,</span><br><span class="line">      <span class="string">"react"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<h2 id="App_code">App code</h2><p>Let’s start building !</p>
<h3 id="App_requirements">App requirements</h3><p>This is what our app does. Starting with an array of strings, our component will generate one button for each of these strings. A click on any of the generated buttons should display the button text in a label.</p>
<h3 id="src/index-jsx">src/index.jsx</h3><p>Let’s start with a <code>src/index.jsx</code> file that will hold our component:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> Component <span class="keyword">from</span> <span class="string">'./component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = [<span class="string">'OK'</span>, <span class="string">'No'</span>, <span class="string">'Cancel'</span>];</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Component</span> <span class="attr">options</span>=<span class="string">&#123;options&#125;</span> /&gt;</span>,</span><br><span class="line">    document.getElementById('app')</span><br><span class="line">);</span></span><br></pre></td></tr></table></figure>
<p>We have a <code>Component</code> React class with an <code>options</code> property that will hold our string array.</p>
<h3 id="src/Component-jsx">src/Component.jsx</h3><p>Here is the code for that component, put it in <code>src/Component.jsx</code>:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</span><br><span class="line">    getOptions: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.props.options || [];</span><br><span class="line">    &#125;,</span><br><span class="line">    getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            displayText: <span class="string">"Click on a button"</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    clickHandler: <span class="function"><span class="keyword">function</span> (<span class="params">displayText</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;displayText: displayText&#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;"display-text"&#125;</span>&gt;</span>&#123;this.state.displayText&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            &#123;</span><br><span class="line">                this.getOptions().map(option =&gt;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">key</span>=<span class="string">&#123;option&#125;</span></span><br><span class="line">                            <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.clickHandler(option)&#125;&gt;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;option&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>The initial text in our <code>div.display-text</code> label is <code>&quot;Click on a button&quot;</code>.</li>
<li>We are generating buttons for each string in <code>this.props.options</code>.</li>
<li>A click on one of these buttons will update the state and the label’s text.</li>
</ul>
<p>Pretty straightforward. At this stage, you can to run the app with:</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ webpack-dev-<span class="keyword">server</span></span><br></pre></td></tr></table></figure>
<p>and open your browser at <a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a>.</p>
<h2 id="Unit_testing">Unit testing</h2><p>Let’s now look at why we are here in the first place. Unit testing our newly created <code>Component</code>.</p>
<h3 id="Unit_testing_libraries">Unit testing libraries</h3><p>Let’s start by installing and configuring our Unit testing environment. We will be using:</p>
<ul>
<li><p><code>mocha</code> to run our tests and <code>chai</code> to write them. </p>
</li>
<li><p><code>jsdom</code> to emulate a web browser so that we won’t need a real browser to run our tests.</p>
</li>
<li><p><code>react-addons-test-utils</code> which is the official React test helper library.</p>
</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install </span>--save-dev mocha chai <span class="keyword">jsdom </span>react-<span class="keyword">addons-test-utils</span></span><br></pre></td></tr></table></figure>
<h3 id="Configure_jsdom">Configure <code>jsdom</code></h3><p><a href="https://github.com/tmpvar/jsdom" target="_blank" rel="external">jsdom</a> requires some configuration that we will put in a <code>test/test-helper.js</code> file. Later, <code>mocha</code> will run this file before running any test.</p>
<p>We need to set up a basic HTML environment for <code>jsdom</code> and transfers the <code>window</code> object and all its properties to Node’s global object so that mocha can access them seamlessly.</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import jsdom from 'jsdom';</span><br><span class="line"></span><br><span class="line"><span class="comment">// Setup a basic HTML document</span></span><br><span class="line"><span class="keyword">const</span> doc = jsdom.jsdom('&lt;!doctype html&gt;&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;');</span><br><span class="line"></span><br><span class="line"><span class="comment">// Extract the window element from the document</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">win</span> = doc.defaultView;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Insert these objects in Node's global object.</span></span><br><span class="line"><span class="keyword">global</span>.document = doc;</span><br><span class="line"><span class="keyword">global</span>.<span class="keyword">window</span> = <span class="keyword">win</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Take out all the properties from the window object and add them to global</span></span><br><span class="line">Object.keys(<span class="keyword">window</span>).<span class="keyword">forEach</span>((key) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(key <span class="keyword">in</span> <span class="keyword">global</span>)) &#123;</span><br><span class="line">        <span class="keyword">global</span>[key] = <span class="keyword">window</span>[key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="package-json_-_Test_script">package.json - Test script</h3><p>Our Mocha command is pretty complex so let’s add a script in the the package.json.</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"mocha --compilers js:babel-core/register --require ./test/test-helper.js 'test/**/*.@(js|jsx)'"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>Now we can simply type <code>npm run test</code> to run our tests.</p>
<p>Details on that command:</p>
<ul>
<li><code>&#39;test/**/*.@(js|jsx)&#39;</code>: It runs all mocha unit tests in <code>.js</code> and <code>.jsx</code> files in the <code>/test/</code> folder.</li>
<li><code>--compilers js:babel-core/register</code>: It compiles the ES6 and React code with Babel. You might have to install <code>babel-core</code> globally to execute that command. Do so if you run into problems.</li>
<li><code>--require ./test/test-helper.js</code>: It executes our jsdom configuration in <code>test/test-helper.js</code> before running the tests.</li>
</ul>
<h3 id="Writing_the_first_test">Writing the first test</h3><p>And the moment we have all been waiting for: our first test in <code>test/Component-spec.jsx</code>.</p>
<p>Let’s start bu testing the button generation:</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    renderIntoDocument,</span><br><span class="line">    scryRenderedDOMComponentsWithTag</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-addons-test-utils'</span>;</span><br><span class="line"><span class="keyword">import</span> Component <span class="keyword">from</span> <span class="string">'../src/Component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;expect&#125; <span class="keyword">from</span> <span class="string">'chai'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'Component'</span>, () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="literal">it</span>(<span class="string">'renders as many buttons as stated in the options property'</span>, () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> component = renderIntoDocument(</span><br><span class="line">            &lt;Component options=&#123;[<span class="string">'Bleach'</span>, <span class="string">'Nevermind'</span>, <span class="string">'In Utero'</span>]&#125; /&gt;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> buttons = scryRenderedDOMComponentsWithTag(component, <span class="string">'button'</span>);</span><br><span class="line"></span><br><span class="line">        expect(buttons.length).<span class="keyword">to</span>.equal(<span class="number">3</span>);</span><br><span class="line">        expect(buttons[<span class="number">0</span>].textContent).<span class="keyword">to</span>.equal(<span class="string">'Bleach'</span>);</span><br><span class="line">        expect(buttons[<span class="number">1</span>].textContent).<span class="keyword">to</span>.equal(<span class="string">'Nevermind'</span>);</span><br><span class="line">        expect(buttons[<span class="number">2</span>].textContent).<span class="keyword">to</span>.equal(<span class="string">'In Utero'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Imports">Imports</h3><p>We are going to use some of the <a href="https://facebook.github.io/react/docs/test-utils.html" target="_blank" rel="external">react test utils methods</a>:</p>
<ul>
<li><code>renderIntoDocument</code>: renders a component into a detached DOM.</li>
<li><code>scryRenderedDOMComponentsWithTag</code>: finds all instances of components based on tag name</li>
</ul>
<h3 id="Test_Flow">Test Flow</h3><p>We start by rendering our <code>Component</code>, then retrieve all the <buttons> and test that the button’s text is what we set in the <code>options</code> property.</buttons></p>
<h3 id="Run_the_tests">Run the tests</h3><p>Run this test using</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="built_in">run</span> test</span><br><span class="line"><span class="comment"># 1 passing (43ms)</span></span><br></pre></td></tr></table></figure>
<h3 id="Writing_a_second_test">Writing a second test</h3><p>Before we go, let’s write a second test that check that the test has changed when a button is clicked:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    renderIntoDocument,</span><br><span class="line">    scryRenderedDOMComponentsWithTag,</span><br><span class="line">    findRenderedDOMComponentWithClass,</span><br><span class="line">    Simulate</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-addons-test-utils'</span>;</span><br><span class="line"><span class="keyword">import</span> Component <span class="keyword">from</span> <span class="string">'../src/Component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;expect&#125; <span class="keyword">from</span> <span class="string">'chai'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'Component'</span>, () =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// [...]</span></span><br><span class="line"></span><br><span class="line">    it(<span class="string">'changes the displayed text when button is clicked'</span>, () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> component = renderIntoDocument(</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">Component</span> <span class="attr">options</span>=<span class="string">&#123;['Bleach',</span> '<span class="attr">Nevermind</span>', '<span class="attr">In</span> <span class="attr">Utero</span>']&#125; /&gt;</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        const displayText = findRenderedDOMComponentWithClass(component, 'display-text');</span><br><span class="line">        const buttons = scryRenderedDOMComponentsWithTag(component, 'button');</span><br><span class="line"></span><br><span class="line">        Simulate.click(buttons[0]);</span><br><span class="line">        expect(displayText.textContent).to.equal('Bleach');</span><br><span class="line"></span><br><span class="line">        Simulate.click(buttons[1]);</span><br><span class="line">        expect(displayText.textContent).to.equal('Nevermind');</span><br><span class="line"></span><br><span class="line">        Simulate.click(buttons[2]);</span><br><span class="line">        expect(displayText.textContent).to.equal('In Utero');</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span></span><br></pre></td></tr></table></figure>
<h3 id="Imports-1">Imports</h3><p>Check the imports: we have added two more <a href="https://facebook.github.io/react/docs/test-utils.html" target="_blank" rel="external">react test utils methods</a>:</p>
<ul>
<li><code>findRenderedDOMComponentWithClass</code>: which finds one unique instance of an element based on its css class.</li>
<li><code>Simulate</code>: simulate user interaction, here <code>Simulate.click</code>.</li>
</ul>
<h3 id="Test_Flow-1">Test Flow</h3><p>We start by rendering our <code>Component</code>, then retrieve all the <code>&lt;buttons&gt;</code> and the label with the display text.<br>For each button we simulate a click and check that the text content of the label has changed and matched the button’s text.</p>
<h3 id="Run_the_tests-1">Run the tests</h3><p>Run both our tests using:</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="built_in">run</span> test</span><br><span class="line"><span class="comment"># 2 passing (50ms)</span></span><br></pre></td></tr></table></figure>
<p>Hope you found this tutorial useful, I sure had a great time writing it :)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>In this article you will learn how to setup your environment and get started with React Unit Testing. The setup I am detailing here is inspired by <a href="http://teropa.info/blog/2015/09/10/full-stack-redux-tutorial.html#the-client-application">this much longer yet amazing tutorial</a>.</p>
<p>To get the most out of this post, it’s best if you have had some exposure to at least some of these frameworks/tools:</p>
<ul>
<li><strong>Node.js and NPM:</strong> install packages and <a href="/2015/12/Run-scripts-with-npm/">run custom scripts</a></li>
<li><strong>webpack:</strong> Basic configuration to compile code and launch a web server</li>
<li><strong>React:</strong> <a href="/2015/12/Build-your-first-React-application/">Basics of writing components</a></li>
<li><strong>mocha:</strong> Run unit tests with mocha</li>
<li><strong>chai:</strong> Basics of writing unit tests with chai</li>
<li><strong>Babel:</strong> <a href="/2016/02/How-to-setup-Babel6-for-NodeJs/">Compile ES6</a> and React code with Babel</li>
<li><strong>ES6:</strong> <a href="/2016/02/Babel-and-Node-Module-Loader/">Import statement</a> and some of the new additions to the language</li>
</ul>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://klugjo.github.io/tags/JavaScript/"/>
    
      <category term="Babel" scheme="http://klugjo.github.io/tags/Babel/"/>
    
      <category term="ES2015" scheme="http://klugjo.github.io/tags/ES2015/"/>
    
      <category term="ES6" scheme="http://klugjo.github.io/tags/ES6/"/>
    
      <category term="React" scheme="http://klugjo.github.io/tags/React/"/>
    
      <category term="TDD" scheme="http://klugjo.github.io/tags/TDD/"/>
    
      <category term="Webpack" scheme="http://klugjo.github.io/tags/Webpack/"/>
    
  </entry>
  
</feed>
